;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 07/07/2018 12:07:42
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x00000004148E  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x0013B4  	5044
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x00137E  	4990
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x00146A  	5226
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x0014A6  	5286
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x001594  	5524
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x148E	0x20834F  	MOV	#2100, W15
0x1490	0x20FFF0  	MOV	#4095, W0
0x1492	0xB7A020  	MOV	WREG, SPLIM
0x1494	0x200000  	MOV	#0, W0
0x1496	0xB7A034  	MOV	WREG, PSVPAG
0x1498	0x200040  	MOV	#4, W0
0x149A	0xB72044  	IOR	CORCON
0x149C	0x000000021610  	CALL	5648
;EBB_DPX.c,177 :: 		void main() {
;EBB_DPX.c,178 :: 		EBB_Init();
0x14A0	0x07FECC  	RCALL	_EBB_Init
;EBB_DPX.c,179 :: 		while(1)
L_main166:
;EBB_DPX.c,181 :: 		}
0x14A2	0x37FFFF  	BRA	L_main166
;EBB_DPX.c,183 :: 		}
L_end_main:
L__main_end_loop:
0x14A4	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_EBB_Init:
;initialization.c,5 :: 		void EBB_Init()  //Initialize all hardware peripherals and software variables
;initialization.c,8 :: 		if(EEPROM_Read(ADDR_FIRST_BOOT) == 0xFFFF)                           //First boot initialization  (Central position)
0x123A	0x781F8A  	PUSH	W10
0x123C	0x781F8B  	PUSH	W11
0x123E	0x781F8C  	PUSH	W12
0x1240	0x2FDD0A  	MOV	#64976, W10
0x1242	0x2007FB  	MOV	#127, W11
0x1244	0x07FDAF  	RCALL	_EEPROM_Read
0x1246	0x2FFFF1  	MOV	#65535, W1
0x1248	0xE10001  	CP	W0, W1
0x124A	0x3A001C  	BRA NZ	L_EBB_Init147
L__EBB_Init322:
;initialization.c,10 :: 		EEPROM_WRITE(ADDR_LAST_POSCNT, 0);
0x124C	0xEF2018  	CLR	W12
0x124E	0x2FDA0A  	MOV	#64928, W10
0x1250	0x2007FB  	MOV	#127, W11
0x1252	0x07FE94  	RCALL	_EEPROM_Write
;initialization.c,11 :: 		while(WR_bit);
L_EBB_Init148:
0x1254	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1256	0x370001  	BRA	L_EBB_Init149
0x1258	0x37FFFD  	BRA	L_EBB_Init148
L_EBB_Init149:
;initialization.c,12 :: 		EEPROM_WRITE(ADDR_LAST_MAPPED_POSITION, 8);
0x125A	0x20008C  	MOV	#8, W12
0x125C	0x2FDC0A  	MOV	#64960, W10
0x125E	0x2007FB  	MOV	#127, W11
0x1260	0x07FE8D  	RCALL	_EEPROM_Write
;initialization.c,13 :: 		while(WR_bit);
L_EBB_Init150:
0x1262	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1264	0x370001  	BRA	L_EBB_Init151
0x1266	0x37FFFD  	BRA	L_EBB_Init150
L_EBB_Init151:
;initialization.c,14 :: 		EEPROM_WRITE(ADDR_LAST_NUMBER_QUARTER_TURNS, POSITION_8);
0x1268	0x20010C  	MOV	#16, W12
0x126A	0x2FDB0A  	MOV	#64944, W10
0x126C	0x2007FB  	MOV	#127, W11
0x126E	0x07FE86  	RCALL	_EEPROM_Write
;initialization.c,15 :: 		while(WR_bit);
L_EBB_Init152:
0x1270	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1272	0x370001  	BRA	L_EBB_Init153
0x1274	0x37FFFD  	BRA	L_EBB_Init152
L_EBB_Init153:
;initialization.c,16 :: 		EEPROM_WRITE(ADDR_FIRST_BOOT, 0);
0x1276	0xEF2018  	CLR	W12
0x1278	0x2FDD0A  	MOV	#64976, W10
0x127A	0x2007FB  	MOV	#127, W11
0x127C	0x07FE7F  	RCALL	_EEPROM_Write
;initialization.c,17 :: 		while(WR_bit);
L_EBB_Init154:
0x127E	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1280	0x370001  	BRA	L_EBB_Init155
0x1282	0x37FFFD  	BRA	L_EBB_Init154
L_EBB_Init155:
;initialization.c,18 :: 		}
L_EBB_Init147:
;initialization.c,20 :: 		ADPCFG = 0b1111111111111110;                    //analog input on AN0 (Current Sense)
0x1284	0x2FFFE0  	MOV	#65534, W0
0x1286	0xB7A2A8  	MOV	WREG, ADPCFG
;initialization.c,21 :: 		TRISDbits.TRISD1 = 0;                           //green led;
0x1288	0xA922D2  	BCLR.B	TRISDbits, #1
;initialization.c,22 :: 		TRISDbits.TRISD3 = 0;                           //blue led;
0x128A	0xA962D2  	BCLR.B	TRISDbits, #3
;initialization.c,23 :: 		TRISDbits.TRISD2 = 0;                           //buzzer;
0x128C	0xA942D2  	BCLR.B	TRISDbits, #2
;initialization.c,24 :: 		TRISEbits.TRISE0 = 0;                           //PWM output
0x128E	0xA902D8  	BCLR	TRISEbits, #0
;initialization.c,25 :: 		TRISEbits.TRISE4 = 0;                           //Forward output
0x1290	0xA982D8  	BCLR	TRISEbits, #4
;initialization.c,26 :: 		TRISEbits.TRISE3 = 0;                           //Reverse output
0x1292	0xA962D8  	BCLR	TRISEbits, #3
;initialization.c,27 :: 		TRISEbits.TRISE2 = 0;                           //Enable output
0x1294	0xA942D8  	BCLR	TRISEbits, #2
;initialization.c,28 :: 		TRISBbits.TRISB0 = 1;                           //set ADC pin as input (Current sense: Vcsns = Iout x 3.1)
0x1296	0xA802C6  	BSET	TRISBbits, #0
;initialization.c,29 :: 		BUZZER = 0;                                                                                //Outputs at zero
0x1298	0xA942D6  	BCLR	LATD2_bit, BitPos(LATD2_bit+0)
;initialization.c,30 :: 		LED_B = 0;
0x129A	0xA922D6  	BCLR	LATD1_bit, BitPos(LATD1_bit+0)
;initialization.c,31 :: 		LED_G = 0;
0x129C	0xA962D6  	BCLR	LATD3_bit, BitPos(LATD3_bit+0)
;initialization.c,33 :: 		QEICON = 0b0000010110000010;                    //Set Quadrature Encoder
0x129E	0x205820  	MOV	#1410, W0
0x12A0	0xB7A122  	MOV	WREG, QEICON
;initialization.c,35 :: 		POSCNT = EEPROM_Read(ADDR_LAST_POSCNT);              //Position Counter starter value (offset half register)
0x12A2	0x2FDA0A  	MOV	#64928, W10
0x12A4	0x2007FB  	MOV	#127, W11
0x12A6	0x07FD7E  	RCALL	_EEPROM_Read
0x12A8	0xB7A126  	MOV	WREG, POSCNT
;initialization.c,36 :: 		MAXCNT = QUARTER_TURN;                          //Set maxcounter to a quarter turn for interrupts
0x12AA	0x227400  	MOV	#10048, W0
0x12AC	0xB7A128  	MOV	WREG, MAXCNT
;initialization.c,37 :: 		IPC10bits.QEIIP = 4;                            //Set interrupt priority on 4 for MAXCNT match
0x12AE	0xB3C040  	MOV.B	#4, W0
0x12B0	0x784080  	MOV.B	W0, W1
0x12B2	0x200A80  	MOV	#lo_addr(IPC10bits), W0
0x12B4	0x68C090  	XOR.B	W1, [W0], W1
0x12B6	0x60C0E7  	AND.B	W1, #7, W1
0x12B8	0x200A80  	MOV	#lo_addr(IPC10bits), W0
0x12BA	0x68C090  	XOR.B	W1, [W0], W1
0x12BC	0x200A80  	MOV	#lo_addr(IPC10bits), W0
0x12BE	0x784801  	MOV.B	W1, [W0]
;initialization.c,38 :: 		IFS2bits.QEIIF = 0;                             //Reset Interrupt Flag
0x12C0	0xA90089  	BCLR	IFS2bits, #8
;initialization.c,39 :: 		IEC2bits.QEIIE = 1;                             //Enable MAXCNT match interrupt
0x12C2	0xA80091  	BSET	IEC2bits, #8
;initialization.c,41 :: 		PWMCON1 = 0b0000000100000001;                   //independent mode, only PWM1L enabled
0x12C4	0x201010  	MOV	#257, W0
0x12C6	0xB7A1C8  	MOV	WREG, PWMCON1
;initialization.c,42 :: 		PTPER = 1999;                                   //PWM frequency = 10 kHz
0x12C8	0x207CF0  	MOV	#1999, W0
0x12CA	0xB7A1C4  	MOV	WREG, PTPER
;initialization.c,43 :: 		PDC1 = 0;                                       //initial 0% of duty cycle - motor is off;        MAX_Value = 4000;
0x12CC	0xEF21D6  	CLR	PDC1
;initialization.c,44 :: 		PTMR = 0;                                       //to clear the PWM time base
0x12CE	0xEF21C2  	CLR	PTMR
;initialization.c,45 :: 		PTCON = 0b1000000000000000;                     //prescaler 1:1, postscaler 1:1, free running mode, PWM on
0x12D0	0x280000  	MOV	#32768, W0
0x12D2	0xB7A1C0  	MOV	WREG, PTCON
;initialization.c,46 :: 		FORWARD = 0;                                                                        //all h-bridge input at zero
0x12D4	0xA982DC  	BCLR	LATE4_bit, BitPos(LATE4_bit+0)
;initialization.c,47 :: 		REVERSE = 0;
0x12D6	0xA962DC  	BCLR	LATE3_bit, BitPos(LATE3_bit+0)
;initialization.c,48 :: 		ENABLE = 0;
0x12D8	0xA942DC  	BCLR	LATE2_bit, BitPos(LATE2_bit+0)
;initialization.c,51 :: 		ebb_current_pos = EEPROM_Read(ADDR_LAST_MAPPED_POSITION);                       //Get the old mapped position
0x12DA	0x2FDC0A  	MOV	#64960, W10
0x12DC	0x2007FB  	MOV	#127, W11
0x12DE	0x07FD62  	RCALL	_EEPROM_Read
0x12E0	0x884160  	MOV	W0, _ebb_current_pos
;initialization.c,52 :: 		ebb_target_pos = ebb_current_pos;                                               //Set target as reached
0x12E2	0x884170  	MOV	W0, _ebb_target_pos
;initialization.c,53 :: 		motor_current_position = EEPROM_Read(ADDR_LAST_NUMBER_QUARTER_TURNS);           //Get the old quester turns number
0x12E4	0x2FDB0A  	MOV	#64944, W10
0x12E6	0x2007FB  	MOV	#127, W11
0x12E8	0x07FD5D  	RCALL	_EEPROM_Read
0x12EA	0x884180  	MOV	W0, _motor_current_position
;initialization.c,54 :: 		motor_target_position = motor_current_position;                                 //Set target as reached
0x12EC	0x884190  	MOV	W0, _motor_target_position
;initialization.c,55 :: 		ebb_settings = 0;
0x12EE	0xEF2000  	CLR	W0
0x12F0	0x884110  	MOV	W0, _ebb_settings
;initialization.c,56 :: 		brake_pressure_front = 0;
0x12F2	0xEF2000  	CLR	W0
0x12F4	0x8840B0  	MOV	W0, _brake_pressure_front
;initialization.c,57 :: 		current_reading_motor = 0;
0x12F6	0xEF2000  	CLR	W0
0x12F8	0x8840C0  	MOV	W0, _current_reading_motor
;initialization.c,58 :: 		is_requested_calibration = 0;
0x12FA	0x208141  	MOV	#lo_addr(_is_requested_calibration), W1
0x12FC	0xEF2000  	CLR	W0
0x12FE	0x784880  	MOV.B	W0, [W1]
;initialization.c,59 :: 		is_requested_movement = 0;
0x1300	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x1302	0xEF2000  	CLR	W0
0x1304	0x784880  	MOV.B	W0, [W1]
;initialization.c,61 :: 		CAN_Init();                                     //initialize CAN module
0x1306	0x07FE05  	RCALL	_Can_init
;initialization.c,63 :: 		CAN_routine();                                   //Send first CAN Packet
0x1308	0x07FDB3  	RCALL	_CAN_routine
;initialization.c,65 :: 		UART1_Init(9600);
0x130A	0x22580A  	MOV	#9600, W10
0x130C	0x20000B  	MOV	#0, W11
0x130E	0x07FDBF  	RCALL	_UART1_Init
;initialization.c,67 :: 		ebb_current_state = EBB_OFF;
0x1310	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1312	0xEF2000  	CLR	W0
0x1314	0x784880  	MOV.B	W0, [W1]
;initialization.c,70 :: 		setTimer(TIMER4_DEVICE,0.003);                                        //Interrupt every 200uS
0x1316	0x29BA6B  	MOV	#39846, W11
0x1318	0x23B44C  	MOV	#15172, W12
0x131A	0xB3C03A  	MOV.B	#3, W10
0x131C	0x07FD4C  	RCALL	_setTimer
;initialization.c,73 :: 		buzzer_state = ON;
0x131E	0x200010  	MOV	#1, W0
0x1320	0x884070  	MOV	W0, _buzzer_state
;initialization.c,74 :: 		LED_B = ON;
0x1322	0xA822D6  	BSET	LATD1_bit, BitPos(LATD1_bit+0)
;initialization.c,75 :: 		LED_G = ON;
0x1324	0xA862D6  	BSET	LATD3_bit, BitPos(LATD3_bit+0)
;initialization.c,76 :: 		delay_ms(1000);
0x1326	0x200668  	MOV	#102, W8
0x1328	0x2B9CB7  	MOV	#47563, W7
L_EBB_Init156:
0x132A	0xED200E  	DEC	W7
0x132C	0x3AFFFE  	BRA NZ	L_EBB_Init156
0x132E	0xED2010  	DEC	W8
0x1330	0x3AFFFC  	BRA NZ	L_EBB_Init156
0x1332	0x000000  	NOP
;initialization.c,77 :: 		buzzer_state = OFF;
0x1334	0xEF2000  	CLR	W0
0x1336	0x884070  	MOV	W0, _buzzer_state
;initialization.c,78 :: 		LED_B = OFF;
0x1338	0xA922D6  	BCLR	LATD1_bit, BitPos(LATD1_bit+0)
;initialization.c,79 :: 		LED_G = OFF;
0x133A	0xA962D6  	BCLR	LATD3_bit, BitPos(LATD3_bit+0)
;initialization.c,81 :: 		setTimer(TIMER1_DEVICE,0.01);                                         //Interrupt every 1mS
0x133C	0x2D70AB  	MOV	#55050, W11
0x133E	0x23C23C  	MOV	#15395, W12
0x1340	0xB3C01A  	MOV.B	#1, W10
0x1342	0x07FD39  	RCALL	_setTimer
;initialization.c,82 :: 		setTimer(TIMER2_DEVICE,0.001 * CONTROL_ROUTINE_REFRESH);              //Interrupt every CONTROL_ROUTINE_REFRESH mS
0x1344	0x2D70BB  	MOV	#55051, W11
0x1346	0x23C23C  	MOV	#15395, W12
0x1348	0xB3C02A  	MOV.B	#2, W10
0x134A	0x07FD35  	RCALL	_setTimer
;initialization.c,83 :: 		}
L_end_EBB_Init:
0x134C	0x78064F  	POP	W12
0x134E	0x7805CF  	POP	W11
0x1350	0x78054F  	POP	W10
0x1352	0x060000  	RETURN
; end of _EBB_Init
_EEPROM_Read:
0x0DA4	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,233 :: 		
;__Lib_EEPROM_p30.c,235 :: 		
0x0DA6	0x200140  	MOV	#lo_addr(W10), W0
0x0DA8	0xECA000  	INC2	W0
0x0DAA	0x780010  	MOV	[W0], W0
0x0DAC	0xB7A032  	MOV	WREG, TBLPAG
;__Lib_EEPROM_p30.c,236 :: 		
0x0DAE	0x78048A  	MOV	W10, W9
;__Lib_EEPROM_p30.c,238 :: 		
0x0DB0	0xBA0019  	TBLRDL	[W9], W0
;__Lib_EEPROM_p30.c,239 :: 		
;__Lib_EEPROM_p30.c,240 :: 		
L_end_EEPROM_Read:
0x0DB2	0xFA8000  	ULNK
0x0DB4	0x060000  	RETURN
; end of _EEPROM_Read
_EEPROM_Write:
0x0F7C	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,147 :: 		
;__Lib_EEPROM_p30.c,150 :: 		
0x0F7E	0x07FD72  	RCALL	_EEPROM_Erase
;__Lib_EEPROM_p30.c,154 :: 		
L_EEPROM_Write0:
0x0F80	0xAEE761  	BTSS	NVMCON, #15
0x0F82	0x370001  	BRA	L_EEPROM_Write1
;__Lib_EEPROM_p30.c,155 :: 		
0x0F84	0x37FFFD  	BRA	L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_p30.c,158 :: 		
0x0F86	0x200140  	MOV	#lo_addr(W10), W0
0x0F88	0x780490  	MOV	[W0], W9
;__Lib_EEPROM_p30.c,159 :: 		
0x0F8A	0xECA000  	INC2	W0
0x0F8C	0x780010  	MOV	[W0], W0
0x0F8E	0xB7A032  	MOV	WREG, TBLPAG
;__Lib_EEPROM_p30.c,160 :: 		
0x0F90	0x78040C  	MOV	W12, W8
;__Lib_EEPROM_p30.c,162 :: 		
0x0F92	0xBB0C88  	TBLWTL	W8, [W9]
;__Lib_EEPROM_p30.c,163 :: 		
0x0F94	0x240040  	MOV	#16388, W0
0x0F96	0xB7A760  	MOV	WREG, NVMCON
;__Lib_EEPROM_p30.c,166 :: 		
0x0F98	0x07FA71  	RCALL	__Lib_EEPROM_p30_KeySequence
;__Lib_EEPROM_p30.c,170 :: 		
0x0F9A	0xA9C761  	BCLR	NVMCON, #14
;__Lib_EEPROM_p30.c,171 :: 		
L_end_EEPROM_Write:
0x0F9C	0xFA8000  	ULNK
0x0F9E	0x060000  	RETURN
; end of _EEPROM_Write
_EEPROM_Erase:
0x0A64	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,99 :: 		
;__Lib_EEPROM_p30.c,101 :: 		
0x0A66	0x781F8C  	PUSH	W12
0x0A68	0x24044C  	MOV	#16452, W12
0x0A6A	0x07FE9D  	RCALL	__Lib_EEPROM_p30_EraseGlobal
;__Lib_EEPROM_p30.c,102 :: 		
L_end_EEPROM_Erase:
0x0A6C	0x78064F  	POP	W12
0x0A6E	0xFA8000  	ULNK
0x0A70	0x060000  	RETURN
; end of _EEPROM_Erase
__Lib_EEPROM_p30_EraseGlobal:
0x07A6	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,69 :: 		
;__Lib_EEPROM_p30.c,70 :: 		
0x07A8	0x200140  	MOV	#lo_addr(W10), W0
0x07AA	0x883B1A  	MOV	W10, NVMADR
;__Lib_EEPROM_p30.c,71 :: 		
0x07AC	0xECA000  	INC2	W0
0x07AE	0x780010  	MOV	[W0], W0
0x07B0	0xB7A764  	MOV	WREG, NVMADRU
;__Lib_EEPROM_p30.c,73 :: 		
0x07B2	0x883B0C  	MOV	W12, NVMCON
;__Lib_EEPROM_p30.c,75 :: 		
0x07B4	0x07FE63  	RCALL	__Lib_EEPROM_p30_KeySequence
;__Lib_EEPROM_p30.c,76 :: 		
L_end_EraseGlobal:
0x07B6	0xFA8000  	ULNK
0x07B8	0x060000  	RETURN
; end of __Lib_EEPROM_p30_EraseGlobal
__Lib_EEPROM_p30_KeySequence:
0x047C	0xFA0000  	LNK	#0
;__Lib_EEPROM_p30.c,33 :: 		
;__Lib_EEPROM_p30.c,35 :: 		
0x047E	0xFC0005  	DISI	#5
;__Lib_EEPROM_p30.c,36 :: 		
0x0480	0x200559  	MOV	#85, W9
;__Lib_EEPROM_p30.c,37 :: 		
0x0482	0x883B39  	MOV	W9, NVMKEY
;__Lib_EEPROM_p30.c,38 :: 		
0x0484	0x200AA9  	MOV	#170, W9
;__Lib_EEPROM_p30.c,39 :: 		
0x0486	0x883B39  	MOV	W9, NVMKEY
;__Lib_EEPROM_p30.c,40 :: 		
0x0488	0xA8E761  	BSET	NVMCON, #15
;__Lib_EEPROM_p30.c,41 :: 		
0x048A	0x000000  	NOP
;__Lib_EEPROM_p30.c,42 :: 		
0x048C	0x000000  	NOP
;__Lib_EEPROM_p30.c,44 :: 		
L_end_KeySequence:
0x048E	0xFA8000  	ULNK
0x0490	0x060000  	RETURN
; end of __Lib_EEPROM_p30_KeySequence
_Can_init:
;can.c,25 :: 		void Can_init() {
;can.c,26 :: 		unsigned int Can_Init_flags = 0;
0x0F12	0x781F8A  	PUSH	W10
0x0F14	0x781F8B  	PUSH	W11
0x0F16	0x781F8C  	PUSH	W12
0x0F18	0x781F8D  	PUSH	W13
;can.c,33 :: 		CAN1Initialize(2,4,3,4,2,Can_Init_flags);          // SJW,BRP,PHSEG1,PHSEG2,PROPSEG
0x0F1A	0x20004D  	MOV	#4, W13
0x0F1C	0x20003C  	MOV	#3, W12
0x0F1E	0x20004B  	MOV	#4, W11
0x0F20	0x20002A  	MOV	#2, W10
0x0F22	0x200FB0  	MOV	#251, W0
0x0F24	0x781F80  	PUSH	W0
0x0F26	0x200020  	MOV	#2, W0
0x0F28	0x781F80  	PUSH	W0
0x0F2A	0x07FDA3  	RCALL	_CAN1Initialize
0x0F2C	0xB1004F  	SUB	#4, W15
;can.c,34 :: 		CAN1SetOperationMode(_CAN_MODE_CONFIG,0xFF);
0x0F2E	0x200FFB  	MOV	#255, W11
0x0F30	0x20004A  	MOV	#4, W10
0x0F32	0x07FC43  	RCALL	_CAN1SetOperationMode
;can.c,36 :: 		CAN1SetMask(_CAN_MASK_B1, EBB_MASK_SW_DAUFR, _CAN_CONFIG_MATCH_MSG_TYPE & _CAN_CONFIG_STD_MSG);
0x0F34	0x200FFD  	MOV	#255, W13
0x0F36	0x207FFB  	MOV	#2047, W11
0x0F38	0x20000C  	MOV	#0, W12
0x0F3A	0xEF2014  	CLR	W10
0x0F3C	0x07FAAE  	RCALL	_CAN1SetMask
;can.c,37 :: 		CAN1SetFilter(_CAN_FILTER_B1_F1, EBB_FILTER_SW, _CAN_CONFIG_STD_MSG);        //steering wheel commands
0x0F3E	0x200FFD  	MOV	#255, W13
0x0F40	0x20400B  	MOV	#1024, W11
0x0F42	0x20000C  	MOV	#0, W12
0x0F44	0xEF2014  	CLR	W10
0x0F46	0x07FB0A  	RCALL	_CAN1SetFilter
;can.c,38 :: 		CAN1SetFilter(_CAN_FILTER_B1_F2, EBB_FILTER_DAUFR, _CAN_CONFIG_STD_MSG);              //brake pressure
0x0F48	0x200FFD  	MOV	#255, W13
0x0F4A	0x20650B  	MOV	#1616, W11
0x0F4C	0x20000C  	MOV	#0, W12
0x0F4E	0x20001A  	MOV	#1, W10
0x0F50	0x07FB05  	RCALL	_CAN1SetFilter
;can.c,40 :: 		CAN1SetMask(_CAN_MASK_B2, ALL_MASK_AUX, _CAN_CONFIG_MATCH_MSG_TYPE & _CAN_CONFIG_STD_MSG);
0x0F52	0x200FFD  	MOV	#255, W13
0x0F54	0x207F0B  	MOV	#2032, W11
0x0F56	0x20000C  	MOV	#0, W12
0x0F58	0x20001A  	MOV	#1, W10
0x0F5A	0x07FA9F  	RCALL	_CAN1SetMask
;can.c,41 :: 		CAN1SetFilter(_CAN_FILTER_B2_F1, ALL_FILTER_AUX, _CAN_CONFIG_STD_MSG);     //auxiliary
0x0F5C	0x200FFD  	MOV	#255, W13
0x0F5E	0x207F0B  	MOV	#2032, W11
0x0F60	0x20000C  	MOV	#0, W12
0x0F62	0x20002A  	MOV	#2, W10
0x0F64	0x07FAFB  	RCALL	_CAN1SetFilter
;can.c,43 :: 		CAN1SetOperationMode(_CAN_MODE_NORMAL,0xFF);
0x0F66	0x200FFB  	MOV	#255, W11
0x0F68	0xEF2014  	CLR	W10
0x0F6A	0x07FC27  	RCALL	_CAN1SetOperationMode
;can.c,45 :: 		Can_initInterrupt();
0x0F6C	0x07FDF2  	RCALL	_Can_initInterrupt
;can.c,46 :: 		Can_setWritePriority(CAN_PRIORITY_MEDIUM);
0x0F6E	0x200FDA  	MOV	#253, W10
0x0F70	0x07FD77  	RCALL	_Can_setWritePriority
;can.c,47 :: 		}
L_end_Can_init:
0x0F72	0x7806CF  	POP	W13
0x0F74	0x78064F  	POP	W12
0x0F76	0x7805CF  	POP	W11
0x0F78	0x78054F  	POP	W10
0x0F7A	0x060000  	RETURN
; end of _Can_init
_CAN1Initialize:
0x0A72	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,822 :: 		
0x0A74	0x781F8A  	PUSH	W10
0x0A76	0x781F8B  	PUSH	W11
0x0A78	0x781F8C  	PUSH	W12
0x0A7A	0x781F8D  	PUSH	W13
; PROPSEG start address is: 4 (W2)
0x0A7C	0x97B94E  	MOV	[W14-8], W2
; CAN_CONFIG_FLAGS start address is: 12 (W6)
0x0A7E	0x97BB3E  	MOV	[W14-10], W6
;__Lib_CAN_1.c,828 :: 		
0x0A80	0xA96391  	BCLR	C1CTRLbits, #11
;__Lib_CAN_1.c,829 :: 		
0x0A82	0xA98391  	BCLR	C1CTRLbits, #12
;__Lib_CAN_1.c,830 :: 		
0x0A84	0xA9A391  	BCLR	C1CTRLbits, #13
;__Lib_CAN_1.c,831 :: 		
0x0A86	0xA9E391  	BCLR	C1CTRLbits, #15
;__Lib_CAN_1.c,836 :: 		
0x0A88	0xBE9F8A  	PUSH.D	W10
0x0A8A	0x200FFB  	MOV	#255, W11
0x0A8C	0x20004A  	MOV	#4, W10
0x0A8E	0x07FE95  	RCALL	_CAN1SetOperationMode
0x0A90	0xBE054F  	POP.D	W10
;__Lib_CAN_1.c,842 :: 		
;__Lib_CAN_1.c,841 :: 		
;__Lib_CAN_1.c,840 :: 		
;__Lib_CAN_1.c,839 :: 		
;__Lib_CAN_1.c,844 :: 		
0x0A92	0x781F86  	PUSH	W6
;__Lib_CAN_1.c,843 :: 		
0x0A94	0x781F82  	PUSH	W2
; PROPSEG end address is: 4 (W2)
;__Lib_CAN_1.c,844 :: 		
0x0A96	0x07FD15  	RCALL	_CAN1SetBaudRate
0x0A98	0xB1004F  	SUB	#4, W15
;__Lib_CAN_1.c,846 :: 		
0x0A9A	0x630070  	AND	W6, #16, W0
;__Lib_CAN_1.c,847 :: 		
0x0A9C	0xE10070  	CP	W0, #16
0x0A9E	0x3A0001  	BRA NZ	L_CAN1Initialize59
L__CAN1Initialize89:
;__Lib_CAN_1.c,848 :: 		
0x0AA0	0xA8438E  	BSET.B	C1RX0CONbits, #2
L_CAN1Initialize59:
;__Lib_CAN_1.c,851 :: 		
0x0AA2	0xAEA00C  	BTSS	W6, #5
0x0AA4	0x370021  	BRA	L_CAN1Initialize60
;__Lib_CAN_1.c,852 :: 		
0x0AA6	0xAE600C  	BTSS	W6, #3
0x0AA8	0x370010  	BRA	L_CAN1Initialize61
; CAN_CONFIG_FLAGS end address is: 12 (W6)
;__Lib_CAN_1.c,853 :: 		
0x0AAA	0x200FFD  	MOV	#255, W13
0x0AAC	0xEF2016  	CLR	W11
0x0AAE	0xEF2018  	CLR	W12
0x0AB0	0xEF2014  	CLR	W10
0x0AB2	0x07FCF3  	RCALL	_CAN1SetMask
;__Lib_CAN_1.c,854 :: 		
0x0AB4	0x200FFD  	MOV	#255, W13
0x0AB6	0xEF2016  	CLR	W11
0x0AB8	0xEF2018  	CLR	W12
0x0ABA	0x20001A  	MOV	#1, W10
0x0ABC	0x07FCEE  	RCALL	_CAN1SetMask
;__Lib_CAN_1.c,855 :: 		
; FilterConfig1 start address is: 0 (W0)
0x0ABE	0x200FF0  	MOV	#255, W0
;__Lib_CAN_1.c,856 :: 		
; FilterConfig2 start address is: 2 (W1)
0x0AC0	0x200FF1  	MOV	#255, W1
;__Lib_CAN_1.c,857 :: 		
0x0AC2	0x781F81  	PUSH	W1
; FilterConfig1 end address is: 0 (W0)
; FilterConfig2 end address is: 2 (W1)
0x0AC4	0x780080  	MOV	W0, W1
0x0AC6	0x78004F  	POP	W0
0x0AC8	0x37000C  	BRA	L_CAN1Initialize62
L_CAN1Initialize61:
;__Lib_CAN_1.c,859 :: 		
0x0ACA	0x200F7D  	MOV	#247, W13
0x0ACC	0xEF2016  	CLR	W11
0x0ACE	0xEF2018  	CLR	W12
0x0AD0	0xEF2014  	CLR	W10
0x0AD2	0x07FCE3  	RCALL	_CAN1SetMask
;__Lib_CAN_1.c,860 :: 		
0x0AD4	0x200F7D  	MOV	#247, W13
0x0AD6	0xEF2016  	CLR	W11
0x0AD8	0xEF2018  	CLR	W12
0x0ADA	0x20001A  	MOV	#1, W10
0x0ADC	0x07FCDE  	RCALL	_CAN1SetMask
;__Lib_CAN_1.c,861 :: 		
; FilterConfig1 start address is: 2 (W1)
0x0ADE	0x200F71  	MOV	#247, W1
;__Lib_CAN_1.c,862 :: 		
; FilterConfig2 start address is: 0 (W0)
0x0AE0	0x200F70  	MOV	#247, W0
; FilterConfig1 end address is: 2 (W1)
; FilterConfig2 end address is: 0 (W0)
;__Lib_CAN_1.c,863 :: 		
L_CAN1Initialize62:
;__Lib_CAN_1.c,864 :: 		
; FilterConfig2 start address is: 0 (W0)
; FilterConfig1 start address is: 2 (W1)
0x0AE2	0x780281  	MOV	W1, W5
; FilterConfig1 end address is: 2 (W1)
; FilterConfig2 end address is: 0 (W0)
0x0AE4	0x780200  	MOV	W0, W4
0x0AE6	0x37000E  	BRA	L_CAN1Initialize63
L_CAN1Initialize60:
;__Lib_CAN_1.c,866 :: 		
0x0AE8	0x200DFD  	MOV	#223, W13
0x0AEA	0xEF2016  	CLR	W11
0x0AEC	0xEF2018  	CLR	W12
0x0AEE	0xEF2014  	CLR	W10
0x0AF0	0x07FCD4  	RCALL	_CAN1SetMask
;__Lib_CAN_1.c,867 :: 		
0x0AF2	0x200DFD  	MOV	#223, W13
0x0AF4	0xEF2016  	CLR	W11
0x0AF6	0xEF2018  	CLR	W12
0x0AF8	0x20001A  	MOV	#1, W10
0x0AFA	0x07FCCF  	RCALL	_CAN1SetMask
;__Lib_CAN_1.c,868 :: 		
; FilterConfig1 start address is: 2 (W1)
0x0AFC	0x200FF1  	MOV	#255, W1
;__Lib_CAN_1.c,869 :: 		
; FilterConfig2 start address is: 0 (W0)
0x0AFE	0x200F70  	MOV	#247, W0
; FilterConfig1 end address is: 2 (W1)
; FilterConfig2 end address is: 0 (W0)
0x0B00	0x780281  	MOV	W1, W5
0x0B02	0x780200  	MOV	W0, W4
;__Lib_CAN_1.c,870 :: 		
L_CAN1Initialize63:
;__Lib_CAN_1.c,875 :: 		
; FilterConfig2 start address is: 8 (W4)
; FilterConfig1 start address is: 10 (W5)
0x0B04	0x780685  	MOV	W5, W13
0x0B06	0xEF2016  	CLR	W11
0x0B08	0xEF2018  	CLR	W12
0x0B0A	0xEF2014  	CLR	W10
0x0B0C	0x07FD27  	RCALL	_CAN1SetFilter
;__Lib_CAN_1.c,876 :: 		
0x0B0E	0x780685  	MOV	W5, W13
; FilterConfig1 end address is: 10 (W5)
0x0B10	0xEF2016  	CLR	W11
0x0B12	0xEF2018  	CLR	W12
0x0B14	0x20001A  	MOV	#1, W10
0x0B16	0x07FD22  	RCALL	_CAN1SetFilter
;__Lib_CAN_1.c,877 :: 		
0x0B18	0x780684  	MOV	W4, W13
0x0B1A	0xEF2016  	CLR	W11
0x0B1C	0xEF2018  	CLR	W12
0x0B1E	0x20002A  	MOV	#2, W10
0x0B20	0x07FD1D  	RCALL	_CAN1SetFilter
;__Lib_CAN_1.c,878 :: 		
0x0B22	0x780684  	MOV	W4, W13
0x0B24	0xEF2016  	CLR	W11
0x0B26	0xEF2018  	CLR	W12
0x0B28	0x20003A  	MOV	#3, W10
0x0B2A	0x07FD18  	RCALL	_CAN1SetFilter
;__Lib_CAN_1.c,879 :: 		
0x0B2C	0x780684  	MOV	W4, W13
0x0B2E	0xEF2016  	CLR	W11
0x0B30	0xEF2018  	CLR	W12
0x0B32	0x20004A  	MOV	#4, W10
0x0B34	0x07FD13  	RCALL	_CAN1SetFilter
;__Lib_CAN_1.c,880 :: 		
0x0B36	0x780684  	MOV	W4, W13
; FilterConfig2 end address is: 8 (W4)
0x0B38	0xEF2016  	CLR	W11
0x0B3A	0xEF2018  	CLR	W12
0x0B3C	0x20005A  	MOV	#5, W10
0x0B3E	0x07FD0E  	RCALL	_CAN1SetFilter
;__Lib_CAN_1.c,883 :: 		
0x0B40	0x200FFB  	MOV	#255, W11
0x0B42	0xEF2014  	CLR	W10
0x0B44	0x07FE3A  	RCALL	_CAN1SetOperationMode
;__Lib_CAN_1.c,884 :: 		
L_end_CAN1Initialize:
0x0B46	0x7806CF  	POP	W13
0x0B48	0x78064F  	POP	W12
0x0B4A	0x7805CF  	POP	W11
0x0B4C	0x78054F  	POP	W10
0x0B4E	0xFA8000  	ULNK
0x0B50	0x060000  	RETURN
; end of _CAN1Initialize
_CAN1SetOperationMode:
0x07BA	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,333 :: 		
;__Lib_CAN_1.c,334 :: 		
0x07BC	0xE20016  	CP0	W11
0x07BE	0x320017  	BRA Z	L_CAN1SetOperationMode13
L__CAN1SetOperationMode69:
;__Lib_CAN_1.c,336 :: 		
0x07C0	0x78008A  	MOV	W10, W1
0x07C2	0xB3C080  	MOV.B	#8, W0
0x07C4	0xFB0000  	SE	W0, W0
0x07C6	0xDD0880  	SL	W1, W0, W1
0x07C8	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x07CA	0x688090  	XOR	W1, [W0], W1
0x07CC	0x207000  	MOV	#1792, W0
0x07CE	0x608080  	AND	W1, W0, W1
0x07D0	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x07D2	0x688090  	XOR	W1, [W0], W1
0x07D4	0x881C81  	MOV	W1, C1CTRLbits
;__Lib_CAN_1.c,338 :: 		
L_CAN1SetOperationMode14:
0x07D6	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x07D8	0x784010  	MOV.B	[W0], W0
0x07DA	0x784080  	MOV.B	W0, W1
0x07DC	0xB3CE00  	MOV.B	#224, W0
0x07DE	0x60C080  	AND.B	W1, W0, W1
0x07E0	0xFB8001  	ZE	W1, W0
0x07E2	0xDE00C5  	LSR	W0, #5, W1
0x07E4	0xFB8001  	ZE	W1, W0
0x07E6	0xE1000A  	CP	W0, W10
0x07E8	0x320001  	BRA Z	L_CAN1SetOperationMode15
L__CAN1SetOperationMode70:
0x07EA	0x37FFF5  	BRA	L_CAN1SetOperationMode14
L_CAN1SetOperationMode15:
;__Lib_CAN_1.c,339 :: 		
0x07EC	0x37000B  	BRA	L_CAN1SetOperationMode16
L_CAN1SetOperationMode13:
;__Lib_CAN_1.c,342 :: 		
0x07EE	0x78008A  	MOV	W10, W1
0x07F0	0xB3C080  	MOV.B	#8, W0
0x07F2	0xFB0000  	SE	W0, W0
0x07F4	0xDD0880  	SL	W1, W0, W1
0x07F6	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x07F8	0x688090  	XOR	W1, [W0], W1
0x07FA	0x207000  	MOV	#1792, W0
0x07FC	0x608080  	AND	W1, W0, W1
0x07FE	0x203900  	MOV	#lo_addr(C1CTRLbits), W0
0x0800	0x688090  	XOR	W1, [W0], W1
0x0802	0x881C81  	MOV	W1, C1CTRLbits
;__Lib_CAN_1.c,344 :: 		
L_CAN1SetOperationMode16:
;__Lib_CAN_1.c,345 :: 		
L_end_CAN1SetOperationMode:
0x0804	0xFA8000  	ULNK
0x0806	0x060000  	RETURN
; end of _CAN1SetOperationMode
_CAN1SetBaudRate:
0x04C2	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,425 :: 		
; PROPSEG start address is: 2 (W1)
0x04C4	0x97B8CE  	MOV	[W14-8], W1
; CAN_CONFIG_FLAGS start address is: 8 (W4)
0x04C6	0x97BA3E  	MOV	[W14-10], W4
;__Lib_CAN_1.c,428 :: 		
0x04C8	0x550061  	SUB	W10, #1, W0
0x04CA	0x780500  	MOV	W0, W10
;__Lib_CAN_1.c,429 :: 		
0x04CC	0x558061  	SUB	W11, #1, W0
0x04CE	0x780580  	MOV	W0, W11
;__Lib_CAN_1.c,430 :: 		
0x04D0	0x560061  	SUB	W12, #1, W0
0x04D2	0x780600  	MOV	W0, W12
;__Lib_CAN_1.c,431 :: 		
0x04D4	0x568061  	SUB	W13, #1, W0
0x04D6	0x780680  	MOV	W0, W13
;__Lib_CAN_1.c,432 :: 		
; PROPSEG start address is: 10 (W5)
0x04D8	0x5082E1  	SUB	W1, #1, W5
; PROPSEG end address is: 2 (W1)
;__Lib_CAN_1.c,434 :: 		
0x04DA	0x78418A  	MOV.B	W10, W3
0x04DC	0xB3C060  	MOV.B	#6, W0
0x04DE	0xFB8083  	ZE	W3, W1
0x04E0	0xFB0100  	SE	W0, W2
0x04E2	0xDD0982  	SL	W1, W2, W3
0x04E4	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x04E6	0x69C190  	XOR.B	W3, [W0], W3
0x04E8	0xB3CC00  	MOV.B	#192, W0
0x04EA	0x61C180  	AND.B	W3, W0, W3
0x04EC	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x04EE	0x69C190  	XOR.B	W3, [W0], W3
0x04F0	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x04F2	0x784803  	MOV.B	W3, [W0]
;__Lib_CAN_1.c,435 :: 		
0x04F4	0x78408B  	MOV.B	W11, W1
0x04F6	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x04F8	0x68C090  	XOR.B	W1, [W0], W1
0x04FA	0xB3C3F0  	MOV.B	#63, W0
0x04FC	0x60C080  	AND.B	W1, W0, W1
0x04FE	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x0500	0x68C090  	XOR.B	W1, [W0], W1
0x0502	0x203920  	MOV	#lo_addr(C1CFG1bits), W0
0x0504	0x784801  	MOV.B	W1, [W0]
;__Lib_CAN_1.c,436 :: 		
0x0506	0x784085  	MOV.B	W5, W1
; PROPSEG end address is: 10 (W5)
0x0508	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x050A	0x68C090  	XOR.B	W1, [W0], W1
0x050C	0x60C0E7  	AND.B	W1, #7, W1
0x050E	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0510	0x68C090  	XOR.B	W1, [W0], W1
0x0512	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0514	0x784801  	MOV.B	W1, [W0]
;__Lib_CAN_1.c,437 :: 		
0x0516	0x78418C  	MOV.B	W12, W3
0x0518	0xB3C030  	MOV.B	#3, W0
0x051A	0xFB8083  	ZE	W3, W1
0x051C	0xFB0100  	SE	W0, W2
0x051E	0xDD0982  	SL	W1, W2, W3
0x0520	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0522	0x69C190  	XOR.B	W3, [W0], W3
0x0524	0xB3C380  	MOV.B	#56, W0
0x0526	0x61C180  	AND.B	W3, W0, W3
0x0528	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x052A	0x69C190  	XOR.B	W3, [W0], W3
0x052C	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x052E	0x784803  	MOV.B	W3, [W0]
;__Lib_CAN_1.c,438 :: 		
0x0530	0x78008D  	MOV	W13, W1
0x0532	0xB3C080  	MOV.B	#8, W0
0x0534	0xFB0000  	SE	W0, W0
0x0536	0xDD0880  	SL	W1, W0, W1
0x0538	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x053A	0x688090  	XOR	W1, [W0], W1
0x053C	0x207000  	MOV	#1792, W0
0x053E	0x608080  	AND	W1, W0, W1
0x0540	0x203940  	MOV	#lo_addr(C1CFG2bits), W0
0x0542	0x688090  	XOR	W1, [W0], W1
0x0544	0x881CA1  	MOV	W1, C1CFG2bits
;__Lib_CAN_1.c,440 :: 		
0x0546	0xAF4008  	BTSC	W4, #2
0x0548	0x370001  	BRA	L_CAN1SetBaudRate17
;__Lib_CAN_1.c,441 :: 		
0x054A	0xA8C394  	BSET	C1CFG2bits, #6
L_CAN1SetBaudRate17:
;__Lib_CAN_1.c,443 :: 		
0x054C	0xAE0008  	BTSS	W4, #0
0x054E	0x370001  	BRA	L_CAN1SetBaudRate18
;__Lib_CAN_1.c,444 :: 		
0x0550	0xA8E394  	BSET	C1CFG2bits, #7
L_CAN1SetBaudRate18:
;__Lib_CAN_1.c,446 :: 		
0x0552	0xAE2008  	BTSS	W4, #1
0x0554	0x370001  	BRA	L_CAN1SetBaudRate19
; CAN_CONFIG_FLAGS end address is: 8 (W4)
;__Lib_CAN_1.c,447 :: 		
0x0556	0xA8C395  	BSET	C1CFG2bits, #14
L_CAN1SetBaudRate19:
;__Lib_CAN_1.c,448 :: 		
L_end_CAN1SetBaudRate:
0x0558	0xFA8000  	ULNK
0x055A	0x060000  	RETURN
; end of _CAN1SetBaudRate
_CAN1SetMask:
0x049A	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,469 :: 		
;__Lib_CAN_1.c,471 :: 		
0x049C	0x781F8A  	PUSH	W10
0x049E	0x781F8D  	PUSH	W13
0x04A0	0xE15060  	CP	W10, #0
0x04A2	0x3A0006  	BRA NZ	L_CAN1SetMask20
L__CAN1SetMask74:
;__Lib_CAN_1.c,472 :: 		
0x04A4	0x781F8D  	PUSH	W13
0x04A6	0x20330A  	MOV	#lo_addr(C1RXM0SID), W10
0x04A8	0xEF201A  	CLR	W13
0x04AA	0x07FE2A  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x04AC	0xB1002F  	SUB	#2, W15
0x04AE	0x370005  	BRA	L_CAN1SetMask21
L_CAN1SetMask20:
;__Lib_CAN_1.c,475 :: 		
0x04B0	0x781F8D  	PUSH	W13
0x04B2	0x20338A  	MOV	#lo_addr(C1RXM1SID), W10
0x04B4	0xEF201A  	CLR	W13
0x04B6	0x07FE24  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x04B8	0xB1002F  	SUB	#2, W15
L_CAN1SetMask21:
;__Lib_CAN_1.c,476 :: 		
L_end_CAN1SetMask:
0x04BA	0x7806CF  	POP	W13
0x04BC	0x78054F  	POP	W10
0x04BE	0xFA8000  	ULNK
0x04C0	0x060000  	RETURN
; end of _CAN1SetMask
__Lib_CAN_1_CAN1IDToRegs:
0x0100	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,246 :: 		
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x0102	0x97B8CE  	MOV	[W14-8], W1
;__Lib_CAN_1.c,247 :: 		
0x0104	0x37008B  	BRA	L___Lib_CAN_1_CAN1IDToRegs0
;__Lib_CAN_1.c,248 :: 		
L___Lib_CAN_1_CAN1IDToRegs2:
;__Lib_CAN_1.c,249 :: 		
0x0106	0xAE6002  	BTSS	W1, #3
0x0108	0x370003  	BRA	L___Lib_CAN_1_CAN1IDToRegs3
; CAN_CONFIG_FLAGS end address is: 2 (W1)
;__Lib_CAN_1.c,251 :: 		
0x010A	0xDD5842  	SL	W11, #2, W0
0x010C	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,253 :: 		
0x010E	0x370019  	BRA	L___Lib_CAN_1_CAN1IDToRegs4
L___Lib_CAN_1_CAN1IDToRegs3:
;__Lib_CAN_1.c,255 :: 		
0x0110	0x200163  	MOV	#lo_addr(W11), W3
0x0112	0x418062  	ADD	W3, #2, W0
0x0114	0x780090  	MOV	[W0], W1
0x0116	0x21FFC0  	MOV	#8188, W0
0x0118	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_1.c,256 :: 		
0x011A	0x78001A  	MOV	[W10], W0
0x011C	0x700061  	IOR	W0, #1, W0
0x011E	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,257 :: 		
0x0120	0x450162  	ADD	W10, #2, W2
0x0122	0x780502  	MOV	W2, W10
;__Lib_CAN_1.c,258 :: 		
0x0124	0x418062  	ADD	W3, #2, W0
0x0126	0x780010  	MOV	[W0], W0
0x0128	0x600063  	AND	W0, #3, W0
0x012A	0xDD00CA  	SL	W0, #10, W1
0x012C	0xDE5846  	LSR	W11, #6, W0
0x012E	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_1.c,259 :: 		
0x0130	0x450162  	ADD	W10, #2, W2
0x0132	0x780502  	MOV	W2, W10
;__Lib_CAN_1.c,260 :: 		
0x0134	0x780092  	MOV	[W2], W1
0x0136	0x203FF0  	MOV	#1023, W0
0x0138	0x608900  	AND	W1, W0, [W2]
;__Lib_CAN_1.c,261 :: 		
0x013A	0x2003F0  	MOV	#63, W0
0x013C	0x658000  	AND	W11, W0, W0
0x013E	0xDD004A  	SL	W0, #10, W0
0x0140	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,262 :: 		
L___Lib_CAN_1_CAN1IDToRegs4:
;__Lib_CAN_1.c,263 :: 		
0x0142	0x370072  	BRA	L___Lib_CAN_1_CAN1IDToRegs1
;__Lib_CAN_1.c,265 :: 		
L___Lib_CAN_1_CAN1IDToRegs5:
;__Lib_CAN_1.c,266 :: 		
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x0144	0xAEA002  	BTSS	W1, #5
0x0146	0x37001F  	BRA	L___Lib_CAN_1_CAN1IDToRegs6
;__Lib_CAN_1.c,267 :: 		
0x0148	0xAE6002  	BTSS	W1, #3
0x014A	0x370006  	BRA	L___Lib_CAN_1_CAN1IDToRegs7
; CAN_CONFIG_FLAGS end address is: 2 (W1)
;__Lib_CAN_1.c,269 :: 		
0x014C	0xDD5842  	SL	W11, #2, W0
0x014E	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,270 :: 		
0x0150	0x78001A  	MOV	[W10], W0
0x0152	0x700061  	IOR	W0, #1, W0
0x0154	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,271 :: 		
0x0156	0x370016  	BRA	L___Lib_CAN_1_CAN1IDToRegs8
L___Lib_CAN_1_CAN1IDToRegs7:
;__Lib_CAN_1.c,273 :: 		
0x0158	0x200163  	MOV	#lo_addr(W11), W3
0x015A	0x418062  	ADD	W3, #2, W0
0x015C	0x780090  	MOV	[W0], W1
0x015E	0x21FFC0  	MOV	#8188, W0
0x0160	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_1.c,274 :: 		
0x0162	0x78001A  	MOV	[W10], W0
0x0164	0x700061  	IOR	W0, #1, W0
0x0166	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,275 :: 		
0x0168	0x450162  	ADD	W10, #2, W2
0x016A	0x780502  	MOV	W2, W10
;__Lib_CAN_1.c,276 :: 		
0x016C	0x418062  	ADD	W3, #2, W0
0x016E	0x780010  	MOV	[W0], W0
0x0170	0x600063  	AND	W0, #3, W0
0x0172	0xDD00CA  	SL	W0, #10, W1
0x0174	0xDE5846  	LSR	W11, #6, W0
0x0176	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_1.c,277 :: 		
0x0178	0x4500E2  	ADD	W10, #2, W1
0x017A	0x780501  	MOV	W1, W10
;__Lib_CAN_1.c,278 :: 		
0x017C	0x2003F0  	MOV	#63, W0
0x017E	0x658000  	AND	W11, W0, W0
0x0180	0xDD004A  	SL	W0, #10, W0
0x0182	0x780880  	MOV	W0, [W1]
;__Lib_CAN_1.c,279 :: 		
L___Lib_CAN_1_CAN1IDToRegs8:
;__Lib_CAN_1.c,280 :: 		
0x0184	0x370016  	BRA	L___Lib_CAN_1_CAN1IDToRegs9
L___Lib_CAN_1_CAN1IDToRegs6:
;__Lib_CAN_1.c,282 :: 		
0x0186	0x200163  	MOV	#lo_addr(W11), W3
0x0188	0x418062  	ADD	W3, #2, W0
0x018A	0x780090  	MOV	[W0], W1
0x018C	0x21FFC0  	MOV	#8188, W0
0x018E	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_1.c,283 :: 		
0x0190	0x78009A  	MOV	[W10], W1
0x0192	0x2FFFE0  	MOV	#65534, W0
0x0194	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_1.c,284 :: 		
0x0196	0x450162  	ADD	W10, #2, W2
0x0198	0x780502  	MOV	W2, W10
;__Lib_CAN_1.c,285 :: 		
0x019A	0x418062  	ADD	W3, #2, W0
0x019C	0x780010  	MOV	[W0], W0
0x019E	0x600063  	AND	W0, #3, W0
0x01A0	0xDD00CA  	SL	W0, #10, W1
0x01A2	0xDE5846  	LSR	W11, #6, W0
0x01A4	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_1.c,286 :: 		
0x01A6	0x4500E2  	ADD	W10, #2, W1
0x01A8	0x780501  	MOV	W1, W10
;__Lib_CAN_1.c,287 :: 		
0x01AA	0x2003F0  	MOV	#63, W0
0x01AC	0x658000  	AND	W11, W0, W0
0x01AE	0xDD004A  	SL	W0, #10, W0
0x01B0	0x780880  	MOV	W0, [W1]
;__Lib_CAN_1.c,288 :: 		
L___Lib_CAN_1_CAN1IDToRegs9:
;__Lib_CAN_1.c,289 :: 		
0x01B2	0x37003A  	BRA	L___Lib_CAN_1_CAN1IDToRegs1
;__Lib_CAN_1.c,291 :: 		
L___Lib_CAN_1_CAN1IDToRegs10:
;__Lib_CAN_1.c,292 :: 		
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x01B4	0xAE6002  	BTSS	W1, #3
0x01B6	0x37000C  	BRA	L___Lib_CAN_1_CAN1IDToRegs11
; CAN_CONFIG_FLAGS end address is: 2 (W1)
;__Lib_CAN_1.c,294 :: 		
0x01B8	0x2003F0  	MOV	#63, W0
0x01BA	0x658000  	AND	W11, W0, W0
0x01BC	0xDD0042  	SL	W0, #2, W0
0x01BE	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,295 :: 		
0x01C0	0x2FFC00  	MOV	#65472, W0
0x01C2	0x658000  	AND	W11, W0, W0
0x01C4	0xDD0045  	SL	W0, #5, W0
0x01C6	0x700D1A  	IOR	W0, [W10], [W10]
;__Lib_CAN_1.c,296 :: 		
0x01C8	0x78009A  	MOV	[W10], W1
0x01CA	0x2FFFE0  	MOV	#65534, W0
0x01CC	0x608D00  	AND	W1, W0, [W10]
;__Lib_CAN_1.c,297 :: 		
0x01CE	0x370025  	BRA	L___Lib_CAN_1_CAN1IDToRegs12
L___Lib_CAN_1_CAN1IDToRegs11:
;__Lib_CAN_1.c,299 :: 		
0x01D0	0x200163  	MOV	#lo_addr(W11), W3
0x01D2	0x418062  	ADD	W3, #2, W0
0x01D4	0x780090  	MOV	[W0], W1
0x01D6	0x21F000  	MOV	#7936, W0
0x01D8	0x608000  	AND	W1, W0, W0
0x01DA	0xDD0043  	SL	W0, #3, W0
0x01DC	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,300 :: 		
0x01DE	0x4180E2  	ADD	W3, #2, W1
0x01E0	0x200FC0  	MOV	#252, W0
0x01E2	0x600011  	AND	W0, [W1], W0
0x01E4	0x700D1A  	IOR	W0, [W10], [W10]
;__Lib_CAN_1.c,301 :: 		
0x01E6	0x78001A  	MOV	[W10], W0
0x01E8	0x700061  	IOR	W0, #1, W0
0x01EA	0x780D00  	MOV	W0, [W10]
;__Lib_CAN_1.c,302 :: 		
0x01EC	0x450162  	ADD	W10, #2, W2
0x01EE	0x780502  	MOV	W2, W10
;__Lib_CAN_1.c,303 :: 		
0x01F0	0x418062  	ADD	W3, #2, W0
0x01F2	0x780010  	MOV	[W0], W0
0x01F4	0x600063  	AND	W0, #3, W0
0x01F6	0xDD00CE  	SL	W0, #14, W1
0x01F8	0x2C0000  	MOV	#49152, W0
0x01FA	0x658000  	AND	W11, W0, W0
0x01FC	0xDE0042  	LSR	W0, #2, W0
0x01FE	0x708900  	IOR	W1, W0, [W2]
;__Lib_CAN_1.c,304 :: 		
0x0200	0x23FC00  	MOV	#16320, W0
0x0202	0x658000  	AND	W11, W0, W0
0x0204	0xDE0046  	LSR	W0, #6, W0
0x0206	0x700D1A  	IOR	W0, [W10], [W10]
;__Lib_CAN_1.c,305 :: 		
0x0208	0x4500E2  	ADD	W10, #2, W1
0x020A	0x780501  	MOV	W1, W10
;__Lib_CAN_1.c,306 :: 		
0x020C	0x2003F0  	MOV	#63, W0
0x020E	0x658000  	AND	W11, W0, W0
0x0210	0xDD004A  	SL	W0, #10, W0
0x0212	0x780880  	MOV	W0, [W1]
;__Lib_CAN_1.c,307 :: 		
0x0214	0x78009A  	MOV	[W10], W1
0x0216	0x201800  	MOV	#384, W0
0x0218	0x708D00  	IOR	W1, W0, [W10]
;__Lib_CAN_1.c,308 :: 		
L___Lib_CAN_1_CAN1IDToRegs12:
;__Lib_CAN_1.c,309 :: 		
0x021A	0x370006  	BRA	L___Lib_CAN_1_CAN1IDToRegs1
;__Lib_CAN_1.c,311 :: 		
L___Lib_CAN_1_CAN1IDToRegs0:
; CAN_CONFIG_FLAGS start address is: 2 (W1)
0x021C	0xE16861  	CP	W13, #1
0x021E	0x32FF73  	BRA Z	L___Lib_CAN_1_CAN1IDToRegs2
L___Lib_CAN_1_CAN1IDToRegs65:
0x0220	0xE16860  	CP	W13, #0
0x0222	0x32FF90  	BRA Z	L___Lib_CAN_1_CAN1IDToRegs5
L___Lib_CAN_1_CAN1IDToRegs66:
0x0224	0xE16862  	CP	W13, #2
0x0226	0x32FFC6  	BRA Z	L___Lib_CAN_1_CAN1IDToRegs10
L___Lib_CAN_1_CAN1IDToRegs67:
; CAN_CONFIG_FLAGS end address is: 2 (W1)
L___Lib_CAN_1_CAN1IDToRegs1:
;__Lib_CAN_1.c,312 :: 		
L_end_CAN1IDToRegs:
0x0228	0xFA8000  	ULNK
0x022A	0x060000  	RETURN
; end of __Lib_CAN_1_CAN1IDToRegs
_CAN1SetFilter:
0x055C	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,498 :: 		
;__Lib_CAN_1.c,501 :: 		
0x055E	0x781F8A  	PUSH	W10
0x0560	0x781F8D  	PUSH	W13
0x0562	0x370024  	BRA	L_CAN1SetFilter22
;__Lib_CAN_1.c,502 :: 		
L_CAN1SetFilter24:
;__Lib_CAN_1.c,503 :: 		
0x0564	0x781F8D  	PUSH	W13
0x0566	0x20300A  	MOV	#lo_addr(C1RXF0SID), W10
0x0568	0x20001D  	MOV	#1, W13
0x056A	0x07FDCA  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x056C	0xB1002F  	SUB	#2, W15
;__Lib_CAN_1.c,504 :: 		
0x056E	0x370029  	BRA	L_CAN1SetFilter23
;__Lib_CAN_1.c,505 :: 		
L_CAN1SetFilter25:
;__Lib_CAN_1.c,506 :: 		
0x0570	0x781F8D  	PUSH	W13
0x0572	0x20308A  	MOV	#lo_addr(C1RXF1SID), W10
0x0574	0x20001D  	MOV	#1, W13
0x0576	0x07FDC4  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x0578	0xB1002F  	SUB	#2, W15
;__Lib_CAN_1.c,507 :: 		
0x057A	0x370023  	BRA	L_CAN1SetFilter23
;__Lib_CAN_1.c,508 :: 		
L_CAN1SetFilter26:
;__Lib_CAN_1.c,509 :: 		
0x057C	0x781F8D  	PUSH	W13
0x057E	0x20310A  	MOV	#lo_addr(C1RXF2SID), W10
0x0580	0x20001D  	MOV	#1, W13
0x0582	0x07FDBE  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x0584	0xB1002F  	SUB	#2, W15
;__Lib_CAN_1.c,510 :: 		
0x0586	0x37001D  	BRA	L_CAN1SetFilter23
;__Lib_CAN_1.c,511 :: 		
L_CAN1SetFilter27:
;__Lib_CAN_1.c,512 :: 		
0x0588	0x781F8D  	PUSH	W13
0x058A	0x20318A  	MOV	#lo_addr(C1RXF3SID), W10
0x058C	0x20001D  	MOV	#1, W13
0x058E	0x07FDB8  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x0590	0xB1002F  	SUB	#2, W15
;__Lib_CAN_1.c,513 :: 		
0x0592	0x370017  	BRA	L_CAN1SetFilter23
;__Lib_CAN_1.c,514 :: 		
L_CAN1SetFilter28:
;__Lib_CAN_1.c,515 :: 		
0x0594	0x781F8D  	PUSH	W13
0x0596	0x20320A  	MOV	#lo_addr(C1RXF4SID), W10
0x0598	0x20001D  	MOV	#1, W13
0x059A	0x07FDB2  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x059C	0xB1002F  	SUB	#2, W15
;__Lib_CAN_1.c,516 :: 		
0x059E	0x370011  	BRA	L_CAN1SetFilter23
;__Lib_CAN_1.c,517 :: 		
L_CAN1SetFilter29:
;__Lib_CAN_1.c,518 :: 		
0x05A0	0x781F8D  	PUSH	W13
0x05A2	0x20328A  	MOV	#lo_addr(C1RXF5SID), W10
0x05A4	0x20001D  	MOV	#1, W13
0x05A6	0x07FDAC  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x05A8	0xB1002F  	SUB	#2, W15
;__Lib_CAN_1.c,519 :: 		
0x05AA	0x37000B  	BRA	L_CAN1SetFilter23
L_CAN1SetFilter22:
0x05AC	0xE15060  	CP	W10, #0
0x05AE	0x32FFDA  	BRA Z	L_CAN1SetFilter24
L__CAN1SetFilter76:
0x05B0	0xE15061  	CP	W10, #1
0x05B2	0x32FFDE  	BRA Z	L_CAN1SetFilter25
L__CAN1SetFilter77:
0x05B4	0xE15062  	CP	W10, #2
0x05B6	0x32FFE2  	BRA Z	L_CAN1SetFilter26
L__CAN1SetFilter78:
0x05B8	0xE15063  	CP	W10, #3
0x05BA	0x32FFE6  	BRA Z	L_CAN1SetFilter27
L__CAN1SetFilter79:
0x05BC	0xE15064  	CP	W10, #4
0x05BE	0x32FFEA  	BRA Z	L_CAN1SetFilter28
L__CAN1SetFilter80:
0x05C0	0x37FFEF  	BRA	L_CAN1SetFilter29
L_CAN1SetFilter23:
;__Lib_CAN_1.c,520 :: 		
L_end_CAN1SetFilter:
0x05C2	0x7806CF  	POP	W13
0x05C4	0x78054F  	POP	W10
0x05C6	0xFA8000  	ULNK
0x05C8	0x060000  	RETURN
; end of _CAN1SetFilter
_Can_initInterrupt:
;can.c,128 :: 		void Can_initInterrupt(void) {
;can.c,130 :: 		INTERRUPT_PROTECT(IEC1BITS.C1IE = 1);
0x0B52	0x200420  	MOV	#lo_addr(SRbits), W0
0x0B54	0x784010  	MOV.B	[W0], W0
0x0B56	0x784080  	MOV.B	W0, W1
0x0B58	0xB3CE00  	MOV.B	#224, W0
0x0B5A	0x60C080  	AND.B	W1, W0, W1
0x0B5C	0xFB8001  	ZE	W1, W0
0x0B5E	0xDE00C5  	LSR	W0, #5, W1
; save_sr start address is: 4 (W2)
0x0B60	0xFB8101  	ZE	W1, W2
; DISI_save start address is: 6 (W3)
0x0B62	0x800293  	MOV	DISICNT, W3
0x0B64	0xFC03FF  	DISI	#1023
0x0B66	0x200420  	MOV	#lo_addr(SRbits), W0
0x0B68	0x784090  	MOV.B	[W0], W1
0x0B6A	0xB3CE00  	MOV.B	#224, W0
0x0B6C	0x70C080  	IOR.B	W1, W0, W1
0x0B6E	0x200420  	MOV	#lo_addr(SRbits), W0
0x0B70	0x784801  	MOV.B	W1, [W0]
0x0B72	0x000000  	NOP
0x0B74	0x000000  	NOP
0x0B76	0x880293  	MOV	W3, DISICNT
; DISI_save end address is: 6 (W3)
0x0B78	0xA8608F  	BSET	IEC1bits, #11
; DISI_save start address is: 8 (W4)
0x0B7A	0x800294  	MOV	DISICNT, W4
0x0B7C	0xFC03FF  	DISI	#1023
0x0B7E	0x784182  	MOV.B	W2, W3
; save_sr end address is: 4 (W2)
0x0B80	0xB3C050  	MOV.B	#5, W0
0x0B82	0xFB8083  	ZE	W3, W1
0x0B84	0xFB0100  	SE	W0, W2
0x0B86	0xDD0982  	SL	W1, W2, W3
0x0B88	0x200420  	MOV	#lo_addr(SRbits), W0
0x0B8A	0x69C190  	XOR.B	W3, [W0], W3
0x0B8C	0xB3CE00  	MOV.B	#224, W0
0x0B8E	0x61C180  	AND.B	W3, W0, W3
0x0B90	0x200420  	MOV	#lo_addr(SRbits), W0
0x0B92	0x69C190  	XOR.B	W3, [W0], W3
0x0B94	0x200420  	MOV	#lo_addr(SRbits), W0
0x0B96	0x784803  	MOV.B	W3, [W0]
0x0B98	0x000000  	NOP
0x0B9A	0x000000  	NOP
0x0B9C	0x880294  	MOV	W4, DISICNT
; DISI_save end address is: 8 (W4)
;can.c,131 :: 		INTERRUPT_PROTECT(C1INTEBITS.RXB0IE = 1); //An interrupt is generated everytime that a message passes through the mask in buffer 0
0x0B9E	0x200420  	MOV	#lo_addr(SRbits), W0
0x0BA0	0x784010  	MOV.B	[W0], W0
0x0BA2	0x784080  	MOV.B	W0, W1
0x0BA4	0xB3CE00  	MOV.B	#224, W0
0x0BA6	0x60C080  	AND.B	W1, W0, W1
0x0BA8	0xFB8001  	ZE	W1, W0
0x0BAA	0xDE00C5  	LSR	W0, #5, W1
; save_sr start address is: 4 (W2)
0x0BAC	0xFB8101  	ZE	W1, W2
; DISI_save start address is: 6 (W3)
0x0BAE	0x800293  	MOV	DISICNT, W3
0x0BB0	0xFC03FF  	DISI	#1023
0x0BB2	0x200420  	MOV	#lo_addr(SRbits), W0
0x0BB4	0x784090  	MOV.B	[W0], W1
0x0BB6	0xB3CE00  	MOV.B	#224, W0
0x0BB8	0x70C080  	IOR.B	W1, W0, W1
0x0BBA	0x200420  	MOV	#lo_addr(SRbits), W0
0x0BBC	0x784801  	MOV.B	W1, [W0]
0x0BBE	0x000000  	NOP
0x0BC0	0x000000  	NOP
0x0BC2	0x880293  	MOV	W3, DISICNT
; DISI_save end address is: 6 (W3)
0x0BC4	0xA80398  	BSET.B	C1INTEbits, #0
; DISI_save start address is: 8 (W4)
0x0BC6	0x800294  	MOV	DISICNT, W4
0x0BC8	0xFC03FF  	DISI	#1023
0x0BCA	0x784182  	MOV.B	W2, W3
; save_sr end address is: 4 (W2)
0x0BCC	0xB3C050  	MOV.B	#5, W0
0x0BCE	0xFB8083  	ZE	W3, W1
0x0BD0	0xFB0100  	SE	W0, W2
0x0BD2	0xDD0982  	SL	W1, W2, W3
0x0BD4	0x200420  	MOV	#lo_addr(SRbits), W0
0x0BD6	0x69C190  	XOR.B	W3, [W0], W3
0x0BD8	0xB3CE00  	MOV.B	#224, W0
0x0BDA	0x61C180  	AND.B	W3, W0, W3
0x0BDC	0x200420  	MOV	#lo_addr(SRbits), W0
0x0BDE	0x69C190  	XOR.B	W3, [W0], W3
0x0BE0	0x200420  	MOV	#lo_addr(SRbits), W0
0x0BE2	0x784803  	MOV.B	W3, [W0]
0x0BE4	0x000000  	NOP
0x0BE6	0x000000  	NOP
0x0BE8	0x880294  	MOV	W4, DISICNT
; DISI_save end address is: 8 (W4)
;can.c,132 :: 		INTERRUPT_PROTECT(C1INTEBITS.RXB1IE = 1); //Suddividere gli ID da ricevere nei due buffer
0x0BEA	0x200420  	MOV	#lo_addr(SRbits), W0
0x0BEC	0x784010  	MOV.B	[W0], W0
0x0BEE	0x784080  	MOV.B	W0, W1
0x0BF0	0xB3CE00  	MOV.B	#224, W0
0x0BF2	0x60C080  	AND.B	W1, W0, W1
0x0BF4	0xFB8001  	ZE	W1, W0
0x0BF6	0xDE00C5  	LSR	W0, #5, W1
; save_sr start address is: 4 (W2)
0x0BF8	0xFB8101  	ZE	W1, W2
; DISI_save start address is: 6 (W3)
0x0BFA	0x800293  	MOV	DISICNT, W3
0x0BFC	0xFC03FF  	DISI	#1023
0x0BFE	0x200420  	MOV	#lo_addr(SRbits), W0
0x0C00	0x784090  	MOV.B	[W0], W1
0x0C02	0xB3CE00  	MOV.B	#224, W0
0x0C04	0x70C080  	IOR.B	W1, W0, W1
0x0C06	0x200420  	MOV	#lo_addr(SRbits), W0
0x0C08	0x784801  	MOV.B	W1, [W0]
0x0C0A	0x000000  	NOP
0x0C0C	0x000000  	NOP
0x0C0E	0x880293  	MOV	W3, DISICNT
; DISI_save end address is: 6 (W3)
0x0C10	0xA82398  	BSET.B	C1INTEbits, #1
; DISI_save start address is: 8 (W4)
0x0C12	0x800294  	MOV	DISICNT, W4
0x0C14	0xFC03FF  	DISI	#1023
0x0C16	0x784182  	MOV.B	W2, W3
; save_sr end address is: 4 (W2)
0x0C18	0xB3C050  	MOV.B	#5, W0
0x0C1A	0xFB8083  	ZE	W3, W1
0x0C1C	0xFB0100  	SE	W0, W2
0x0C1E	0xDD0982  	SL	W1, W2, W3
0x0C20	0x200420  	MOV	#lo_addr(SRbits), W0
0x0C22	0x69C190  	XOR.B	W3, [W0], W3
0x0C24	0xB3CE00  	MOV.B	#224, W0
0x0C26	0x61C180  	AND.B	W3, W0, W3
0x0C28	0x200420  	MOV	#lo_addr(SRbits), W0
0x0C2A	0x69C190  	XOR.B	W3, [W0], W3
0x0C2C	0x200420  	MOV	#lo_addr(SRbits), W0
0x0C2E	0x784803  	MOV.B	W3, [W0]
0x0C30	0x000000  	NOP
0x0C32	0x000000  	NOP
0x0C34	0x880294  	MOV	W4, DISICNT
; DISI_save end address is: 8 (W4)
;can.c,134 :: 		}
L_end_Can_initInterrupt:
0x0C36	0x060000  	RETURN
; end of _Can_initInterrupt
_Can_setWritePriority:
;can.c,93 :: 		void Can_setWritePriority(unsigned int txPriority) {
;can.c,94 :: 		can_txPriority = txPriority;
0x0A60	0x88400A  	MOV	W10, _can_txPriority
;can.c,95 :: 		}
L_end_Can_setWritePriority:
0x0A62	0x060000  	RETURN
; end of _Can_setWritePriority
_CAN_routine:
;ebb_can_functions.c,4 :: 		void CAN_routine()  //CAN update routine
;ebb_can_functions.c,6 :: 		Can_resetWritePacket();  //Build the can packet -->
0x0E70	0x781F8A  	PUSH	W10
0x0E72	0x781F8B  	PUSH	W11
0x0E74	0x07FF0D  	RCALL	_Can_resetWritePacket
;ebb_can_functions.c,7 :: 		Can_addIntToWritePacket(ebb_current_pos);
0x0E76	0x80416A  	MOV	_ebb_current_pos, W10
0x0E78	0x07FEDF  	RCALL	_Can_addIntToWritePacket
;ebb_can_functions.c,8 :: 		Can_addIntToWritePacket(calibration_on_off);
0x0E7A	0x80404A  	MOV	_calibration_on_off, W10
0x0E7C	0x07FEDD  	RCALL	_Can_addIntToWritePacket
;ebb_can_functions.c,9 :: 		Can_addIntToWritePacket(error_flag);
0x0E7E	0x80403A  	MOV	_error_flag, W10
0x0E80	0x07FEDB  	RCALL	_Can_addIntToWritePacket
;ebb_can_functions.c,10 :: 		Can_write(EBB_BIAS_ID);  //Send the can packet
0x0E82	0x2070DA  	MOV	#1805, W10
0x0E84	0x20000B  	MOV	#0, W11
0x0E86	0x07FEE4  	RCALL	_Can_write
;ebb_can_functions.c,11 :: 		}
L_end_CAN_routine:
0x0E88	0x7805CF  	POP	W11
0x0E8A	0x78054F  	POP	W10
0x0E8C	0x060000  	RETURN
; end of _CAN_routine
_Can_resetWritePacket:
;can.c,97 :: 		void Can_resetWritePacket(void) {
;can.c,98 :: 		for (can_dataOutLength = 0; can_dataOutLength < CAN_PACKET_SIZE; can_dataOutLength += 1) {
0x0C90	0xEF2000  	CLR	W0
0x0C92	0x884010  	MOV	W0, _can_dataOutLength
L_Can_resetWritePacket9:
0x0C94	0x804010  	MOV	_can_dataOutLength, W0
0x0C96	0xE10068  	CP	W0, #8
0x0C98	0x310009  	BRA GEU	L_Can_resetWritePacket10
L__Can_resetWritePacket202:
;can.c,99 :: 		can_dataOutBuffer[can_dataOutLength] = 0;
0x0C9A	0x208241  	MOV	#lo_addr(_can_dataOutBuffer), W1
0x0C9C	0x208020  	MOV	#lo_addr(_can_dataOutLength), W0
0x0C9E	0x408090  	ADD	W1, [W0], W1
0x0CA0	0xEF2000  	CLR	W0
0x0CA2	0x784880  	MOV.B	W0, [W1]
;can.c,98 :: 		for (can_dataOutLength = 0; can_dataOutLength < CAN_PACKET_SIZE; can_dataOutLength += 1) {
0x0CA4	0x200011  	MOV	#1, W1
0x0CA6	0x208020  	MOV	#lo_addr(_can_dataOutLength), W0
0x0CA8	0x408810  	ADD	W1, [W0], [W0]
;can.c,100 :: 		}
0x0CAA	0x37FFF4  	BRA	L_Can_resetWritePacket9
L_Can_resetWritePacket10:
;can.c,101 :: 		can_dataOutLength = 0;
0x0CAC	0xEF2000  	CLR	W0
0x0CAE	0x884010  	MOV	W0, _can_dataOutLength
;can.c,102 :: 		}
L_end_Can_resetWritePacket:
0x0CB0	0x060000  	RETURN
; end of _Can_resetWritePacket
_Can_addIntToWritePacket:
;can.c,72 :: 		void Can_addIntToWritePacket(int dataOut) {
;can.c,73 :: 		Can_addByteToWritePacket((unsigned char) (dataOut >> 8));
0x0C38	0x781F8A  	PUSH	W10
0x0C3A	0xDED048  	ASR	W10, #8, W0
0x0C3C	0x781F8A  	PUSH	W10
0x0C3E	0x784500  	MOV.B	W0, W10
0x0C40	0x07FCC4  	RCALL	_Can_addByteToWritePacket
0x0C42	0x78054F  	POP	W10
;can.c,74 :: 		Can_addByteToWritePacket((unsigned char) (dataOut & 0xFF));
0x0C44	0x200FF0  	MOV	#255, W0
0x0C46	0x650000  	AND	W10, W0, W0
0x0C48	0x784500  	MOV.B	W0, W10
0x0C4A	0x07FCBF  	RCALL	_Can_addByteToWritePacket
;can.c,75 :: 		}
L_end_Can_addIntToWritePacket:
0x0C4C	0x78054F  	POP	W10
0x0C4E	0x060000  	RETURN
; end of _Can_addIntToWritePacket
_Can_addByteToWritePacket:
;can.c,77 :: 		void Can_addByteToWritePacket(unsigned char dataOut) {
;can.c,78 :: 		can_dataOutBuffer[can_dataOutLength] = dataOut;
0x05CA	0x208241  	MOV	#lo_addr(_can_dataOutBuffer), W1
0x05CC	0x208020  	MOV	#lo_addr(_can_dataOutLength), W0
0x05CE	0x408010  	ADD	W1, [W0], W0
0x05D0	0x78480A  	MOV.B	W10, [W0]
;can.c,79 :: 		can_dataOutLength += 1;
0x05D2	0x200011  	MOV	#1, W1
0x05D4	0x208020  	MOV	#lo_addr(_can_dataOutLength), W0
0x05D6	0x408810  	ADD	W1, [W0], [W0]
;can.c,80 :: 		}
L_end_Can_addByteToWritePacket:
0x05D8	0x060000  	RETURN
; end of _Can_addByteToWritePacket
_Can_write:
0x0C50	0xFA0002  	LNK	#2
;can.c,82 :: 		void Can_write(unsigned long int id) {
;can.c,84 :: 		do {
0x0C52	0x781F8C  	PUSH	W12
0x0C54	0x781F8D  	PUSH	W13
L_Can_write3:
;can.c,85 :: 		sent = CAN1Write(id, can_dataOutBuffer, can_dataOutLength, Can_getWriteFlags());
0x0C56	0x07FC1D  	RCALL	_Can_getWriteFlags
0x0C58	0xBE9F8A  	PUSH.D	W10
0x0C5A	0x80401D  	MOV	_can_dataOutLength, W13
0x0C5C	0x20824C  	MOV	#lo_addr(_can_dataOutBuffer), W12
0x0C5E	0x781F80  	PUSH	W0
0x0C60	0x07FCBC  	RCALL	_CAN1Write
0x0C62	0xB1002F  	SUB	#2, W15
0x0C64	0xBE054F  	POP.D	W10
;can.c,86 :: 		i += 1;
0x0C66	0x200012  	MOV	#1, W2
0x0C68	0x4700E0  	ADD	W14, #0, W1
0x0C6A	0x410891  	ADD	W2, [W1], [W1]
;can.c,87 :: 		} while ((sent == 0) && (i < CAN_RETRY_LIMIT));
0x0C6C	0xE10060  	CP	W0, #0
0x0C6E	0x3A0005  	BRA NZ	L__Can_write183
L__Can_write197:
0x0C70	0x200321  	MOV	#50, W1
0x0C72	0x470060  	ADD	W14, #0, W0
0x0C74	0xE10810  	CP	W1, [W0]
0x0C76	0x360001  	BRA LEU	L__Can_write182
L__Can_write198:
0x0C78	0x37FFEE  	BRA	L_Can_write3
L__Can_write183:
L__Can_write182:
;can.c,88 :: 		if (i == CAN_RETRY_LIMIT) {
0x0C7A	0x200321  	MOV	#50, W1
0x0C7C	0x470060  	ADD	W14, #0, W0
0x0C7E	0xE10810  	CP	W1, [W0]
0x0C80	0x3A0003  	BRA NZ	L_Can_write8
L__Can_write199:
;can.c,89 :: 		can_err++;
0x0C82	0x200011  	MOV	#1, W1
0x0C84	0x2080A0  	MOV	#lo_addr(_can_err), W0
0x0C86	0x408810  	ADD	W1, [W0], [W0]
;can.c,90 :: 		}
L_Can_write8:
;can.c,91 :: 		}
L_end_Can_write:
0x0C88	0x7806CF  	POP	W13
0x0C8A	0x78064F  	POP	W12
0x0C8C	0xFA8000  	ULNK
0x0C8E	0x060000  	RETURN
; end of _Can_write
_CAN1Write:
0x05DA	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,589 :: 		
0x05DC	0x781F8A  	PUSH	W10
0x05DE	0x781F8B  	PUSH	W11
; CAN_TX_MSG_FLAGS start address is: 8 (W4)
0x05E0	0x97BA4E  	MOV	[W14-8], W4
;__Lib_CAN_1.c,595 :: 		
0x05E2	0xAF636E  	BTSC.B	C1TX0CONbits, #3
0x05E4	0x370003  	BRA	L_CAN1Write32
;__Lib_CAN_1.c,596 :: 		
; ptr start address is: 12 (W6)
0x05E6	0x203606  	MOV	#lo_addr(C1TX0SID), W6
;__Lib_CAN_1.c,597 :: 		
; TxCtrlReg start address is: 10 (W5)
0x05E8	0x2036E5  	MOV	#lo_addr(C1TX0CON), W5
;__Lib_CAN_1.c,598 :: 		
; ptr end address is: 12 (W6)
; TxCtrlReg end address is: 10 (W5)
0x05EA	0x37000E  	BRA	L_CAN1Write33
L_CAN1Write32:
;__Lib_CAN_1.c,600 :: 		
0x05EC	0xAF635E  	BTSC.B	C1TX1CONbits, #3
0x05EE	0x370004  	BRA	L_CAN1Write34
;__Lib_CAN_1.c,601 :: 		
; ptr start address is: 12 (W6)
0x05F0	0x203506  	MOV	#lo_addr(C1TX1SID), W6
;__Lib_CAN_1.c,602 :: 		
; TxCtrlReg start address is: 0 (W0)
0x05F2	0x2035E0  	MOV	#lo_addr(C1TX1CON), W0
;__Lib_CAN_1.c,603 :: 		
; TxCtrlReg end address is: 0 (W0)
; ptr end address is: 12 (W6)
0x05F4	0x780280  	MOV	W0, W5
0x05F6	0x370008  	BRA	L_CAN1Write35
L_CAN1Write34:
;__Lib_CAN_1.c,605 :: 		
0x05F8	0xAF634E  	BTSC.B	C1TX2CONbits, #3
0x05FA	0x370003  	BRA	L_CAN1Write36
;__Lib_CAN_1.c,606 :: 		
; ptr start address is: 12 (W6)
0x05FC	0x203406  	MOV	#lo_addr(C1TX2SID), W6
;__Lib_CAN_1.c,607 :: 		
; TxCtrlReg start address is: 0 (W0)
0x05FE	0x2034E0  	MOV	#lo_addr(C1TX2CON), W0
;__Lib_CAN_1.c,608 :: 		
0x0600	0x370002  	BRA	L_CAN1Write37
; TxCtrlReg end address is: 0 (W0)
; ptr end address is: 12 (W6)
; CAN_TX_MSG_FLAGS end address is: 8 (W4)
L_CAN1Write36:
;__Lib_CAN_1.c,610 :: 		
0x0602	0xEF2000  	CLR	W0
0x0604	0x370035  	BRA	L_end_CAN1Write
;__Lib_CAN_1.c,611 :: 		
L_CAN1Write37:
;__Lib_CAN_1.c,612 :: 		
; CAN_TX_MSG_FLAGS start address is: 8 (W4)
; ptr start address is: 12 (W6)
; TxCtrlReg start address is: 0 (W0)
; ptr end address is: 12 (W6)
0x0606	0x780280  	MOV	W0, W5
L_CAN1Write35:
; TxCtrlReg end address is: 0 (W0)
;__Lib_CAN_1.c,613 :: 		
; TxCtrlReg start address is: 10 (W5)
; ptr start address is: 12 (W6)
; ptr end address is: 12 (W6)
; TxCtrlReg end address is: 10 (W5)
L_CAN1Write33:
;__Lib_CAN_1.c,621 :: 		
; ptr start address is: 12 (W6)
; TxCtrlReg start address is: 10 (W5)
0x0608	0xAF6008  	BTSC	W4, #3
0x060A	0x37000B  	BRA	L_CAN1Write38
;__Lib_CAN_1.c,622 :: 		
0x060C	0xBE9F8C  	PUSH.D	W12
0x060E	0x20002D  	MOV	#2, W13
0x0610	0x78060B  	MOV	W11, W12
0x0612	0x78058A  	MOV	W10, W11
0x0614	0x780506  	MOV	W6, W10
0x0616	0x200F70  	MOV	#247, W0
0x0618	0x781F80  	PUSH	W0
0x061A	0x07FD72  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x061C	0xB1002F  	SUB	#2, W15
0x061E	0xBE064F  	POP.D	W12
0x0620	0x37000A  	BRA	L_CAN1Write39
L_CAN1Write38:
;__Lib_CAN_1.c,624 :: 		
0x0622	0xBE9F8C  	PUSH.D	W12
0x0624	0x20002D  	MOV	#2, W13
0x0626	0x78060B  	MOV	W11, W12
0x0628	0x78058A  	MOV	W10, W11
0x062A	0x780506  	MOV	W6, W10
0x062C	0x200FF0  	MOV	#255, W0
0x062E	0x781F80  	PUSH	W0
0x0630	0x07FD67  	RCALL	__Lib_CAN_1_CAN1IDToRegs
0x0632	0xB1002F  	SUB	#2, W15
0x0634	0xBE064F  	POP.D	W12
L_CAN1Write39:
;__Lib_CAN_1.c,626 :: 		
0x0636	0x430164  	ADD	W6, #4, W2
; ptr end address is: 12 (W6)
; ptr start address is: 6 (W3)
0x0638	0x780182  	MOV	W2, W3
;__Lib_CAN_1.c,628 :: 		
0x063A	0x780092  	MOV	[W2], W1
0x063C	0x2FD800  	MOV	#64896, W0
0x063E	0x608900  	AND	W1, W0, [W2]
;__Lib_CAN_1.c,629 :: 		
0x0640	0x66806F  	AND	W13, #15, W0
0x0642	0xDD0043  	SL	W0, #3, W0
0x0644	0x700993  	IOR	W0, [W3], [W3]
;__Lib_CAN_1.c,631 :: 		
0x0646	0xAFC008  	BTSC	W4, #6
0x0648	0x370003  	BRA	L_CAN1Write40
;__Lib_CAN_1.c,632 :: 		
0x064A	0x780093  	MOV	[W3], W1
0x064C	0x202000  	MOV	#512, W0
0x064E	0x708980  	IOR	W1, W0, [W3]
L_CAN1Write40:
;__Lib_CAN_1.c,635 :: 		
; chptr start address is: 4 (W2)
0x0650	0x418162  	ADD	W3, #2, W2
; ptr end address is: 6 (W3)
;__Lib_CAN_1.c,636 :: 		
; i start address is: 0 (W0)
0x0652	0xEF2000  	CLR	W0
;__Lib_CAN_1.c,637 :: 		
; TxCtrlReg end address is: 10 (W5)
; i end address is: 0 (W0)
; CAN_TX_MSG_FLAGS end address is: 8 (W4)
0x0654	0x780185  	MOV	W5, W3
0x0656	0x780280  	MOV	W0, W5
;__Lib_CAN_1.c,638 :: 		
L_CAN1Write41:
; chptr start address is: 4 (W2)
; chptr end address is: 4 (W2)
; i start address is: 10 (W5)
; TxCtrlReg start address is: 6 (W3)
; CAN_TX_MSG_FLAGS start address is: 8 (W4)
0x0658	0xE1280D  	CP	W5, W13
0x065A	0x310005  	BRA GEU	L_CAN1Write42
L__CAN1Write83:
; chptr end address is: 4 (W2)
;__Lib_CAN_1.c,639 :: 		
; chptr start address is: 4 (W2)
0x065C	0x410085  	ADD	W2, W5, W1
0x065E	0x460005  	ADD	W12, W5, W0
0x0660	0x784890  	MOV.B	[W0], [W1]
;__Lib_CAN_1.c,640 :: 		
0x0662	0xEC200A  	INC	W5
;__Lib_CAN_1.c,641 :: 		
; chptr end address is: 4 (W2)
; i end address is: 10 (W5)
0x0664	0x37FFF9  	BRA	L_CAN1Write41
L_CAN1Write42:
;__Lib_CAN_1.c,643 :: 		
0x0666	0x6209E3  	AND	W4, #3, [W3]
; CAN_TX_MSG_FLAGS end address is: 8 (W4)
;__Lib_CAN_1.c,654 :: 		
0x0668	0x780013  	MOV	[W3], W0
0x066A	0x700068  	IOR	W0, #8, W0
0x066C	0x780980  	MOV	W0, [W3]
; TxCtrlReg end address is: 6 (W3)
;__Lib_CAN_1.c,661 :: 		
0x066E	0x2FFFF0  	MOV	#65535, W0
;__Lib_CAN_1.c,662 :: 		
;__Lib_CAN_1.c,661 :: 		
;__Lib_CAN_1.c,662 :: 		
L_end_CAN1Write:
0x0670	0x7805CF  	POP	W11
0x0672	0x78054F  	POP	W10
0x0674	0xFA8000  	ULNK
0x0676	0x060000  	RETURN
; end of _CAN1Write
_Can_getWriteFlags:
;can.c,104 :: 		unsigned int Can_getWriteFlags(void) {
;can.c,105 :: 		return CAN_DEFAULT_FLAGS & can_txPriority;
0x0492	0x200FF1  	MOV	#255, W1
0x0494	0x208000  	MOV	#lo_addr(_can_txPriority), W0
0x0496	0x608010  	AND	W1, [W0], W0
;can.c,106 :: 		}
L_end_Can_getWriteFlags:
0x0498	0x060000  	RETURN
; end of _Can_getWriteFlags
_UART1_Init:
0x0E8E	0xFA0008  	LNK	#8
;__Lib_UART_12_p30.c,121 :: 		
;__Lib_UART_12_p30.c,124 :: 		
0x0E90	0x2FFFF0  	MOV	#lo_addr(_UART1_Write), W0
0x0E92	0x8840D0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p30.c,125 :: 		
0x0E94	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x0E96	0x8840E0  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p30.c,126 :: 		
0x0E98	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x0E9A	0x8840F0  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p30.c,127 :: 		
0x0E9C	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x0E9E	0x884100  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p30.c,132 :: 		
0x0EA0	0xEF220C  	CLR	U1MODE
;__Lib_UART_12_p30.c,133 :: 		
0x0EA2	0x280000  	MOV	#32768, W0
0x0EA4	0xB7A20E  	MOV	WREG, U1STA
;__Lib_UART_12_p30.c,134 :: 		
0x0EA6	0x07FDD9  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p30.c,137 :: 		
0x0EA8	0x203E82  	MOV	#1000, W2
0x0EAA	0x200003  	MOV	#0, W3
0x0EAC	0x07FDA1  	RCALL	__Multiply_32x32
; tmp start address is: 8 (W4)
0x0EAE	0xBE0200  	MOV.D	W0, W4
;__Lib_UART_12_p30.c,140 :: 		
0x0EB0	0x07FCD9  	RCALL	_Get_Fosc_Per_Cyc
0x0EB2	0xDE0041  	LSR	W0, #1, W0
0x0EB4	0x400064  	ADD	W0, #4, W0
0x0EB6	0x780080  	MOV	W0, W1
0x0EB8	0xBE010A  	MOV.D	W10, W2
L__UART1_Init61:
0x0EBA	0xE90081  	DEC	W1, W1
0x0EBC	0x350003  	BRA LT	L__UART1_Init62
0x0EBE	0xD00102  	SL	W2, W2
0x0EC0	0xD28183  	RLC	W3, W3
0x0EC2	0x37FFFB  	BRA	L__UART1_Init61
L__UART1_Init62:
0x0EC4	0x980702  	MOV	W2, [W14+0]
0x0EC6	0x980713  	MOV	W3, [W14+2]
;__Lib_UART_12_p30.c,142 :: 		
0x0EC8	0xBE9F84  	PUSH.D	W4
0x0ECA	0xBE0004  	MOV.D	W4, W0
0x0ECC	0xEB0200  	CLR	W4
0x0ECE	0x07FD99  	RCALL	__Modulus_32x32
0x0ED0	0xBE024F  	POP.D	W4
0x0ED2	0x980720  	MOV	W0, [W14+4]
0x0ED4	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p30.c,143 :: 		
0x0ED6	0xBE0004  	MOV.D	W4, W0
0x0ED8	0x90010E  	MOV	[W14+0], W2
0x0EDA	0x90019E  	MOV	[W14+2], W3
0x0EDC	0xEB0200  	CLR	W4
0x0EDE	0x07FD5F  	RCALL	__Divide_32x32
; tmp end address is: 8 (W4)
; tmp start address is: 6 (W3)
0x0EE0	0x780180  	MOV	W0, W3
0x0EE2	0x780201  	MOV	W1, W4
;__Lib_UART_12_p30.c,145 :: 		
0x0EE4	0x470060  	ADD	W14, #0, W0
0x0EE6	0xD10150  	LSR	[++W0], W2
0x0EE8	0xD380C0  	RRC	[--W0], W1
0x0EEA	0x470064  	ADD	W14, #4, W0
0x0EEC	0xE10830  	CP	W1, [W0++]
0x0EEE	0xE19020  	CPB	W2, [W0--]
0x0EF0	0x310004  	BRA GEU	L__UART1_Init42
L__UART1_Init63:
;__Lib_UART_12_p30.c,146 :: 		
; tmp start address is: 0 (W0)
0x0EF2	0x418061  	ADD	W3, #1, W0
0x0EF4	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
0x0EF6	0xBE0100  	MOV.D	W0, W2
; tmp end address is: 0 (W0)
0x0EF8	0x370002  	BRA	L_UART1_Init13
L__UART1_Init42:
;__Lib_UART_12_p30.c,145 :: 		
0x0EFA	0x780103  	MOV	W3, W2
0x0EFC	0x780184  	MOV	W4, W3
;__Lib_UART_12_p30.c,146 :: 		
L_UART1_Init13:
;__Lib_UART_12_p30.c,150 :: 		
; tmp start address is: 4 (W2)
0x0EFE	0x510061  	SUB	W2, #1, W0
0x0F00	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
0x0F02	0x8810A0  	MOV	W0, U1BRG
;__Lib_UART_12_p30.c,151 :: 		
0x0F04	0xA9220E  	BCLR	U1STA, #1
;__Lib_UART_12_p30.c,153 :: 		
0x0F06	0xA8E20D  	BSET	U1MODE, #15
;__Lib_UART_12_p30.c,154 :: 		
0x0F08	0xA8420F  	BSET	U1STA, #10
;__Lib_UART_12_p30.c,155 :: 		
0x0F0A	0x07FC86  	RCALL	_Delay_100ms
0x0F0C	0x07FC85  	RCALL	_Delay_100ms
;__Lib_UART_12_p30.c,157 :: 		
L_end_UART1_Init:
0x0F0E	0xFA8000  	ULNK
0x0F10	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0A5A	0x238800  	MOV	#14464, W0
0x0A5C	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0A5E	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x0864	0x200040  	MOV	#4, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x0866	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0818	0x2000B8  	MOV	#11, W8
0x081A	0x22C2D7  	MOV	#11309, W7
L_Delay_100ms33:
0x081C	0xED200E  	DEC	W7
0x081E	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0820	0xED2010  	DEC	W8
0x0822	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x0824	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x09F0	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x09F2	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x09F4	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x09F6	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x09F8	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x09FA	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x09FC	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x09FE	0xFA8000  	ULNK
0x0A00	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x0A02	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0A04	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0A06	0x000000040A56  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x0A0A	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x0A0C	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0A0E	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x0A10	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0A12	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x0A14	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x0A16	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x0A18	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x0A1A	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x0A1C	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x0A1E	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x0A20	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x0A22	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x0A24	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x0A26	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x0A28	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x0A2A	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x0A2C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x0A2E	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x0A30	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x0A32	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x0A34	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x0A36	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x0A38	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x0A3A	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x0A3C	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x0A3E	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x0A40	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x0A42	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x0A44	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x0A46	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x0A48	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x0A4A	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x0A4C	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x0A4E	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x0A50	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x0A52	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x0A54	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x0A56	0xFA8000  	ULNK
0x0A58	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x099E	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x09A0	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x09A2	0x0000000409EC  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x09A6	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x09A8	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x09AA	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x09AC	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x09AE	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x09B0	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x09B2	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x09B4	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x09B6	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x09B8	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x09BA	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x09BC	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x09BE	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x09C0	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x09C2	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x09C4	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x09C6	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x09C8	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x09CA	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x09CC	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x09CE	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x09D0	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x09D2	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x09D4	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x09D6	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x09D8	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x09DA	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x09DC	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x09DE	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x09E0	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x09E2	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x09E4	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x09E6	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x09E8	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x09EA	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x09EC	0xFA8000  	ULNK
0x09EE	0x060000  	RETURN
; end of __Divide_32x32
_setTimer:
;dspic.c,137 :: 		void setTimer(unsigned char device, double timePeriod) {
;dspic.c,139 :: 		setInterruptPriority(device, MEDIUM_PRIORITY);
0x0DB6	0x781F8A  	PUSH	W10
0x0DB8	0x781F8B  	PUSH	W11
0x0DBA	0x781F8C  	PUSH	W12
0x0DBC	0x781F8B  	PUSH	W11
0x0DBE	0x781F8C  	PUSH	W12
0x0DC0	0xB3C04B  	MOV.B	#4, W11
0x0DC2	0x07FD7A  	RCALL	_setInterruptPriority
0x0DC4	0x78064F  	POP	W12
0x0DC6	0x7805CF  	POP	W11
;dspic.c,141 :: 		prescalerIndex = getTimerPrescaler(timePeriod);
0x0DC8	0x781F8B  	PUSH	W11
0x0DCA	0x781F8C  	PUSH	W12
0x0DCC	0x781F8A  	PUSH	W10
0x0DCE	0x78050B  	MOV	W11, W10
0x0DD0	0x78058C  	MOV	W12, W11
0x0DD2	0x07FDC9  	RCALL	_getTimerPrescaler
0x0DD4	0x78054F  	POP	W10
0x0DD6	0x78064F  	POP	W12
0x0DD8	0x7805CF  	POP	W11
; prescalerIndex start address is: 8 (W4)
0x0DDA	0x784200  	MOV.B	W0, W4
;dspic.c,142 :: 		switch (device) {
0x0DDC	0x37003F  	BRA	L_setTimer51
;dspic.c,143 :: 		case TIMER1_DEVICE:
L_setTimer53:
;dspic.c,144 :: 		TIMER1_PRESCALER = prescalerIndex;
0x0DDE	0x784184  	MOV.B	W4, W3
0x0DE0	0xB3C040  	MOV.B	#4, W0
0x0DE2	0xFB8083  	ZE	W3, W1
0x0DE4	0xFB0100  	SE	W0, W2
0x0DE6	0xDD0982  	SL	W1, W2, W3
0x0DE8	0x201040  	MOV	#lo_addr(T1CONbits), W0
0x0DEA	0x69C190  	XOR.B	W3, [W0], W3
0x0DEC	0xB3C300  	MOV.B	#48, W0
0x0DEE	0x61C180  	AND.B	W3, W0, W3
0x0DF0	0x201040  	MOV	#lo_addr(T1CONbits), W0
0x0DF2	0x69C190  	XOR.B	W3, [W0], W3
0x0DF4	0x201040  	MOV	#lo_addr(T1CONbits), W0
0x0DF6	0x784803  	MOV.B	W3, [W0]
;dspic.c,145 :: 		TIMER1_PERIOD = getTimerPeriod(timePeriod, prescalerIndex);
0x0DF8	0x78050B  	MOV	W11, W10
0x0DFA	0x78058C  	MOV	W12, W11
; prescalerIndex end address is: 8 (W4)
0x0DFC	0x784604  	MOV.B	W4, W12
0x0DFE	0x07FD13  	RCALL	_getTimerPeriod
0x0E00	0xB7A102  	MOV	WREG, PR1
;dspic.c,146 :: 		TIMER1_ENABLE_INTERRUPT = TRUE;
0x0E02	0xA8608C  	BSET	IEC0bits, #3
;dspic.c,147 :: 		TIMER1_ENABLE = TRUE;
0x0E04	0xA8E105  	BSET	T1CONbits, #15
;dspic.c,148 :: 		break;
0x0E06	0x370030  	BRA	L_setTimer52
;dspic.c,149 :: 		case TIMER2_DEVICE:
L_setTimer54:
;dspic.c,150 :: 		TIMER2_PRESCALER = prescalerIndex;
; prescalerIndex start address is: 8 (W4)
0x0E08	0x784184  	MOV.B	W4, W3
0x0E0A	0xB3C040  	MOV.B	#4, W0
0x0E0C	0xFB8083  	ZE	W3, W1
0x0E0E	0xFB0100  	SE	W0, W2
0x0E10	0xDD0982  	SL	W1, W2, W3
0x0E12	0x201100  	MOV	#lo_addr(T2CONbits), W0
0x0E14	0x69C190  	XOR.B	W3, [W0], W3
0x0E16	0xB3C300  	MOV.B	#48, W0
0x0E18	0x61C180  	AND.B	W3, W0, W3
0x0E1A	0x201100  	MOV	#lo_addr(T2CONbits), W0
0x0E1C	0x69C190  	XOR.B	W3, [W0], W3
0x0E1E	0x201100  	MOV	#lo_addr(T2CONbits), W0
0x0E20	0x784803  	MOV.B	W3, [W0]
;dspic.c,151 :: 		TIMER2_PERIOD = getTimerPeriod(timePeriod, prescalerIndex);
0x0E22	0x78050B  	MOV	W11, W10
0x0E24	0x78058C  	MOV	W12, W11
; prescalerIndex end address is: 8 (W4)
0x0E26	0x784604  	MOV.B	W4, W12
0x0E28	0x07FCFE  	RCALL	_getTimerPeriod
0x0E2A	0xB7A10C  	MOV	WREG, PR2
;dspic.c,152 :: 		TIMER2_ENABLE_INTERRUPT = TRUE;
0x0E2C	0xA8C08C  	BSET	IEC0bits, #6
;dspic.c,153 :: 		TIMER2_ENABLE = TRUE;
0x0E2E	0xA8E111  	BSET	T2CONbits, #15
;dspic.c,154 :: 		break;
0x0E30	0x37001B  	BRA	L_setTimer52
;dspic.c,155 :: 		case TIMER4_DEVICE:
L_setTimer55:
;dspic.c,156 :: 		TIMER4_PRESCALER = prescalerIndex;
; prescalerIndex start address is: 8 (W4)
0x0E32	0x784184  	MOV.B	W4, W3
0x0E34	0xB3C040  	MOV.B	#4, W0
0x0E36	0xFB8083  	ZE	W3, W1
0x0E38	0xFB0100  	SE	W0, W2
0x0E3A	0xDD0982  	SL	W1, W2, W3
0x0E3C	0x2011E0  	MOV	#lo_addr(T4CONbits), W0
0x0E3E	0x69C190  	XOR.B	W3, [W0], W3
0x0E40	0xB3C300  	MOV.B	#48, W0
0x0E42	0x61C180  	AND.B	W3, W0, W3
0x0E44	0x2011E0  	MOV	#lo_addr(T4CONbits), W0
0x0E46	0x69C190  	XOR.B	W3, [W0], W3
0x0E48	0x2011E0  	MOV	#lo_addr(T4CONbits), W0
0x0E4A	0x784803  	MOV.B	W3, [W0]
;dspic.c,157 :: 		TIMER4_PERIOD = getTimerPeriod(timePeriod, prescalerIndex);
0x0E4C	0x78050B  	MOV	W11, W10
0x0E4E	0x78058C  	MOV	W12, W11
; prescalerIndex end address is: 8 (W4)
0x0E50	0x784604  	MOV.B	W4, W12
0x0E52	0x07FCE9  	RCALL	_getTimerPeriod
0x0E54	0xB7A11A  	MOV	WREG, PR4
;dspic.c,158 :: 		TIMER4_ENABLE_INTERRUPT = TRUE;
0x0E56	0xA8A08E  	BSET	IEC1bits, #5
;dspic.c,159 :: 		TIMER4_ENABLE = TRUE;
0x0E58	0xA8E11F  	BSET	T4CONbits, #15
;dspic.c,160 :: 		break;
0x0E5A	0x370006  	BRA	L_setTimer52
;dspic.c,161 :: 		}
L_setTimer51:
; prescalerIndex start address is: 8 (W4)
0x0E5C	0xE15461  	CP.B	W10, #1
0x0E5E	0x32FFBF  	BRA Z	L_setTimer53
L__setTimer240:
0x0E60	0xE15462  	CP.B	W10, #2
0x0E62	0x32FFD2  	BRA Z	L_setTimer54
L__setTimer241:
0x0E64	0xE15463  	CP.B	W10, #3
0x0E66	0x32FFE5  	BRA Z	L_setTimer55
L__setTimer242:
; prescalerIndex end address is: 8 (W4)
L_setTimer52:
;dspic.c,162 :: 		}
L_end_setTimer:
0x0E68	0x78064F  	POP	W12
0x0E6A	0x7805CF  	POP	W11
0x0E6C	0x78054F  	POP	W10
0x0E6E	0x060000  	RETURN
; end of _setTimer
_setInterruptPriority:
;dspic.c,15 :: 		void setInterruptPriority(unsigned char device, unsigned char priority) {
;dspic.c,16 :: 		switch (device) {
0x08B8	0x370048  	BRA	L_setInterruptPriority12
;dspic.c,17 :: 		case INT0_DEVICE:
L_setInterruptPriority14:
;dspic.c,18 :: 		INT0_PRIORITY = priority;
0x08BA	0x78408B  	MOV.B	W11, W1
0x08BC	0x200940  	MOV	#lo_addr(IPC0bits), W0
0x08BE	0x68C090  	XOR.B	W1, [W0], W1
0x08C0	0x60C0E7  	AND.B	W1, #7, W1
0x08C2	0x200940  	MOV	#lo_addr(IPC0bits), W0
0x08C4	0x68C090  	XOR.B	W1, [W0], W1
0x08C6	0x200940  	MOV	#lo_addr(IPC0bits), W0
0x08C8	0x784801  	MOV.B	W1, [W0]
;dspic.c,19 :: 		break;
0x08CA	0x37004C  	BRA	L_setInterruptPriority13
;dspic.c,20 :: 		case INT1_DEVICE:
L_setInterruptPriority15:
;dspic.c,21 :: 		INT1_PRIORITY = priority;
0x08CC	0x78408B  	MOV.B	W11, W1
0x08CE	0x2009C0  	MOV	#lo_addr(IPC4bits), W0
0x08D0	0x68C090  	XOR.B	W1, [W0], W1
0x08D2	0x60C0E7  	AND.B	W1, #7, W1
0x08D4	0x2009C0  	MOV	#lo_addr(IPC4bits), W0
0x08D6	0x68C090  	XOR.B	W1, [W0], W1
0x08D8	0x2009C0  	MOV	#lo_addr(IPC4bits), W0
0x08DA	0x784801  	MOV.B	W1, [W0]
;dspic.c,22 :: 		break;
0x08DC	0x370043  	BRA	L_setInterruptPriority13
;dspic.c,23 :: 		case INT2_DEVICE:
L_setInterruptPriority16:
;dspic.c,24 :: 		INT2_PRIORITY = priority;
0x08DE	0xFB800B  	ZE	W11, W0
0x08E0	0x780080  	MOV	W0, W1
0x08E2	0xB3C0C0  	MOV.B	#12, W0
0x08E4	0xFB0000  	SE	W0, W0
0x08E6	0xDD0880  	SL	W1, W0, W1
0x08E8	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x08EA	0x688090  	XOR	W1, [W0], W1
0x08EC	0x270000  	MOV	#28672, W0
0x08EE	0x608080  	AND	W1, W0, W1
0x08F0	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x08F2	0x688090  	XOR	W1, [W0], W1
0x08F4	0x8804F1  	MOV	W1, IPC5bits
;dspic.c,25 :: 		break;
0x08F6	0x370036  	BRA	L_setInterruptPriority13
;dspic.c,29 :: 		case TIMER1_DEVICE:
L_setInterruptPriority17:
;dspic.c,30 :: 		TIMER1_PRIORITY = priority;
0x08F8	0xFB800B  	ZE	W11, W0
0x08FA	0x780080  	MOV	W0, W1
0x08FC	0xB3C0C0  	MOV.B	#12, W0
0x08FE	0xFB0000  	SE	W0, W0
0x0900	0xDD0880  	SL	W1, W0, W1
0x0902	0x200940  	MOV	#lo_addr(IPC0bits), W0
0x0904	0x688090  	XOR	W1, [W0], W1
0x0906	0x270000  	MOV	#28672, W0
0x0908	0x608080  	AND	W1, W0, W1
0x090A	0x200940  	MOV	#lo_addr(IPC0bits), W0
0x090C	0x688090  	XOR	W1, [W0], W1
0x090E	0x8804A1  	MOV	W1, IPC0bits
;dspic.c,31 :: 		break;
0x0910	0x370029  	BRA	L_setInterruptPriority13
;dspic.c,32 :: 		case TIMER2_DEVICE:
L_setInterruptPriority18:
;dspic.c,33 :: 		TIMER2_PRIORITY = priority;
0x0912	0xFB800B  	ZE	W11, W0
0x0914	0x780080  	MOV	W0, W1
0x0916	0xB3C080  	MOV.B	#8, W0
0x0918	0xFB0000  	SE	W0, W0
0x091A	0xDD0880  	SL	W1, W0, W1
0x091C	0x200960  	MOV	#lo_addr(IPC1bits), W0
0x091E	0x688090  	XOR	W1, [W0], W1
0x0920	0x207000  	MOV	#1792, W0
0x0922	0x608080  	AND	W1, W0, W1
0x0924	0x200960  	MOV	#lo_addr(IPC1bits), W0
0x0926	0x688090  	XOR	W1, [W0], W1
0x0928	0x8804B1  	MOV	W1, IPC1bits
;dspic.c,34 :: 		break;
0x092A	0x37001C  	BRA	L_setInterruptPriority13
;dspic.c,35 :: 		case TIMER4_DEVICE:
L_setInterruptPriority19:
;dspic.c,36 :: 		TIMER4_PRIORITY = priority;
0x092C	0x78418B  	MOV.B	W11, W3
0x092E	0xB3C040  	MOV.B	#4, W0
0x0930	0xFB8083  	ZE	W3, W1
0x0932	0xFB0100  	SE	W0, W2
0x0934	0xDD0982  	SL	W1, W2, W3
0x0936	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x0938	0x69C190  	XOR.B	W3, [W0], W3
0x093A	0xB3C700  	MOV.B	#112, W0
0x093C	0x61C180  	AND.B	W3, W0, W3
0x093E	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x0940	0x69C190  	XOR.B	W3, [W0], W3
0x0942	0x2009E0  	MOV	#lo_addr(IPC5bits), W0
0x0944	0x784803  	MOV.B	W3, [W0]
;dspic.c,37 :: 		break;
0x0946	0x37000E  	BRA	L_setInterruptPriority13
;dspic.c,38 :: 		default:
L_setInterruptPriority20:
;dspic.c,39 :: 		break;
0x0948	0x37000D  	BRA	L_setInterruptPriority13
;dspic.c,40 :: 		}
L_setInterruptPriority12:
0x094A	0xE15464  	CP.B	W10, #4
0x094C	0x32FFB6  	BRA Z	L_setInterruptPriority14
L__setInterruptPriority214:
0x094E	0xE15465  	CP.B	W10, #5
0x0950	0x32FFBD  	BRA Z	L_setInterruptPriority15
L__setInterruptPriority215:
0x0952	0xE15466  	CP.B	W10, #6
0x0954	0x32FFC4  	BRA Z	L_setInterruptPriority16
L__setInterruptPriority216:
0x0956	0xE15461  	CP.B	W10, #1
0x0958	0x32FFCF  	BRA Z	L_setInterruptPriority17
L__setInterruptPriority217:
0x095A	0xE15462  	CP.B	W10, #2
0x095C	0x32FFDA  	BRA Z	L_setInterruptPriority18
L__setInterruptPriority218:
0x095E	0xE15463  	CP.B	W10, #3
0x0960	0x32FFE5  	BRA Z	L_setInterruptPriority19
L__setInterruptPriority219:
0x0962	0x37FFF2  	BRA	L_setInterruptPriority20
L_setInterruptPriority13:
;dspic.c,41 :: 		}
L_end_setInterruptPriority:
0x0964	0x060000  	RETURN
; end of _setInterruptPriority
_getTimerPrescaler:
;dspic.c,210 :: 		unsigned char getTimerPrescaler(double timePeriod) {
;dspic.c,213 :: 		exactTimerPrescaler = getExactTimerPrescaler(timePeriod);
0x0966	0x07FF50  	RCALL	_getExactTimerPrescaler
; exactTimerPrescaler start address is: 8 (W4)
0x0968	0xBE0200  	MOV.D	W0, W4
;dspic.c,214 :: 		for (i = 0; i < sizeof(PRESCALER_VALUES); i += 1) {
; i start address is: 6 (W3)
0x096A	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
L_getTimerPrescaler71:
; i start address is: 6 (W3)
; exactTimerPrescaler start address is: 8 (W4)
; exactTimerPrescaler end address is: 8 (W4)
0x096C	0xE11C68  	CP.B	W3, #8
0x096E	0x310014  	BRA GEU	L_getTimerPrescaler72
L__getTimerPrescaler257:
; exactTimerPrescaler end address is: 8 (W4)
;dspic.c,215 :: 		if ((int) exactTimerPrescaler < PRESCALER_VALUES[i]) {
; exactTimerPrescaler start address is: 8 (W4)
0x0970	0xBE9F84  	PUSH.D	W4
0x0972	0x781F83  	PUSH	W3
0x0974	0xBE9F8A  	PUSH.D	W10
0x0976	0xBE0004  	MOV.D	W4, W0
0x0978	0x07FE7F  	RCALL	__Float2Longint
0x097A	0xBE054F  	POP.D	W10
0x097C	0x7801CF  	POP	W3
0x097E	0xBE024F  	POP.D	W4
0x0980	0xFB8083  	ZE	W3, W1
0x0982	0xDD0941  	SL	W1, #1, W2
0x0984	0x295FC1  	MOV	#lo_addr(_PRESCALER_VALUES), W1
0x0986	0x408102  	ADD	W1, W2, W2
0x0988	0x780092  	MOV	[W2], W1
0x098A	0xE10001  	CP	W0, W1
0x098C	0x310002  	BRA GEU	L_getTimerPrescaler74
L__getTimerPrescaler258:
; exactTimerPrescaler end address is: 8 (W4)
;dspic.c,216 :: 		return i;
0x098E	0x784003  	MOV.B	W3, W0
; i end address is: 6 (W3)
0x0990	0x370005  	BRA	L_end_getTimerPrescaler
;dspic.c,217 :: 		}
L_getTimerPrescaler74:
;dspic.c,214 :: 		for (i = 0; i < sizeof(PRESCALER_VALUES); i += 1) {
; i start address is: 0 (W0)
; exactTimerPrescaler start address is: 8 (W4)
; i start address is: 6 (W3)
0x0992	0x41C061  	ADD.B	W3, #1, W0
; i end address is: 6 (W3)
;dspic.c,218 :: 		}
; exactTimerPrescaler end address is: 8 (W4)
; i end address is: 0 (W0)
0x0994	0x784180  	MOV.B	W0, W3
0x0996	0x37FFEA  	BRA	L_getTimerPrescaler71
L_getTimerPrescaler72:
;dspic.c,219 :: 		i -= 1;
; i start address is: 6 (W3)
0x0998	0xFB8003  	ZE	W3, W0
; i end address is: 6 (W3)
0x099A	0xED2000  	DEC	W0
;dspic.c,221 :: 		return i;
;dspic.c,222 :: 		}
L_end_getTimerPrescaler:
0x099C	0x060000  	RETURN
; end of _getTimerPrescaler
_getExactTimerPrescaler:
;dspic.c,224 :: 		double getExactTimerPrescaler(double timePeriod) {
;dspic.c,225 :: 		return (timePeriod * 1000000) / (INSTRUCTION_PERIOD * MAX_TIMER_PERIOD_VALUE);
0x0808	0xBE000A  	MOV.D	W10, W0
0x080A	0x224002  	MOV	#9216, W2
0x080C	0x249743  	MOV	#18804, W3
0x080E	0x07FDA9  	RCALL	__Mul_FP
0x0810	0x2FF002  	MOV	#65280, W2
0x0812	0x245FF3  	MOV	#17919, W3
0x0814	0x07FD0B  	RCALL	__Div_FP
;dspic.c,226 :: 		}
L_end_getExactTimerPrescaler:
0x0816	0x060000  	RETURN
; end of _getExactTimerPrescaler
__Mul_FP:
0x0362	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,855 :: 		
;__Lib_MathDouble.c,857 :: 		
0x0364	0x070002  	RCALL	MulFP___mulsf3
;__Lib_MathDouble.c,858 :: 		
0x0366	0x000000040478  	GOTO	the_end__Mul_FP
;__Lib_MathDouble.c,861 :: 		
MulFP___mulsf3:
;__Lib_MathDouble.c,862 :: 		
0x036A	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,863 :: 		
0x036C	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,864 :: 		
0x036E	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,865 :: 		
0x0370	0x070030  	RCALL	MulFP__funpack2
;__Lib_MathDouble.c,866 :: 		
0x0372	0x330037  	BRA N	MulFP__fPropagateNaN
;__Lib_MathDouble.c,867 :: 		
0x0374	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,868 :: 		
0x0376	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,869 :: 		
0x0378	0x320024  	BRA Z	MulFP_aisinfinite
;__Lib_MathDouble.c,870 :: 		
0x037A	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,871 :: 		
0x037C	0x320027  	BRA Z	MulFP_bisinfinite
;__Lib_MathDouble.c,872 :: 		
0x037E	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,873 :: 		
0x0380	0x320022  	BRA Z	MulFP_return8_1
;__Lib_MathDouble.c,874 :: 		
0x0382	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,875 :: 		
0x0384	0x320021  	BRA Z	MulFP_return2_1
;__Lib_MathDouble.c,876 :: 		
0x0386	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.c,877 :: 		
0x0388	0xB107EB  	SUB	#126, W11
;__Lib_MathDouble.c,878 :: 		
0x038A	0xB83401  	MUL.UU	W6, W1, W8
;__Lib_MathDouble.c,879 :: 		
0x038C	0xB83A00  	MUL.UU	W7, W0, W4
;__Lib_MathDouble.c,880 :: 		
0x038E	0x420408  	ADD	W4, W8, W8
;__Lib_MathDouble.c,881 :: 		
0x0390	0x4A8489  	ADDC	W5, W9, W9
;__Lib_MathDouble.c,882 :: 		
0x0392	0xB83A01  	MUL.UU	W7, W1, W4
;__Lib_MathDouble.c,883 :: 		
0x0394	0xB83000  	MUL.UU	W6, W0, W0
;__Lib_MathDouble.c,884 :: 		
0x0396	0x408088  	ADD	W1, W8, W1
;__Lib_MathDouble.c,885 :: 		
0x0398	0x4A0109  	ADDC	W4, W9, W2
;__Lib_MathDouble.c,886 :: 		
0x039A	0x330004  	BRA N	MulFP_formsticky
;__Lib_MathDouble.c,887 :: 		
0x039C	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,888 :: 		
0x039E	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,889 :: 		
0x03A0	0x490102  	ADDC	W2, W2, W2
;__Lib_MathDouble.c,890 :: 		
0x03A2	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,891 :: 		
MulFP_formsticky:
;__Lib_MathDouble.c,892 :: 		
0x03A4	0xDD09C9  	SL	W1, #9, W3
;__Lib_MathDouble.c,893 :: 		
0x03A6	0x700183  	IOR	W0, W3, W3
;__Lib_MathDouble.c,894 :: 		
0x03A8	0x320001  	BRA Z	MulFP_formRandSig
;__Lib_MathDouble.c,895 :: 		
0x03AA	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,896 :: 		
MulFP_formRandSig:
;__Lib_MathDouble.c,897 :: 		
0x03AC	0xDE14C8  	LSR	W2, #8, W9
;__Lib_MathDouble.c,898 :: 		
0x03AE	0xDD1448  	SL	W2, #8, W8
;__Lib_MathDouble.c,899 :: 		
0x03B0	0xDE0947  	LSR	W1, #7, W2
;__Lib_MathDouble.c,900 :: 		
0x03B2	0xB20012  	AND	#1, W2
;__Lib_MathDouble.c,901 :: 		
0x03B4	0xDE08C8  	LSR	W1, #8, W1
;__Lib_MathDouble.c,902 :: 		
0x03B6	0x708408  	IOR	W1, W8, W8
;__Lib_MathDouble.c,903 :: 		
0x03B8	0x070024  	RCALL	MulFP__fpack
;__Lib_MathDouble.c,904 :: 		
MulFP_return0_1:
;__Lib_MathDouble.c,905 :: 		
0x03BA	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,906 :: 		
0x03BC	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,907 :: 		
0x03BE	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,908 :: 		
0x03C0	0x370019  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,909 :: 		
MulFP_aisinfinite:
;__Lib_MathDouble.c,910 :: 		
0x03C2	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,911 :: 		
0x03C4	0x32001B  	BRA Z	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,912 :: 		
MulFP_return8_1:
;__Lib_MathDouble.c,913 :: 		
0x03C6	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,914 :: 		
MulFP_return2_1:
;__Lib_MathDouble.c,915 :: 		
0x03C8	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,916 :: 		
0x03CA	0x37FFF7  	BRA	MulFP_return0_1
;__Lib_MathDouble.c,917 :: 		
MulFP_bisinfinite:
;__Lib_MathDouble.c,918 :: 		
0x03CC	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,919 :: 		
0x03CE	0x3AFFFC  	BRA NZ	MulFP_return2_1
;__Lib_MathDouble.c,920 :: 		
0x03D0	0x370015  	BRA	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,921 :: 		
MulFP__funpack2:
;__Lib_MathDouble.c,922 :: 		
0x03D2	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,923 :: 		
0x03D4	0x07003C  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,924 :: 		
0x03D6	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,925 :: 		
0x03D8	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,926 :: 		
0x03DA	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,927 :: 		
0x03DC	0x070038  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,928 :: 		
0x03DE	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,929 :: 		
0x03E0	0x060000  	RETURN
;__Lib_MathDouble.c,930 :: 		
MulFP__fPropagateNaN:
;__Lib_MathDouble.c,931 :: 		
0x03E2	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,932 :: 		
0x03E4	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,933 :: 		
0x03E6	0x360005  	BRA LEU	MulFP_return0_2
;__Lib_MathDouble.c,934 :: 		
0x03E8	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,935 :: 		
0x03EA	0x360002  	BRA LEU	MulFP_return8_2
;__Lib_MathDouble.c,936 :: 		
0x03EC	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,937 :: 		
0x03EE	0x3A0001  	BRA NZ	MulFP_return0_2
;__Lib_MathDouble.c,938 :: 		
MulFP_return8_2:
;__Lib_MathDouble.c,939 :: 		
0x03F0	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,940 :: 		
MulFP_return0_2:
;__Lib_MathDouble.c,941 :: 		
0x03F2	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,942 :: 		
MulFP__fbopExit:
;__Lib_MathDouble.c,943 :: 		
0x03F4	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,944 :: 		
0x03F6	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,945 :: 		
0x03F8	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,946 :: 		
0x03FA	0x060000  	RETURN
;__Lib_MathDouble.c,947 :: 		
MulFP__fbopReturnNaN:
;__Lib_MathDouble.c,948 :: 		
0x03FC	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,949 :: 		
0x03FE	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,950 :: 		
0x0400	0x37FFF9  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,951 :: 		
MulFP__fpack:
;__Lib_MathDouble.c,952 :: 		
0x0402	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,953 :: 		
0x0404	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,954 :: 		
0x0406	0x3D000B  	BRA GE	MulFP_notsubnormal
;__Lib_MathDouble.c,955 :: 		
0x0408	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,956 :: 		
0x040A	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,957 :: 		
0x040C	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,958 :: 		
0x040E	0x34001D  	BRA LE	MulFP_zerosig
;__Lib_MathDouble.c,959 :: 		
MulFP_subnormal1:
;__Lib_MathDouble.c,960 :: 		
0x0410	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,961 :: 		
0x0412	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,962 :: 		
0x0414	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,963 :: 		
0x0416	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,964 :: 		
0x0418	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,965 :: 		
0x041A	0x3AFFFA  	BRA NZ	MulFP_subnormal1
;__Lib_MathDouble.c,966 :: 		
0x041C	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,967 :: 		
MulFP_notsubnormal:
;__Lib_MathDouble.c,968 :: 		
0x041E	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,969 :: 		
0x0420	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,970 :: 		
0x0422	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,971 :: 		
0x0424	0x320009  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,972 :: 		
0x0426	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,973 :: 		
0x0428	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,974 :: 		
0x042A	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,975 :: 		
0x042C	0x320005  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,976 :: 		
0x042E	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,977 :: 		
0x0430	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,978 :: 		
0x0432	0x3A0002  	BRA NZ	MulFP_packupandgo
;__Lib_MathDouble.c,979 :: 		
0x0434	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,980 :: 		
0x0436	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,981 :: 		
MulFP_packupandgo:
;__Lib_MathDouble.c,982 :: 		
0x0438	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,983 :: 		
0x043A	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,984 :: 		
0x043C	0x3D0005  	BRA GE	MulFP_overflow
;__Lib_MathDouble.c,985 :: 		
0x043E	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,986 :: 		
0x0440	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,987 :: 		
0x0442	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,988 :: 		
0x0444	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,989 :: 		
0x0446	0x060000  	RETURN
;__Lib_MathDouble.c,990 :: 		
MulFP_overflow:
;__Lib_MathDouble.c,991 :: 		
0x0448	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,992 :: 		
MulFP_zerosig:
;__Lib_MathDouble.c,993 :: 		
0x044A	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,994 :: 		
0x044C	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,995 :: 		
MulFP__funpack:
;__Lib_MathDouble.c,996 :: 		
0x044E	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,997 :: 		
0x0450	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,998 :: 		
0x0452	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,999 :: 		
0x0454	0x320008  	BRA Z	MulFP_zeroorsub
;__Lib_MathDouble.c,1000 :: 		
0x0456	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1001 :: 		
0x0458	0x320002  	BRA Z	MulFP_nanorinf
;__Lib_MathDouble.c,1002 :: 		
MulFP_finitereturn:
;__Lib_MathDouble.c,1003 :: 		
0x045A	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1004 :: 		
0x045C	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1005 :: 		
MulFP_nanorinf:
;__Lib_MathDouble.c,1006 :: 		
0x045E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1007 :: 		
0x0460	0x320001  	BRA Z	MulFP_infinite
;__Lib_MathDouble.c,1008 :: 		
0x0462	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1009 :: 		
MulFP_infinite:
;__Lib_MathDouble.c,1010 :: 		
0x0464	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1011 :: 		
MulFP_zeroorsub:
;__Lib_MathDouble.c,1012 :: 		
0x0466	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1013 :: 		
0x0468	0x3A0002  	BRA NZ	MulFP_subnormal2
;__Lib_MathDouble.c,1014 :: 		
0x046A	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1015 :: 		
MulFP_normalize:
;__Lib_MathDouble.c,1016 :: 		
0x046C	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1017 :: 		
MulFP_subnormal2:
;__Lib_MathDouble.c,1018 :: 		
0x046E	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1019 :: 		
0x0470	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1020 :: 		
0x0472	0x3BFFFC  	BRA NN	MulFP_normalize
;__Lib_MathDouble.c,1021 :: 		
0x0474	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1022 :: 		
0x0476	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1025 :: 		
the_end__Mul_FP:
;__Lib_MathDouble.c,1028 :: 		
L_end__Mul_FP:
0x0478	0xFA8000  	ULNK
0x047A	0x060000  	RETURN
; end of __Mul_FP
__Div_FP:
0x022C	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1050 :: 		
;__Lib_MathDouble.c,1052 :: 		
0x022E	0x070002  	RCALL	DivFP___divsf3
;__Lib_MathDouble.c,1053 :: 		
0x0230	0x00000004035E  	GOTO	the_end__Div_FP
;__Lib_MathDouble.c,1056 :: 		
DivFP___divsf3:
;__Lib_MathDouble.c,1057 :: 		
0x0234	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,1058 :: 		
0x0236	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,1059 :: 		
0x0238	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,1060 :: 		
0x023A	0x07003E  	RCALL	DivFP__funpack2
;__Lib_MathDouble.c,1061 :: 		
0x023C	0x330045  	BRA N	DivFP__fPropagateNaN
;__Lib_MathDouble.c,1062 :: 		
0x023E	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,1063 :: 		
0x0240	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1064 :: 		
0x0242	0x32002E  	BRA Z	DivFP_aisinfinite
;__Lib_MathDouble.c,1065 :: 		
0x0244	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1066 :: 		
0x0246	0x320033  	BRA Z	DivFP_returnZero
;__Lib_MathDouble.c,1067 :: 		
0x0248	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,1068 :: 		
0x024A	0x32002F  	BRA Z	DivFP_aiszero
;__Lib_MathDouble.c,1069 :: 		
0x024C	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1070 :: 		
0x024E	0x320031  	BRA Z	DivFP_returnInf
;__Lib_MathDouble.c,1071 :: 		
DivFP_finitenonzero:
;__Lib_MathDouble.c,1072 :: 		
0x0250	0x558585  	SUB	W11, W5, W11
;__Lib_MathDouble.c,1073 :: 		
0x0252	0xB007EB  	ADD	#126, W11
;__Lib_MathDouble.c,1074 :: 		
0x0254	0x200009  	MOV	#0, W9
;__Lib_MathDouble.c,1075 :: 		
0x0256	0x200408  	MOV	#64, W8
;__Lib_MathDouble.c,1076 :: 		
0x0258	0x370005  	BRA	DivFP_diventry
;__Lib_MathDouble.c,1077 :: 		
DivFP_divnext:
;__Lib_MathDouble.c,1078 :: 		
0x025A	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1079 :: 		
0x025C	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1080 :: 		
0x025E	0x31000A  	BRA C	DivFP_divdone
;__Lib_MathDouble.c,1081 :: 		
DivFP_divloop:
;__Lib_MathDouble.c,1082 :: 		
0x0260	0x430306  	ADD	W6, W6, W6
;__Lib_MathDouble.c,1083 :: 		
0x0262	0x4B8387  	ADDC	W7, W7, W7
;__Lib_MathDouble.c,1084 :: 		
DivFP_diventry:
;__Lib_MathDouble.c,1085 :: 		
0x0264	0x530100  	SUB	W6, W0, W2
;__Lib_MathDouble.c,1086 :: 		
0x0266	0x5B8181  	SUBB	W7, W1, W3
;__Lib_MathDouble.c,1087 :: 		
0x0268	0x33FFF8  	BRA N	DivFP_divnext
;__Lib_MathDouble.c,1088 :: 		
0x026A	0xBE8302  	MOV.D	W2, W6
;__Lib_MathDouble.c,1089 :: 		
0x026C	0xA80010  	BSET	W8, #0
;__Lib_MathDouble.c,1090 :: 		
0x026E	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1091 :: 		
0x0270	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1092 :: 		
0x0272	0x39FFF6  	BRA NC	DivFP_divloop
;__Lib_MathDouble.c,1093 :: 		
DivFP_divdone:
;__Lib_MathDouble.c,1094 :: 		
0x0274	0xDD39C6  	SL	W7, #6, W3
;__Lib_MathDouble.c,1095 :: 		
0x0276	0x730183  	IOR	W6, W3, W3
;__Lib_MathDouble.c,1096 :: 		
0x0278	0x320001  	BRA Z	DivFP_stickyok
;__Lib_MathDouble.c,1097 :: 		
0x027A	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,1098 :: 		
DivFP_stickyok:
;__Lib_MathDouble.c,1099 :: 		
0x027C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1100 :: 		
0x027E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1101 :: 		
0x0280	0xA39809  	BTST.Z	W9, #9
;__Lib_MathDouble.c,1102 :: 		
0x0282	0x320005  	BRA Z	DivFP_guardused
;__Lib_MathDouble.c,1103 :: 		
0x0284	0xA70008  	BTSC	W8, #0
;__Lib_MathDouble.c,1104 :: 		
0x0286	0xA80006  	BSET	W3, #0
;__Lib_MathDouble.c,1105 :: 		
0x0288	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1106 :: 		
0x028A	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1107 :: 		
0x028C	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1108 :: 		
DivFP_guardused:
;__Lib_MathDouble.c,1109 :: 		
0x028E	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1110 :: 		
0x0290	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1111 :: 		
0x0292	0xEB0100  	CLR	W2
;__Lib_MathDouble.c,1112 :: 		
0x0294	0xD28102  	RLC	W2, W2
;__Lib_MathDouble.c,1113 :: 		
0x0296	0x070028  	RCALL	DivFP__fpack
;__Lib_MathDouble.c,1114 :: 		
DivFP_return0_1:
;__Lib_MathDouble.c,1115 :: 		
0x0298	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,1116 :: 		
0x029A	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,1117 :: 		
0x029C	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,1118 :: 		
0x029E	0x37001D  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1119 :: 		
DivFP_aisinfinite:
;__Lib_MathDouble.c,1120 :: 		
0x02A0	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1121 :: 		
0x02A2	0x32001F  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1122 :: 		
DivFP_return8_1:
;__Lib_MathDouble.c,1123 :: 		
0x02A4	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,1124 :: 		
DivFP_return2_1:
;__Lib_MathDouble.c,1125 :: 		
0x02A6	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1126 :: 		
0x02A8	0x37FFF7  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1127 :: 		
DivFP_aiszero:
;__Lib_MathDouble.c,1128 :: 		
0x02AA	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1129 :: 		
0x02AC	0x32001A  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1130 :: 		
DivFP_returnZero:
;__Lib_MathDouble.c,1131 :: 		
0x02AE	0xB80060  	MUL.UU	W0, #0, W0
;__Lib_MathDouble.c,1132 :: 		
0x02B0	0x37FFF3  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1133 :: 		
DivFP_returnInf:
;__Lib_MathDouble.c,1134 :: 		
0x02B2	0x200000  	MOV	#0, W0
;__Lib_MathDouble.c,1135 :: 		
0x02B4	0x27F801  	MOV	#32640, W1
;__Lib_MathDouble.c,1136 :: 		
0x02B6	0x37FFF0  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1137 :: 		
DivFP__funpack2:
;__Lib_MathDouble.c,1138 :: 		
0x02B8	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,1139 :: 		
0x02BA	0x07003C  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1140 :: 		
0x02BC	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,1141 :: 		
0x02BE	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,1142 :: 		
0x02C0	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1143 :: 		
0x02C2	0x070038  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1144 :: 		
0x02C4	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,1145 :: 		
0x02C6	0x060000  	RETURN
;__Lib_MathDouble.c,1146 :: 		
DivFP__fPropagateNaN:
;__Lib_MathDouble.c,1147 :: 		
0x02C8	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1148 :: 		
0x02CA	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1149 :: 		
0x02CC	0x360005  	BRA LEU	DivFP_return0
;__Lib_MathDouble.c,1150 :: 		
0x02CE	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1151 :: 		
0x02D0	0x360002  	BRA LEU	DivFP_return8
;__Lib_MathDouble.c,1152 :: 		
0x02D2	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,1153 :: 		
0x02D4	0x3A0001  	BRA NZ	DivFP_return0
;__Lib_MathDouble.c,1154 :: 		
DivFP_return8:
;__Lib_MathDouble.c,1155 :: 		
0x02D6	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,1156 :: 		
DivFP_return0:
;__Lib_MathDouble.c,1157 :: 		
0x02D8	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,1158 :: 		
DivFP__fbopExit:
;__Lib_MathDouble.c,1159 :: 		
0x02DA	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,1160 :: 		
0x02DC	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,1161 :: 		
0x02DE	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,1162 :: 		
0x02E0	0x060000  	RETURN
;__Lib_MathDouble.c,1163 :: 		
DivFP__fbopReturnNaN:
;__Lib_MathDouble.c,1164 :: 		
0x02E2	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,1165 :: 		
0x02E4	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,1166 :: 		
0x02E6	0x37FFF9  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1167 :: 		
DivFP__fpack:
;__Lib_MathDouble.c,1168 :: 		
0x02E8	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,1169 :: 		
0x02EA	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,1170 :: 		
0x02EC	0x3D000B  	BRA GE	DivFP_notsubnormal
;__Lib_MathDouble.c,1171 :: 		
0x02EE	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,1172 :: 		
0x02F0	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,1173 :: 		
0x02F2	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,1174 :: 		
0x02F4	0x34001D  	BRA LE	DivFP_zerosig
;__Lib_MathDouble.c,1175 :: 		
DivFP_subnormal:
;__Lib_MathDouble.c,1176 :: 		
0x02F6	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,1177 :: 		
0x02F8	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,1178 :: 		
0x02FA	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1179 :: 		
0x02FC	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1180 :: 		
0x02FE	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,1181 :: 		
0x0300	0x3AFFFA  	BRA NZ	DivFP_subnormal
;__Lib_MathDouble.c,1182 :: 		
0x0302	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,1183 :: 		
DivFP_notsubnormal:
;__Lib_MathDouble.c,1184 :: 		
0x0304	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,1185 :: 		
0x0306	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,1186 :: 		
0x0308	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,1187 :: 		
0x030A	0x320009  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1188 :: 		
0x030C	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,1189 :: 		
0x030E	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,1190 :: 		
0x0310	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,1191 :: 		
0x0312	0x320005  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1192 :: 		
0x0314	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1193 :: 		
0x0316	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,1194 :: 		
0x0318	0x3A0002  	BRA NZ	DivFP_packupandgo
;__Lib_MathDouble.c,1195 :: 		
0x031A	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1196 :: 		
0x031C	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1197 :: 		
DivFP_packupandgo:
;__Lib_MathDouble.c,1198 :: 		
0x031E	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,1199 :: 		
0x0320	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,1200 :: 		
0x0322	0x3D0005  	BRA GE	DivFP_overfloW
;__Lib_MathDouble.c,1201 :: 		
0x0324	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,1202 :: 		
0x0326	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,1203 :: 		
0x0328	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,1204 :: 		
0x032A	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,1205 :: 		
0x032C	0x060000  	RETURN
;__Lib_MathDouble.c,1206 :: 		
DivFP_overfloW:
;__Lib_MathDouble.c,1207 :: 		
0x032E	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,1208 :: 		
DivFP_zerosig:
;__Lib_MathDouble.c,1209 :: 		
0x0330	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,1210 :: 		
0x0332	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,1211 :: 		
DivFP__funpack:
;__Lib_MathDouble.c,1212 :: 		
0x0334	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,1213 :: 		
0x0336	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,1214 :: 		
0x0338	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,1215 :: 		
0x033A	0x320008  	BRA Z	DivFP_zeroorsub
;__Lib_MathDouble.c,1216 :: 		
0x033C	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1217 :: 		
0x033E	0x320002  	BRA Z	DivFP_nanorinf
;__Lib_MathDouble.c,1218 :: 		
DivFP_finitereturn:
;__Lib_MathDouble.c,1219 :: 		
0x0340	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1220 :: 		
0x0342	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1221 :: 		
DivFP_nanorinf:
;__Lib_MathDouble.c,1222 :: 		
0x0344	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1223 :: 		
0x0346	0x320001  	BRA Z	DivFP_infinite
;__Lib_MathDouble.c,1224 :: 		
0x0348	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1225 :: 		
DivFP_infinite:
;__Lib_MathDouble.c,1226 :: 		
0x034A	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1227 :: 		
DivFP_zeroorsub:
;__Lib_MathDouble.c,1228 :: 		
0x034C	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1229 :: 		
0x034E	0x3A0002  	BRA NZ	DivFP_subnormal2
;__Lib_MathDouble.c,1230 :: 		
0x0350	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1231 :: 		
DivFP_normalize:
;__Lib_MathDouble.c,1232 :: 		
0x0352	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1233 :: 		
DivFP_subnormal2:
;__Lib_MathDouble.c,1234 :: 		
0x0354	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1235 :: 		
0x0356	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1236 :: 		
0x0358	0x3BFFFC  	BRA NN	DivFP_normalize
;__Lib_MathDouble.c,1237 :: 		
0x035A	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1238 :: 		
0x035C	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1241 :: 		
the_end__Div_FP:
;__Lib_MathDouble.c,1243 :: 		
L_end__Div_FP:
0x035E	0xFA8000  	ULNK
0x0360	0x060000  	RETURN
; end of __Div_FP
__Float2Longint:
0x0678	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,479 :: 		
;__Lib_MathDouble.c,481 :: 		
0x067A	0x070002  	RCALL	Float2Longint__fixsfsi
;__Lib_MathDouble.c,482 :: 		
0x067C	0x0000000406EC  	GOTO	the_end__Float2Longint
;__Lib_MathDouble.c,486 :: 		
Float2Longint__fixsfsi:
;__Lib_MathDouble.c,487 :: 		
0x0680	0xBE8100  	MOV.D	W0, W2
;__Lib_MathDouble.c,488 :: 		
0x0682	0x07001F  	RCALL	Float2Longint__funpack
;__Lib_MathDouble.c,489 :: 		
0x0684	0xA77004  	BTSC	W4, #7
;__Lib_MathDouble.c,490 :: 		
0x0686	0xA1F003  	BCLR	W3, #15
;__Lib_MathDouble.c,491 :: 		
0x0688	0xB10965  	SUB	#150, W5
;__Lib_MathDouble.c,492 :: 		
0x068A	0x320016  	BRA Z	Float2Longint_setsign
;__Lib_MathDouble.c,493 :: 		
0x068C	0x35000D  	BRA LT	Float2Longint_shiftright
;__Lib_MathDouble.c,494 :: 		
0x068E	0xE12868  	CP	W5, #8
;__Lib_MathDouble.c,495 :: 		
0x0690	0x350006  	BRA LT	Float2Longint_shiftleft
;__Lib_MathDouble.c,496 :: 		
0x0692	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,497 :: 		
0x0694	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,498 :: 		
0x0696	0xE20006  	CP0	W3
;__Lib_MathDouble.c,499 :: 		
0x0698	0x3B0013  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,500 :: 		
0x069A	0x280001  	MOV	#32768, W1
;__Lib_MathDouble.c,501 :: 		
0x069C	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,502 :: 		
Float2Longint_shiftleft:
;__Lib_MathDouble.c,503 :: 		
0x069E	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,504 :: 		
0x06A0	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,505 :: 		
0x06A2	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,506 :: 		
0x06A4	0x3AFFFC  	BRA NZ	Float2Longint_shiftleft
;__Lib_MathDouble.c,507 :: 		
0x06A6	0x370008  	BRA	Float2Longint_setsign
;__Lib_MathDouble.c,508 :: 		
Float2Longint_shiftright:
;__Lib_MathDouble.c,509 :: 		
0x06A8	0x428FF8  	ADD	W5, #24, [W15]
;__Lib_MathDouble.c,510 :: 		
0x06AA	0x3C0002  	BRA GT	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,511 :: 		
0x06AC	0xEB0080  	CLR	W1
;__Lib_MathDouble.c,512 :: 		
0x06AE	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,513 :: 		
Float2Longint_shiftrightloop:
;__Lib_MathDouble.c,514 :: 		
0x06B0	0xD10081  	LSR	W1, W1
;__Lib_MathDouble.c,515 :: 		
0x06B2	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.c,516 :: 		
0x06B4	0xE80285  	INC	W5, W5
;__Lib_MathDouble.c,517 :: 		
0x06B6	0x3AFFFC  	BRA NZ	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,518 :: 		
Float2Longint_setsign:
;__Lib_MathDouble.c,519 :: 		
0x06B8	0xE20006  	CP0	W3
;__Lib_MathDouble.c,520 :: 		
0x06BA	0x3B0002  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,521 :: 		
0x06BC	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,522 :: 		
0x06BE	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,523 :: 		
Float2Longint_exit:
;__Lib_MathDouble.c,524 :: 		
0x06C0	0x060000  	RETURN
;__Lib_MathDouble.c,525 :: 		
Float2Longint__funpack:
;__Lib_MathDouble.c,526 :: 		
0x06C2	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,527 :: 		
0x06C4	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,528 :: 		
0x06C6	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,529 :: 		
0x06C8	0x320008  	BRA Z	Float2Longint_zeroorsub
;__Lib_MathDouble.c,530 :: 		
0x06CA	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,531 :: 		
0x06CC	0x320002  	BRA Z	Float2Longint_nanorinf
;__Lib_MathDouble.c,532 :: 		
Float2Longint_finitereturn:
;__Lib_MathDouble.c,533 :: 		
0x06CE	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,534 :: 		
0x06D0	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,535 :: 		
Float2Longint_nanorinf:
;__Lib_MathDouble.c,536 :: 		
0x06D2	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,537 :: 		
0x06D4	0x320001  	BRA Z	Float2Longint_infinite
;__Lib_MathDouble.c,538 :: 		
0x06D6	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,539 :: 		
Float2Longint_infinite:
;__Lib_MathDouble.c,540 :: 		
0x06D8	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,541 :: 		
Float2Longint_zeroorsub:
;__Lib_MathDouble.c,542 :: 		
0x06DA	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,543 :: 		
0x06DC	0x3A0002  	BRA NZ	Float2Longint_subnormal
;__Lib_MathDouble.c,544 :: 		
0x06DE	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,545 :: 		
Float2Longint_normalize:
;__Lib_MathDouble.c,546 :: 		
0x06E0	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,547 :: 		
Float2Longint_subnormal:
;__Lib_MathDouble.c,548 :: 		
0x06E2	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,549 :: 		
0x06E4	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,550 :: 		
0x06E6	0x3BFFFC  	BRA NN	Float2Longint_normalize
;__Lib_MathDouble.c,551 :: 		
0x06E8	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,552 :: 		
0x06EA	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,555 :: 		
the_end__Float2Longint:
;__Lib_MathDouble.c,557 :: 		
L_end__Float2Longint:
0x06EC	0xFA8000  	ULNK
0x06EE	0x060000  	RETURN
; end of __Float2Longint
_getTimerPeriod:
0x0826	0xFA0008  	LNK	#8
;dspic.c,206 :: 		unsigned int getTimerPeriod(double timePeriod, unsigned char prescalerIndex) {
;dspic.c,207 :: 		return (unsigned int) ((timePeriod * 1000000) / (INSTRUCTION_PERIOD * PRESCALER_VALUES[prescalerIndex]));
0x0828	0x781F8C  	PUSH	W12
0x082A	0xBE000A  	MOV.D	W10, W0
0x082C	0x224002  	MOV	#9216, W2
0x082E	0x249743  	MOV	#18804, W3
0x0830	0x07FD98  	RCALL	__Mul_FP
0x0832	0x78064F  	POP	W12
0x0834	0x980720  	MOV	W0, [W14+4]
0x0836	0x980731  	MOV	W1, [W14+6]
0x0838	0xFB800C  	ZE	W12, W0
0x083A	0xDD00C1  	SL	W0, #1, W1
0x083C	0x295FC0  	MOV	#lo_addr(_PRESCALER_VALUES), W0
0x083E	0x400101  	ADD	W0, W1, W2
0x0840	0x780012  	MOV	[W2], W0
0x0842	0xEB0080  	CLR	W1
0x0844	0x07FF55  	RCALL	__Long2Float
0x0846	0x200002  	MOV	#0, W2
0x0848	0x23E003  	MOV	#15872, W3
0x084A	0x07FD8B  	RCALL	__Mul_FP
0x084C	0x980700  	MOV	W0, [W14+0]
0x084E	0x980711  	MOV	W1, [W14+2]
0x0850	0x90002E  	MOV	[W14+4], W0
0x0852	0x9000BE  	MOV	[W14+6], W1
0x0854	0xBE9F82  	PUSH.D	W2
0x0856	0x90010E  	MOV	[W14+0], W2
0x0858	0x90019E  	MOV	[W14+2], W3
0x085A	0x07FCE8  	RCALL	__Div_FP
0x085C	0xBE014F  	POP.D	W2
0x085E	0x07FF0C  	RCALL	__Float2Longint
;dspic.c,208 :: 		}
L_end_getTimerPeriod:
0x0860	0xFA8000  	ULNK
0x0862	0x060000  	RETURN
; end of _getTimerPeriod
__Long2Float:
0x06F0	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,104 :: 		
;__Lib_MathDouble.c,106 :: 		
0x06F2	0x070002  	RCALL	LL_intro_Long2Float
;__Lib_MathDouble.c,107 :: 		
0x06F4	0x0000000407A2  	GOTO	the_end__Long2Float
;__Lib_MathDouble.c,109 :: 		
LL_intro_Long2Float:
;__Lib_MathDouble.c,110 :: 		
0x06F8	0xE20004  	CP0	W2
;__Lib_MathDouble.c,111 :: 		
0x06FA	0x3A0006  	BRA NZ	Longint2Float__floatsisf
;__Lib_MathDouble.c,113 :: 		
Longword2Float__floatuisf:
;__Lib_MathDouble.c,114 :: 		
0x06FC	0xEB0500  	CLR	W10
;__Lib_MathDouble.c,115 :: 		
0x06FE	0xE20002  	CP0	W1
;__Lib_MathDouble.c,116 :: 		
0x0700	0x3E000F  	BRA GTU	Long2Float_notspecial
;__Lib_MathDouble.c,117 :: 		
0x0702	0xE20000  	CP0	W0
;__Lib_MathDouble.c,118 :: 		
0x0704	0x320027  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,119 :: 		
0x0706	0x37000C  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,121 :: 		
Longint2Float__floatsisf:
;__Lib_MathDouble.c,122 :: 		
0x0708	0x8800A1  	MOV	W1, W10
;__Lib_MathDouble.c,123 :: 		
0x070A	0xE20002  	CP0	W1
;__Lib_MathDouble.c,124 :: 		
0x070C	0x350004  	BRA LT	Longint2Float_negative
;__Lib_MathDouble.c,125 :: 		
0x070E	0x3C0008  	BRA GT	Long2Float_notspecial
;__Lib_MathDouble.c,126 :: 		
0x0710	0xE20000  	CP0	W0
;__Lib_MathDouble.c,127 :: 		
0x0712	0x320020  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,128 :: 		
0x0714	0x370005  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,129 :: 		
Longint2Float_negative:
;__Lib_MathDouble.c,130 :: 		
0x0716	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,131 :: 		
0x0718	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,132 :: 		
0x071A	0x3B0002  	BRA NN	Long2Float_notspecial
;__Lib_MathDouble.c,133 :: 		
0x071C	0x2CF001  	MOV	#52992, W1
;__Lib_MathDouble.c,134 :: 		
0x071E	0x37001A  	BRA	Long2Float_return0
;__Lib_MathDouble.c,136 :: 		
Long2Float_notspecial:
;__Lib_MathDouble.c,137 :: 		
0x0720	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,138 :: 		
0x0722	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.c,139 :: 		
0x0724	0x20096B  	MOV	#150, W11
;__Lib_MathDouble.c,140 :: 		
0x0726	0xCF8209  	FF1L	W9, W4
;__Lib_MathDouble.c,141 :: 		
0x0728	0x390002  	BRA NC	Long2Float_fixshift
;__Lib_MathDouble.c,142 :: 		
0x072A	0xCF8208  	FF1L	W8, W4
;__Lib_MathDouble.c,143 :: 		
0x072C	0xB04104  	ADD.B	#16, W4
;__Lib_MathDouble.c,144 :: 		
Long2Float_fixshift:
;__Lib_MathDouble.c,145 :: 		
0x072E	0x524269  	SUB.B	W4, #9, W4
;__Lib_MathDouble.c,146 :: 		
0x0730	0x32000E  	BRA Z	Long2Float_round
;__Lib_MathDouble.c,147 :: 		
0x0732	0x3B0008  	BRA NN	Long2Float_shiftleft
;__Lib_MathDouble.c,148 :: 		
Long2Float_shiftright:
;__Lib_MathDouble.c,149 :: 		
0x0734	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,150 :: 		
0x0736	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,151 :: 		
0x0738	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,152 :: 		
0x073A	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,153 :: 		
0x073C	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,154 :: 		
0x073E	0xE84204  	INC.B	W4, W4
;__Lib_MathDouble.c,155 :: 		
0x0740	0x3AFFF9  	BRA NZ	Long2Float_shiftright
;__Lib_MathDouble.c,156 :: 		
0x0742	0x370005  	BRA	Long2Float_round
;__Lib_MathDouble.c,157 :: 		
Long2Float_shiftleft:
;__Lib_MathDouble.c,158 :: 		
0x0744	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,159 :: 		
0x0746	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,160 :: 		
0x0748	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,161 :: 		
0x074A	0xE94204  	DEC.B	W4, W4
;__Lib_MathDouble.c,162 :: 		
0x074C	0x3AFFFB  	BRA NZ	Long2Float_shiftleft
;__Lib_MathDouble.c,163 :: 		
Long2Float_round:
;__Lib_MathDouble.c,164 :: 		
0x074E	0x070003  	RCALL	Long2Float__fpack
;__Lib_MathDouble.c,165 :: 		
0x0750	0xA7F00A  	BTSC	W10, #15
;__Lib_MathDouble.c,166 :: 		
0x0752	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,167 :: 		
Long2Float_return0:
;__Lib_MathDouble.c,168 :: 		
0x0754	0x060000  	RETURN
;__Lib_MathDouble.c,169 :: 		
Long2Float__fpack:
;__Lib_MathDouble.c,170 :: 		
0x0756	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,171 :: 		
0x0758	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,172 :: 		
0x075A	0x3D000B  	BRA GE	Long2Float_notsubnormal
;__Lib_MathDouble.c,173 :: 		
0x075C	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,174 :: 		
0x075E	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,175 :: 		
0x0760	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,176 :: 		
0x0762	0x34001D  	BRA LE	Long2Float_zerosig
;__Lib_MathDouble.c,177 :: 		
Long2Float_subnormal:
;__Lib_MathDouble.c,178 :: 		
0x0764	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,179 :: 		
0x0766	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,180 :: 		
0x0768	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,181 :: 		
0x076A	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,182 :: 		
0x076C	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,183 :: 		
0x076E	0x3AFFFA  	BRA NZ	Long2Float_subnormal
;__Lib_MathDouble.c,184 :: 		
0x0770	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,185 :: 		
Long2Float_notsubnormal:
;__Lib_MathDouble.c,186 :: 		
0x0772	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,187 :: 		
0x0774	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,188 :: 		
0x0776	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,189 :: 		
0x0778	0x320009  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,190 :: 		
0x077A	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,191 :: 		
0x077C	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,192 :: 		
0x077E	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,193 :: 		
0x0780	0x320005  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,194 :: 		
0x0782	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,195 :: 		
0x0784	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,196 :: 		
0x0786	0x3A0002  	BRA NZ	Long2Float_packupandgo
;__Lib_MathDouble.c,197 :: 		
0x0788	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,198 :: 		
0x078A	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,199 :: 		
Long2Float_packupandgo:
;__Lib_MathDouble.c,200 :: 		
0x078C	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,201 :: 		
0x078E	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,202 :: 		
0x0790	0x3D0005  	BRA GE	Long2Float_overflow
;__Lib_MathDouble.c,203 :: 		
0x0792	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,204 :: 		
0x0794	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,205 :: 		
0x0796	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,206 :: 		
0x0798	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,207 :: 		
0x079A	0x060000  	RETURN
;__Lib_MathDouble.c,208 :: 		
Long2Float_overflow:
;__Lib_MathDouble.c,209 :: 		
0x079C	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,210 :: 		
Long2Float_zerosig:
;__Lib_MathDouble.c,211 :: 		
0x079E	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,212 :: 		
0x07A0	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,215 :: 		
the_end__Long2Float:
;__Lib_MathDouble.c,218 :: 		
L_end__Long2Float:
0x07A2	0xFA8000  	ULNK
0x07A4	0x060000  	RETURN
; end of __Long2Float
0x1610	0x208001  	MOV	#lo_addr(_can_txPriority), W1
0x1612	0x296040  	MOV	#38404, W0
0x1614	0x090001  	REPEAT	#1
0x1616	0x7818B0  	MOV	[W0++], [W1++]
0x1618	0x7858B0  	MOV.B	[W0++], [W1++]
0x161A	0x208061  	MOV	#lo_addr(_error_flag), W1
0x161C	0x295F20  	MOV	#38386, W0
0x161E	0x090004  	REPEAT	#4
0x1620	0x7818B0  	MOV	[W0++], [W1++]
0x1622	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1624	0x2960D0  	MOV	#38413, W0
0x1626	0x7858B0  	MOV.B	[W0++], [W1++]
0x1628	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x162A	0x2960E0  	MOV	#38414, W0
0x162C	0x7858B0  	MOV.B	[W0++], [W1++]
0x162E	0x208121  	MOV	#lo_addr(_timer2_counter), W1
0x1630	0x2960A0  	MOV	#38410, W0
0x1632	0x090000  	REPEAT	#0
0x1634	0x7818B0  	MOV	[W0++], [W1++]
0x1636	0x208111  	MOV	#lo_addr(_brake_counter), W1
0x1638	0x296090  	MOV	#38409, W0
0x163A	0x7858B0  	MOV.B	[W0++], [W1++]
0x163C	0x208141  	MOV	#lo_addr(_is_requested_calibration), W1
0x163E	0x2960C0  	MOV	#38412, W0
0x1640	0x7858B0  	MOV.B	[W0++], [W1++]
0x1642	0x060000  	RETURN
_counter_quarter_turn_match:
0x1594	0xF80034  	PUSH	PSVPAG
0x1596	0xF80036  	PUSH	RCOUNT
0x1598	0x781F80  	PUSH	W0
0x159A	0x200020  	MOV	#2, W0
0x159C	0x09000C  	REPEAT	#12
0x159E	0x781FB0  	PUSH	[W0++]
;motor.c,14 :: 		void counter_quarter_turn_match() iv IVT_ADDR_QEIINTERRUPT ics ICS_AUTO {       //interrupt on match of MAXCNT or on match on 0
;motor.c,15 :: 		switch(DIRECTION_REGISTER){
0x15A0	0x370009  	BRA	L_counter_quarter_turn_match83
;motor.c,16 :: 		case 0:  //negative direction
L_counter_quarter_turn_match85:
;motor.c,17 :: 		motor_current_position--;
0x15A2	0x200011  	MOV	#1, W1
0x15A4	0x208300  	MOV	#lo_addr(_motor_current_position), W0
0x15A6	0x108810  	SUBR	W1, [W0], [W0]
;motor.c,18 :: 		break;
0x15A8	0x370010  	BRA	L_counter_quarter_turn_match84
;motor.c,19 :: 		case 1:  //positive direction
L_counter_quarter_turn_match86:
;motor.c,20 :: 		motor_current_position++;
0x15AA	0x200011  	MOV	#1, W1
0x15AC	0x208300  	MOV	#lo_addr(_motor_current_position), W0
0x15AE	0x408810  	ADD	W1, [W0], [W0]
;motor.c,21 :: 		break;
0x15B0	0x37000C  	BRA	L_counter_quarter_turn_match84
;motor.c,22 :: 		default:
L_counter_quarter_turn_match87:
;motor.c,23 :: 		break;
0x15B2	0x37000B  	BRA	L_counter_quarter_turn_match84
;motor.c,24 :: 		}
L_counter_quarter_turn_match83:
0x15B4	0xEF6000  	CLR.B	W0
0x15B6	0xAF6123  	BTSC	UPDN_bit, BitPos(UPDN_bit+0)
0x15B8	0xEC6000  	INC.B	W0
0x15BA	0xE10460  	CP.B	W0, #0
0x15BC	0x32FFF2  	BRA Z	L_counter_quarter_turn_match85
L__counter_quarter_turn_match284:
0x15BE	0xEF6000  	CLR.B	W0
0x15C0	0xAF6123  	BTSC	UPDN_bit, BitPos(UPDN_bit+0)
0x15C2	0xEC6000  	INC.B	W0
0x15C4	0xE10461  	CP.B	W0, #1
0x15C6	0x32FFF1  	BRA Z	L_counter_quarter_turn_match86
L__counter_quarter_turn_match285:
0x15C8	0x37FFF4  	BRA	L_counter_quarter_turn_match87
L_counter_quarter_turn_match84:
;motor.c,25 :: 		if (motor_current_position == motor_target_position)                        //Check for target reached
0x15CA	0x804181  	MOV	_motor_current_position, W1
0x15CC	0x208320  	MOV	#lo_addr(_motor_target_position), W0
0x15CE	0xE10810  	CP	W1, [W0]
0x15D0	0x3A0008  	BRA NZ	L_counter_quarter_turn_match88
L__counter_quarter_turn_match286:
;motor.c,27 :: 		brake_counter = 0;                                                      //Reset the counter for braking period lenght
0x15D2	0x208111  	MOV	#lo_addr(_brake_counter), W1
0x15D4	0xEF2000  	CLR	W0
0x15D6	0x784880  	MOV.B	W0, [W1]
;motor.c,28 :: 		REVERSE = OFF;                          //Shorts the motor terminals
0x15D8	0xA962DC  	BCLR	LATE3_bit, BitPos(LATE3_bit+0)
;motor.c,29 :: 		FORWARD = OFF;
0x15DA	0xA982DC  	BCLR	LATE4_bit, BitPos(LATE4_bit+0)
;motor.c,30 :: 		ebb_current_state = EBB_BRAKING;                                        //Set the current state
0x15DC	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x15DE	0xB3C030  	MOV.B	#3, W0
0x15E0	0x784880  	MOV.B	W0, [W1]
;motor.c,31 :: 		}
L_counter_quarter_turn_match88:
;motor.c,32 :: 		IFS2bits.QEIIF = 0;                                                         //Reset Interrupt Flag
0x15E2	0xA90089  	BCLR	IFS2bits, #8
;motor.c,33 :: 		}
L_end_counter_quarter_turn_match:
0x15E4	0x2001A0  	MOV	#26, W0
0x15E6	0x09000C  	REPEAT	#12
0x15E8	0x78104F  	POP	[W0--]
0x15EA	0x78004F  	POP	W0
0x15EC	0xF90036  	POP	RCOUNT
0x15EE	0xF90034  	POP	PSVPAG
0x15F0	0x064000  	RETFIE
; end of _counter_quarter_turn_match
_CAN_Interrupt:
0x14A6	0xFA0016  	LNK	#22
0x14A8	0xF80034  	PUSH	PSVPAG
0x14AA	0xF80036  	PUSH	RCOUNT
0x14AC	0x781F80  	PUSH	W0
0x14AE	0x200020  	MOV	#2, W0
0x14B0	0x09000C  	REPEAT	#12
0x14B2	0x781FB0  	PUSH	[W0++]
;EBB_DPX.c,188 :: 		onCanInterrupt {
;EBB_DPX.c,194 :: 		Can_read(&CAN_id, CAN_datain, &CAN_dataLen, &CAN_flags);
0x14B4	0x781F8A  	PUSH	W10
0x14B6	0x781F8B  	PUSH	W11
0x14B8	0x781F8C  	PUSH	W12
0x14BA	0x781F8D  	PUSH	W13
0x14BC	0x4701EE  	ADD	W14, #14, W3
0x14BE	0x47016C  	ADD	W14, #12, W2
0x14C0	0x4700E4  	ADD	W14, #4, W1
0x14C2	0x470060  	ADD	W14, #0, W0
0x14C4	0x780683  	MOV	W3, W13
0x14C6	0x780602  	MOV	W2, W12
0x14C8	0x780581  	MOV	W1, W11
0x14CA	0x780500  	MOV	W0, W10
0x14CC	0x07FF43  	RCALL	_Can_read
;EBB_DPX.c,196 :: 		if (CAN_dataLen >= 2) {
0x14CE	0x90006E  	MOV	[W14+12], W0
0x14D0	0xE10062  	CP	W0, #2
0x14D2	0x39000A  	BRA LTU	L_CAN_Interrupt168
L__CAN_Interrupt337:
;EBB_DPX.c,197 :: 		firstInt = (unsigned int) ((CAN_datain[0] << 8) | (CAN_datain[1] & 0xFF));
0x14D4	0x4700E4  	ADD	W14, #4, W1
0x14D6	0x784011  	MOV.B	[W1], W0
0x14D8	0xFB8000  	ZE	W0, W0
0x14DA	0xDD0148  	SL	W0, #8, W2
0x14DC	0x408061  	ADD	W1, #1, W0
0x14DE	0xFB8090  	ZE	[W0], W1
0x14E0	0x200FF0  	MOV	#255, W0
0x14E2	0x608080  	AND	W1, W0, W1
0x14E4	0x470070  	ADD	W14, #16, W0
0x14E6	0x710801  	IOR	W2, W1, [W0]
;EBB_DPX.c,198 :: 		}
L_CAN_Interrupt168:
;EBB_DPX.c,199 :: 		if (CAN_dataLen >= 4) {
0x14E8	0x90006E  	MOV	[W14+12], W0
0x14EA	0xE10064  	CP	W0, #4
0x14EC	0x39000B  	BRA LTU	L_CAN_Interrupt169
L__CAN_Interrupt338:
;EBB_DPX.c,200 :: 		secondInt = (unsigned int) ((CAN_datain[2] << 8) | (CAN_datain[3] & 0xFF));
0x14EE	0x4700E4  	ADD	W14, #4, W1
0x14F0	0x408062  	ADD	W1, #2, W0
0x14F2	0x784010  	MOV.B	[W0], W0
0x14F4	0xFB8000  	ZE	W0, W0
0x14F6	0xDD0148  	SL	W0, #8, W2
0x14F8	0x408063  	ADD	W1, #3, W0
0x14FA	0xFB8090  	ZE	[W0], W1
0x14FC	0x200FF0  	MOV	#255, W0
0x14FE	0x608080  	AND	W1, W0, W1
0x1500	0x470072  	ADD	W14, #18, W0
0x1502	0x710801  	IOR	W2, W1, [W0]
;EBB_DPX.c,201 :: 		}
L_CAN_Interrupt169:
;EBB_DPX.c,202 :: 		if (CAN_dataLen >= 6) {
0x1504	0x90006E  	MOV	[W14+12], W0
0x1506	0xE10066  	CP	W0, #6
0x1508	0x39000B  	BRA LTU	L_CAN_Interrupt170
L__CAN_Interrupt339:
;EBB_DPX.c,203 :: 		thirdInt = (unsigned int) ((CAN_datain[4] << 8) | (CAN_datain[5] & 0xFF));
0x150A	0x4700E4  	ADD	W14, #4, W1
0x150C	0x408064  	ADD	W1, #4, W0
0x150E	0x784010  	MOV.B	[W0], W0
0x1510	0xFB8000  	ZE	W0, W0
0x1512	0xDD0148  	SL	W0, #8, W2
0x1514	0x408065  	ADD	W1, #5, W0
0x1516	0xFB8090  	ZE	[W0], W1
0x1518	0x200FF0  	MOV	#255, W0
0x151A	0x608080  	AND	W1, W0, W1
0x151C	0x470074  	ADD	W14, #20, W0
0x151E	0x710801  	IOR	W2, W1, [W0]
;EBB_DPX.c,204 :: 		}
L_CAN_Interrupt170:
;EBB_DPX.c,205 :: 		if (CAN_dataLen >= 8) {
0x1520	0x90006E  	MOV	[W14+12], W0
0x1522	0xE10068  	CP	W0, #8
0x1524	0x390000  	BRA LTU	L_CAN_Interrupt171
L__CAN_Interrupt340:
;EBB_DPX.c,207 :: 		}
L_CAN_Interrupt171:
;EBB_DPX.c,208 :: 		Can_clearInterrupt();
0x1526	0x07FE87  	RCALL	_Can_clearInterrupt
;EBB_DPX.c,210 :: 		switch(CAN_id){
0x1528	0x37001D  	BRA	L_CAN_Interrupt172
;EBB_DPX.c,211 :: 		case SW_BRAKE_BIAS_EBB_ID:
L_CAN_Interrupt174:
;EBB_DPX.c,212 :: 		ebb_target_pos = ((unsigned int)firstInt);
0x152A	0x90080E  	MOV	[W14+16], W0
0x152C	0x884170  	MOV	W0, _ebb_target_pos
;EBB_DPX.c,213 :: 		ebb_settings = ((unsigned int)secondInt);
0x152E	0x90081E  	MOV	[W14+18], W0
0x1530	0x884110  	MOV	W0, _ebb_settings
;EBB_DPX.c,214 :: 		if ((ebb_target_pos != ebb_current_pos) && ebb_target_pos >= MIN_POSITION && ebb_target_pos <= MAX_POSITION)
0x1532	0x90088E  	MOV	[W14+16], W1
0x1534	0x2082C0  	MOV	#lo_addr(_ebb_current_pos), W0
0x1536	0xE10810  	CP	W1, [W0]
0x1538	0x32000A  	BRA Z	L__CAN_Interrupt187
L__CAN_Interrupt341:
0x153A	0x804170  	MOV	_ebb_target_pos, W0
0x153C	0xE10060  	CP	W0, #0
0x153E	0x390007  	BRA LTU	L__CAN_Interrupt186
L__CAN_Interrupt342:
0x1540	0x804170  	MOV	_ebb_target_pos, W0
0x1542	0xE10070  	CP	W0, #16
0x1544	0x3E0004  	BRA GTU	L__CAN_Interrupt185
L__CAN_Interrupt343:
L__CAN_Interrupt184:
;EBB_DPX.c,216 :: 		is_requested_movement = ON;
0x1546	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x1548	0xB3C010  	MOV.B	#1, W0
0x154A	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,217 :: 		}else if (ebb_target_pos == CALIBRATION_POSITION)
0x154C	0x370007  	BRA	L_CAN_Interrupt178
;EBB_DPX.c,214 :: 		if ((ebb_target_pos != ebb_current_pos) && ebb_target_pos >= MIN_POSITION && ebb_target_pos <= MAX_POSITION)
L__CAN_Interrupt187:
L__CAN_Interrupt186:
L__CAN_Interrupt185:
;EBB_DPX.c,217 :: 		}else if (ebb_target_pos == CALIBRATION_POSITION)
0x154E	0x200641  	MOV	#100, W1
0x1550	0x2082E0  	MOV	#lo_addr(_ebb_target_pos), W0
0x1552	0xE10810  	CP	W1, [W0]
0x1554	0x3A0003  	BRA NZ	L_CAN_Interrupt179
L__CAN_Interrupt344:
;EBB_DPX.c,219 :: 		is_requested_calibration = ON;
0x1556	0x208141  	MOV	#lo_addr(_is_requested_calibration), W1
0x1558	0xB3C010  	MOV.B	#1, W0
0x155A	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,220 :: 		}
L_CAN_Interrupt179:
L_CAN_Interrupt178:
;EBB_DPX.c,221 :: 		break;
0x155C	0x37000F  	BRA	L_CAN_Interrupt173
;EBB_DPX.c,222 :: 		case DAU_FR_ID:
L_CAN_Interrupt180:
;EBB_DPX.c,223 :: 		brake_pressure_front = ((unsigned int)thirdInt);
0x155E	0x90082E  	MOV	[W14+20], W0
0x1560	0x8840B0  	MOV	W0, _brake_pressure_front
;EBB_DPX.c,224 :: 		break;
0x1562	0x37000C  	BRA	L_CAN_Interrupt173
;EBB_DPX.c,226 :: 		}
L_CAN_Interrupt172:
0x1564	0x204001  	MOV	#1024, W1
0x1566	0x200002  	MOV	#0, W2
0x1568	0x470060  	ADD	W14, #0, W0
0x156A	0xE10830  	CP	W1, [W0++]
0x156C	0xE19020  	CPB	W2, [W0--]
0x156E	0x32FFDD  	BRA Z	L_CAN_Interrupt174
L__CAN_Interrupt345:
0x1570	0x206501  	MOV	#1616, W1
0x1572	0x200002  	MOV	#0, W2
0x1574	0x470060  	ADD	W14, #0, W0
0x1576	0xE10830  	CP	W1, [W0++]
0x1578	0xE19020  	CPB	W2, [W0--]
0x157A	0x32FFF1  	BRA Z	L_CAN_Interrupt180
L__CAN_Interrupt346:
L_CAN_Interrupt173:
;EBB_DPX.c,227 :: 		}
L_end_CAN_Interrupt:
0x157C	0x7806CF  	POP	W13
0x157E	0x78064F  	POP	W12
0x1580	0x7805CF  	POP	W11
0x1582	0x78054F  	POP	W10
0x1584	0x2001A0  	MOV	#26, W0
0x1586	0x09000C  	REPEAT	#12
0x1588	0x78104F  	POP	[W0--]
0x158A	0x78004F  	POP	W0
0x158C	0xF90036  	POP	RCOUNT
0x158E	0xF90034  	POP	PSVPAG
0x1590	0xFA8000  	ULNK
0x1592	0x064000  	RETFIE
; end of _CAN_Interrupt
_Can_read:
0x1354	0xFA0002  	LNK	#2
;can.c,49 :: 		void Can_read(unsigned long int *id, char dataBuffer[], unsigned int *dataLength, unsigned int *inFlags) {
0x1356	0x781F8D  	PUSH	W13
0x1358	0x98070D  	MOV	W13, [W14+0]
;can.c,50 :: 		if (Can_B0hasBeenReceived()) {
0x135A	0x07FD1C  	RCALL	_Can_B0hasBeenReceived
0x135C	0xE24000  	CP0.B	W0
0x135E	0x320005  	BRA Z	L_Can_read0
L__Can_read190:
;can.c,51 :: 		Can_clearB0Flag();
0x1360	0x07FD17  	RCALL	_Can_clearB0Flag
;can.c,52 :: 		Can1Read(id, dataBuffer, dataLength, &inFlags);
0x1362	0x470060  	ADD	W14, #0, W0
0x1364	0x780680  	MOV	W0, W13
0x1366	0x07FCAF  	RCALL	_CAN1Read
;can.c,53 :: 		}
0x1368	0x370007  	BRA	L_Can_read1
L_Can_read0:
;can.c,54 :: 		else if (Can_B1hasBeenReceived()) {
0x136A	0x07FCA5  	RCALL	_Can_B1hasBeenReceived
0x136C	0xE24000  	CP0.B	W0
0x136E	0x320004  	BRA Z	L_Can_read2
L__Can_read191:
;can.c,55 :: 		Can_clearB1Flag();
0x1370	0x07FCA0  	RCALL	_Can_clearB1Flag
;can.c,56 :: 		Can1Read(id, dataBuffer, dataLength, &inFlags);
0x1372	0x470060  	ADD	W14, #0, W0
0x1374	0x780680  	MOV	W0, W13
0x1376	0x07FCA7  	RCALL	_CAN1Read
;can.c,57 :: 		}
L_Can_read2:
L_Can_read1:
;can.c,58 :: 		}
L_end_Can_read:
0x1378	0x7806CF  	POP	W13
0x137A	0xFA8000  	ULNK
0x137C	0x060000  	RETURN
; end of _Can_read
_Can_B0hasBeenReceived:
;can.c,108 :: 		unsigned char Can_B0hasBeenReceived(void) {
;can.c,109 :: 		return CAN_INTERRUPT_ONB0_OCCURRED == 1;
0x0D94	0xEF6000  	CLR.B	W0
0x0D96	0xAF0396  	BTSC	C1INTFbits, #0
0x0D98	0xEC6000  	INC.B	W0
0x0D9A	0xE10461  	CP.B	W0, #1
0x0D9C	0xEF6000  	CLR.B	W0
0x0D9E	0x3A0001  	BRA NZ	L__Can_B0hasBeenReceived205
0x0DA0	0xEC6000  	INC.B	W0
L__Can_B0hasBeenReceived205:
;can.c,110 :: 		}
L_end_Can_B0hasBeenReceived:
0x0DA2	0x060000  	RETURN
; end of _Can_B0hasBeenReceived
_Can_clearB0Flag:
;can.c,116 :: 		void Can_clearB0Flag(void) {
;can.c,117 :: 		CAN_INTERRUPT_ONB0_OCCURRED = 0;
0x0D90	0xA90396  	BCLR	C1INTFbits, #0
;can.c,118 :: 		}
L_end_Can_clearB0Flag:
0x0D92	0x060000  	RETURN
; end of _Can_clearB0Flag
_CAN1Read:
0x0CC6	0xFA0000  	LNK	#0
;__Lib_CAN_1.c,691 :: 		
;__Lib_CAN_1.c,697 :: 		
0x0CC8	0xEF2000  	CLR	W0
0x0CCA	0x780E80  	MOV	W0, [W13]
;__Lib_CAN_1.c,699 :: 		
0x0CCC	0xAEE38E  	BTSS.B	C1RX0CONbits, #7
0x0CCE	0x370011  	BRA	L_CAN1Read43
;__Lib_CAN_1.c,701 :: 		
; ptr start address is: 10 (W5)
0x0CD0	0x203805  	MOV	#lo_addr(C1RX0SID), W5
;__Lib_CAN_1.c,702 :: 		
; lbIsItBuffer0 start address is: 8 (W4)
0x0CD2	0x2FFFF4  	MOV	#65535, W4
;__Lib_CAN_1.c,704 :: 		
0x0CD4	0xA90396  	BCLR	C1INTFbits, #0
;__Lib_CAN_1.c,706 :: 		
0x0CD6	0xAEE397  	BTSS	C1INTFbits, #15
0x0CD8	0x370003  	BRA	L_CAN1Read44
;__Lib_CAN_1.c,707 :: 		
0x0CDA	0x78001D  	MOV	[W13], W0
0x0CDC	0x700EE8  	IOR	W0, #8, [W13]
;__Lib_CAN_1.c,708 :: 		
0x0CDE	0xA9E397  	BCLR	C1INTFbits, #15
;__Lib_CAN_1.c,709 :: 		
L_CAN1Read44:
;__Lib_CAN_1.c,710 :: 		
0x0CE0	0xAE438E  	BTSS.B	C1RX0CONbits, #2
0x0CE2	0x370006  	BRA	L_CAN1Read45
;__Lib_CAN_1.c,711 :: 		
0x0CE4	0xBF838E  	MOV	C1RX0CON, WREG
0x0CE6	0x600067  	AND	W0, #7, W0
0x0CE8	0x700E9D  	IOR	W0, [W13], [W13]
;__Lib_CAN_1.c,712 :: 		
0x0CEA	0x78001D  	MOV	[W13], W0
0x0CEC	0x600061  	AND	W0, #1, W0
0x0CEE	0x780E80  	MOV	W0, [W13]
;__Lib_CAN_1.c,713 :: 		
L_CAN1Read45:
;__Lib_CAN_1.c,714 :: 		
; ptr end address is: 10 (W5)
; lbIsItBuffer0 end address is: 8 (W4)
0x0CF0	0x370017  	BRA	L_CAN1Read46
L_CAN1Read43:
;__Lib_CAN_1.c,716 :: 		
0x0CF2	0xAEE37E  	BTSS.B	C1RX1CONbits, #7
0x0CF4	0x370012  	BRA	L_CAN1Read47
;__Lib_CAN_1.c,718 :: 		
; ptr start address is: 4 (W2)
0x0CF6	0x203702  	MOV	#lo_addr(C1RX1SID), W2
;__Lib_CAN_1.c,719 :: 		
; lbIsItBuffer0 start address is: 8 (W4)
0x0CF8	0xEF2008  	CLR	W4
;__Lib_CAN_1.c,721 :: 		
0x0CFA	0xA92396  	BCLR	C1INTFbits, #1
;__Lib_CAN_1.c,723 :: 		
0x0CFC	0xAEC397  	BTSS	C1INTFbits, #14
0x0CFE	0x370003  	BRA	L_CAN1Read48
;__Lib_CAN_1.c,724 :: 		
0x0D00	0x78001D  	MOV	[W13], W0
0x0D02	0x700EE8  	IOR	W0, #8, [W13]
;__Lib_CAN_1.c,725 :: 		
0x0D04	0xA9C397  	BCLR	C1INTFbits, #14
;__Lib_CAN_1.c,726 :: 		
L_CAN1Read48:
;__Lib_CAN_1.c,727 :: 		
0x0D06	0xBF837E  	MOV	C1RX1CON, WREG
0x0D08	0x600067  	AND	W0, #7, W0
0x0D0A	0x700E9D  	IOR	W0, [W13], [W13]
;__Lib_CAN_1.c,728 :: 		
0x0D0C	0x78001D  	MOV	[W13], W0
0x0D0E	0xE10062  	CP	W0, #2
0x0D10	0x310003  	BRA GEU	L_CAN1Read49
L__CAN1Read85:
;__Lib_CAN_1.c,729 :: 		
0x0D12	0x78009D  	MOV	[W13], W1
0x0D14	0x200800  	MOV	#128, W0
0x0D16	0x708E80  	IOR	W1, W0, [W13]
L_CAN1Read49:
;__Lib_CAN_1.c,730 :: 		
0x0D18	0x370002  	BRA	L_CAN1Read50
; ptr end address is: 4 (W2)
; lbIsItBuffer0 end address is: 8 (W4)
L_CAN1Read47:
;__Lib_CAN_1.c,732 :: 		
0x0D1A	0xEF2000  	CLR	W0
0x0D1C	0x370037  	BRA	L_end_CAN1Read
;__Lib_CAN_1.c,733 :: 		
L_CAN1Read50:
; lbIsItBuffer0 start address is: 8 (W4)
; ptr start address is: 4 (W2)
0x0D1E	0x780282  	MOV	W2, W5
; lbIsItBuffer0 end address is: 8 (W4)
L_CAN1Read46:
; ptr end address is: 4 (W2)
;__Lib_CAN_1.c,736 :: 		
; lbIsItBuffer0 start address is: 8 (W4)
; ptr start address is: 10 (W5)
0x0D20	0xA60015  	BTSS	[W5], #0
0x0D22	0x37000A  	BRA	L_CAN1Read51
;__Lib_CAN_1.c,737 :: 		
0x0D24	0x78009D  	MOV	[W13], W1
0x0D26	0x200200  	MOV	#32, W0
0x0D28	0x708E80  	IOR	W1, W0, [W13]
;__Lib_CAN_1.c,738 :: 		
0x0D2A	0xBE9F8A  	PUSH.D	W10
0x0D2C	0x200F7B  	MOV	#247, W11
0x0D2E	0x780505  	MOV	W5, W10
0x0D30	0x07FD9B  	RCALL	__Lib_CAN_1_RegsToCAN1ID
0x0D32	0xBE054F  	POP.D	W10
0x0D34	0xBE8D00  	MOV.D	W0, [W10]
;__Lib_CAN_1.c,739 :: 		
0x0D36	0x370006  	BRA	L_CAN1Read52
L_CAN1Read51:
;__Lib_CAN_1.c,741 :: 		
0x0D38	0xBE9F8A  	PUSH.D	W10
0x0D3A	0x200FFB  	MOV	#255, W11
0x0D3C	0x780505  	MOV	W5, W10
0x0D3E	0x07FD94  	RCALL	__Lib_CAN_1_RegsToCAN1ID
0x0D40	0xBE054F  	POP.D	W10
0x0D42	0xBE8D00  	MOV.D	W0, [W10]
L_CAN1Read52:
;__Lib_CAN_1.c,743 :: 		
0x0D44	0x428064  	ADD	W5, #4, W0
; ptr end address is: 10 (W5)
; ptr start address is: 6 (W3)
0x0D46	0x780180  	MOV	W0, W3
;__Lib_CAN_1.c,745 :: 		
0x0D48	0x780010  	MOV	[W0], W0
0x0D4A	0x60006F  	AND	W0, #15, W0
; ddatalen start address is: 4 (W2)
0x0D4C	0x780100  	MOV	W0, W2
;__Lib_CAN_1.c,746 :: 		
0x0D4E	0x780E00  	MOV	W0, [W12]
;__Lib_CAN_1.c,748 :: 		
0x0D50	0xA69013  	BTSS	[W3], #9
0x0D52	0x370003  	BRA	L_CAN1Read53
;__Lib_CAN_1.c,749 :: 		
0x0D54	0x78009D  	MOV	[W13], W1
0x0D56	0x200400  	MOV	#64, W0
0x0D58	0x708E80  	IOR	W1, W0, [W13]
L_CAN1Read53:
;__Lib_CAN_1.c,751 :: 		
; chptr start address is: 0 (W0)
0x0D5A	0x418062  	ADD	W3, #2, W0
; ptr end address is: 6 (W3)
;__Lib_CAN_1.c,753 :: 		
; i start address is: 10 (W5)
0x0D5C	0xEF200A  	CLR	W5
;__Lib_CAN_1.c,754 :: 		
; ddatalen end address is: 4 (W2)
; chptr end address is: 0 (W0)
; lbIsItBuffer0 end address is: 8 (W4)
; i end address is: 10 (W5)
0x0D5E	0x780182  	MOV	W2, W3
0x0D60	0x780100  	MOV	W0, W2
;__Lib_CAN_1.c,755 :: 		
L_CAN1Read54:
; chptr start address is: 4 (W2)
; chptr start address is: 4 (W2)
; chptr end address is: 4 (W2)
; i start address is: 10 (W5)
; ddatalen start address is: 6 (W3)
; lbIsItBuffer0 start address is: 8 (W4)
0x0D62	0xFB8005  	ZE	W5, W0
0x0D64	0xE10003  	CP	W0, W3
0x0D66	0x310007  	BRA GEU	L_CAN1Read55
L__CAN1Read86:
; chptr end address is: 4 (W2)
;__Lib_CAN_1.c,756 :: 		
; chptr start address is: 4 (W2)
0x0D68	0xFB8005  	ZE	W5, W0
0x0D6A	0x458080  	ADD	W11, W0, W1
0x0D6C	0xFB8005  	ZE	W5, W0
0x0D6E	0x410000  	ADD	W2, W0, W0
0x0D70	0x784890  	MOV.B	[W0], [W1]
;__Lib_CAN_1.c,757 :: 		
0x0D72	0xEC600A  	INC.B	W5
;__Lib_CAN_1.c,758 :: 		
; chptr end address is: 4 (W2)
; ddatalen end address is: 6 (W3)
; i end address is: 10 (W5)
0x0D74	0x37FFF6  	BRA	L_CAN1Read54
L_CAN1Read55:
;__Lib_CAN_1.c,763 :: 		
0x0D76	0xAEE396  	BTSS	C1INTFbits, #7
0x0D78	0x370003  	BRA	L_CAN1Read56
;__Lib_CAN_1.c,764 :: 		
0x0D7A	0x78001D  	MOV	[W13], W0
0x0D7C	0x700EF0  	IOR	W0, #16, [W13]
;__Lib_CAN_1.c,765 :: 		
0x0D7E	0xA9E396  	BCLR	C1INTFbits, #7
;__Lib_CAN_1.c,766 :: 		
L_CAN1Read56:
;__Lib_CAN_1.c,768 :: 		
0x0D80	0xE20008  	CP0	W4
0x0D82	0x320002  	BRA Z	L_CAN1Read57
L__CAN1Read87:
; lbIsItBuffer0 end address is: 8 (W4)
;__Lib_CAN_1.c,769 :: 		
0x0D84	0xA9E38E  	BCLR.B	C1RX0CONbits, #7
0x0D86	0x370001  	BRA	L_CAN1Read58
L_CAN1Read57:
;__Lib_CAN_1.c,771 :: 		
0x0D88	0xA9E37E  	BCLR.B	C1RX1CONbits, #7
L_CAN1Read58:
;__Lib_CAN_1.c,773 :: 		
0x0D8A	0x2FFFF0  	MOV	#65535, W0
;__Lib_CAN_1.c,774 :: 		
L_end_CAN1Read:
0x0D8C	0xFA8000  	ULNK
0x0D8E	0x060000  	RETURN
; end of _CAN1Read
__Lib_CAN_1_RegsToCAN1ID:
0x0868	0xFA0004  	LNK	#4
;__Lib_CAN_1.c,547 :: 		
;__Lib_CAN_1.c,548 :: 		
0x086A	0x200000  	MOV	#0, W0
0x086C	0x980700  	MOV	W0, [W14+0]
0x086E	0x200000  	MOV	#0, W0
0x0870	0x980710  	MOV	W0, [W14+2]
;__Lib_CAN_1.c,550 :: 		
0x0872	0xAE6016  	BTSS	W11, #3
0x0874	0x370006  	BRA	L___Lib_CAN_1_RegsToCAN1ID30
;__Lib_CAN_1.c,551 :: 		
0x0876	0x78001A  	MOV	[W10], W0
0x0878	0xDE0042  	LSR	W0, #2, W0
0x087A	0xEB0080  	CLR	W1
0x087C	0x980700  	MOV	W0, [W14+0]
0x087E	0x980711  	MOV	W1, [W14+2]
;__Lib_CAN_1.c,552 :: 		
0x0880	0x370017  	BRA	L___Lib_CAN_1_RegsToCAN1ID31
L___Lib_CAN_1_RegsToCAN1ID30:
;__Lib_CAN_1.c,554 :: 		
0x0882	0x4701E0  	ADD	W14, #0, W3
0x0884	0x418162  	ADD	W3, #2, W2
0x0886	0x78009A  	MOV	[W10], W1
0x0888	0x21FFC0  	MOV	#8188, W0
0x088A	0x608900  	AND	W1, W0, [W2]
;__Lib_CAN_1.c,555 :: 		
0x088C	0x450062  	ADD	W10, #2, W0
0x088E	0x780500  	MOV	W0, W10
;__Lib_CAN_1.c,556 :: 		
0x0890	0x4180E2  	ADD	W3, #2, W1
0x0892	0x780010  	MOV	[W0], W0
0x0894	0xDE004A  	LSR	W0, #10, W0
0x0896	0x700891  	IOR	W0, [W1], [W1]
;__Lib_CAN_1.c,557 :: 		
0x0898	0x78009A  	MOV	[W10], W1
0x089A	0x203FF0  	MOV	#1023, W0
0x089C	0x608000  	AND	W1, W0, W0
0x089E	0xDD0046  	SL	W0, #6, W0
0x08A0	0x780980  	MOV	W0, [W3]
;__Lib_CAN_1.c,558 :: 		
0x08A2	0x450062  	ADD	W10, #2, W0
0x08A4	0x780500  	MOV	W0, W10
;__Lib_CAN_1.c,559 :: 		
0x08A6	0x780010  	MOV	[W0], W0
0x08A8	0xDE00CA  	LSR	W0, #10, W1
0x08AA	0x470060  	ADD	W14, #0, W0
0x08AC	0x708010  	IOR	W1, [W0], W0
0x08AE	0x780980  	MOV	W0, [W3]
;__Lib_CAN_1.c,560 :: 		
L___Lib_CAN_1_RegsToCAN1ID31:
;__Lib_CAN_1.c,561 :: 		
0x08B0	0x90000E  	MOV	[W14+0], W0
0x08B2	0x90009E  	MOV	[W14+2], W1
;__Lib_CAN_1.c,562 :: 		
L_end_RegsToCAN1ID:
0x08B4	0xFA8000  	ULNK
0x08B6	0x060000  	RETURN
; end of __Lib_CAN_1_RegsToCAN1ID
_Can_B1hasBeenReceived:
;can.c,112 :: 		unsigned char Can_B1hasBeenReceived(void) {
;can.c,113 :: 		return CAN_INTERRUPT_ONB1_OCCURRED == 1;
0x0CB6	0xEF6000  	CLR.B	W0
0x0CB8	0xAF2396  	BTSC	C1INTFbits, #1
0x0CBA	0xEC6000  	INC.B	W0
0x0CBC	0xE10461  	CP.B	W0, #1
0x0CBE	0xEF6000  	CLR.B	W0
0x0CC0	0x3A0001  	BRA NZ	L__Can_B1hasBeenReceived207
0x0CC2	0xEC6000  	INC.B	W0
L__Can_B1hasBeenReceived207:
;can.c,114 :: 		}
L_end_Can_B1hasBeenReceived:
0x0CC4	0x060000  	RETURN
; end of _Can_B1hasBeenReceived
_Can_clearB1Flag:
;can.c,120 :: 		void Can_clearB1Flag(void) {
;can.c,121 :: 		CAN_INTERRUPT_ONB1_OCCURRED = 0;
0x0CB2	0xA92396  	BCLR	C1INTFbits, #1
;can.c,122 :: 		}
L_end_Can_clearB1Flag:
0x0CB4	0x060000  	RETURN
; end of _Can_clearB1Flag
_Can_clearInterrupt:
;can.c,124 :: 		void Can_clearInterrupt(void) {
;can.c,125 :: 		CAN_INTERRUPT_OCCURRED = 0;
0x1236	0xA96087  	BCLR	IFS1bits, #11
;can.c,126 :: 		}
L_end_Can_clearInterrupt:
0x1238	0x060000  	RETURN
; end of _Can_clearInterrupt
_timer4_interrupt:
0x146A	0xF80034  	PUSH	PSVPAG
0x146C	0xF80036  	PUSH	RCOUNT
0x146E	0x781F80  	PUSH	W0
0x1470	0x200020  	MOV	#2, W0
0x1472	0x09000C  	REPEAT	#12
0x1474	0x781FB0  	PUSH	[W0++]
;EBB_DPX.c,168 :: 		onTimer4Interrupt {
;EBB_DPX.c,169 :: 		if(buzzer_state == ON){  //Sound routine
0x1476	0x804070  	MOV	_buzzer_state, W0
0x1478	0xE10061  	CP	W0, #1
0x147A	0x3A0001  	BRA NZ	L_timer4_interrupt165
L__timer4_interrupt333:
;EBB_DPX.c,170 :: 		BUZZER = !BUZZER;
0x147C	0xAA42D6  	BTG	LATD2_bit, BitPos(LATD2_bit+0)
;EBB_DPX.c,171 :: 		}
L_timer4_interrupt165:
;EBB_DPX.c,172 :: 		clearTimer4();
0x147E	0xA9A086  	BCLR	IFS1bits, #5
;EBB_DPX.c,173 :: 		}
L_end_timer4_interrupt:
0x1480	0x2001A0  	MOV	#26, W0
0x1482	0x09000C  	REPEAT	#12
0x1484	0x78104F  	POP	[W0--]
0x1486	0x78004F  	POP	W0
0x1488	0xF90036  	POP	RCOUNT
0x148A	0xF90034  	POP	PSVPAG
0x148C	0x064000  	RETFIE
; end of _timer4_interrupt
_timer2_interrupt:
0x137E	0xF80034  	PUSH	PSVPAG
0x1380	0xF80036  	PUSH	RCOUNT
0x1382	0x781F80  	PUSH	W0
0x1384	0x200020  	MOV	#2, W0
0x1386	0x09000C  	REPEAT	#12
0x1388	0x781FB0  	PUSH	[W0++]
;EBB_DPX.c,148 :: 		onTimer2Interrupt {
;EBB_DPX.c,149 :: 		timer2_counter++;
0x138A	0x200011  	MOV	#1, W1
0x138C	0x208120  	MOV	#lo_addr(_timer2_counter), W0
0x138E	0x408810  	ADD	W1, [W0], [W0]
;EBB_DPX.c,150 :: 		brake_counter++;
0x1390	0xB3C011  	MOV.B	#1, W1
0x1392	0x208110  	MOV	#lo_addr(_brake_counter), W0
0x1394	0x40C810  	ADD.B	W1, [W0], [W0]
;EBB_DPX.c,151 :: 		EBB_control();
0x1396	0x07FE04  	RCALL	_EBB_control
;EBB_DPX.c,152 :: 		if (timer2_counter >= 10)
0x1398	0x804090  	MOV	_timer2_counter, W0
0x139A	0xE1006A  	CP	W0, #10
0x139C	0x350003  	BRA LT	L_timer2_interrupt164
L__timer2_interrupt331:
;EBB_DPX.c,154 :: 		CAN_routine();  //Call the can update routine
0x139E	0x07FD68  	RCALL	_CAN_routine
;EBB_DPX.c,155 :: 		timer2_counter = 0;
0x13A0	0xEF2000  	CLR	W0
0x13A2	0x884090  	MOV	W0, _timer2_counter
;EBB_DPX.c,156 :: 		}
L_timer2_interrupt164:
;EBB_DPX.c,162 :: 		clearTimer2();
0x13A4	0xA9C084  	BCLR	IFS0bits, #6
;EBB_DPX.c,163 :: 		}
L_end_timer2_interrupt:
0x13A6	0x2001A0  	MOV	#26, W0
0x13A8	0x09000C  	REPEAT	#12
0x13AA	0x78104F  	POP	[W0--]
0x13AC	0x78004F  	POP	W0
0x13AE	0xF90036  	POP	RCOUNT
0x13B0	0xF90034  	POP	PSVPAG
0x13B2	0x064000  	RETFIE
; end of _timer2_interrupt
_EBB_control:
;motor.c,37 :: 		void EBB_control()
;motor.c,39 :: 		switch(ebb_current_state)           //State machine
0x0FA0	0x781F8A  	PUSH	W10
0x0FA2	0x781F8B  	PUSH	W11
0x0FA4	0x781F8C  	PUSH	W12
0x0FA6	0x370123  	BRA	L_EBB_control89
;motor.c,41 :: 		case EBB_OFF:                      //Off state
L_EBB_control91:
;motor.c,42 :: 		if(is_requested_movement)       //Check if the EBB is requested to move in a different position
0x0FA8	0x208100  	MOV	#lo_addr(_is_requested_movement), W0
0x0FAA	0xE00410  	CP0.B	[W0]
0x0FAC	0x32006E  	BRA Z	L_EBB_control92
L__EBB_control288:
;motor.c,44 :: 		switch(ebb_target_pos)  //Obtain the requested position in quarter of turns (maybe to be improved!!)
0x0FAE	0x370033  	BRA	L_EBB_control93
;motor.c,46 :: 		case 0:
L_EBB_control95:
;motor.c,47 :: 		motor_target_position = POSITION_0;
0x0FB0	0xEF2000  	CLR	W0
0x0FB2	0x884190  	MOV	W0, _motor_target_position
;motor.c,48 :: 		break;
0x0FB4	0x370063  	BRA	L_EBB_control94
;motor.c,49 :: 		case 1:
L_EBB_control96:
;motor.c,50 :: 		motor_target_position = POSITION_1;
0x0FB6	0x200020  	MOV	#2, W0
0x0FB8	0x884190  	MOV	W0, _motor_target_position
;motor.c,51 :: 		break;
0x0FBA	0x370060  	BRA	L_EBB_control94
;motor.c,52 :: 		case 2:
L_EBB_control97:
;motor.c,53 :: 		motor_target_position = POSITION_2;
0x0FBC	0x200040  	MOV	#4, W0
0x0FBE	0x884190  	MOV	W0, _motor_target_position
;motor.c,54 :: 		break;
0x0FC0	0x37005D  	BRA	L_EBB_control94
;motor.c,55 :: 		case 3:
L_EBB_control98:
;motor.c,56 :: 		motor_target_position = POSITION_3;
0x0FC2	0x200060  	MOV	#6, W0
0x0FC4	0x884190  	MOV	W0, _motor_target_position
;motor.c,57 :: 		break;
0x0FC6	0x37005A  	BRA	L_EBB_control94
;motor.c,58 :: 		case 4:
L_EBB_control99:
;motor.c,59 :: 		motor_target_position = POSITION_4;
0x0FC8	0x200080  	MOV	#8, W0
0x0FCA	0x884190  	MOV	W0, _motor_target_position
;motor.c,60 :: 		break;
0x0FCC	0x370057  	BRA	L_EBB_control94
;motor.c,61 :: 		case 5:
L_EBB_control100:
;motor.c,62 :: 		motor_target_position = POSITION_5;
0x0FCE	0x2000A0  	MOV	#10, W0
0x0FD0	0x884190  	MOV	W0, _motor_target_position
;motor.c,63 :: 		break;
0x0FD2	0x370054  	BRA	L_EBB_control94
;motor.c,64 :: 		case 6:
L_EBB_control101:
;motor.c,65 :: 		motor_target_position = POSITION_6;
0x0FD4	0x2000C0  	MOV	#12, W0
0x0FD6	0x884190  	MOV	W0, _motor_target_position
;motor.c,66 :: 		break;
0x0FD8	0x370051  	BRA	L_EBB_control94
;motor.c,67 :: 		case 7:
L_EBB_control102:
;motor.c,68 :: 		motor_target_position = POSITION_7;
0x0FDA	0x2000E0  	MOV	#14, W0
0x0FDC	0x884190  	MOV	W0, _motor_target_position
;motor.c,69 :: 		break;
0x0FDE	0x37004E  	BRA	L_EBB_control94
;motor.c,70 :: 		case 8:
L_EBB_control103:
;motor.c,71 :: 		motor_target_position = POSITION_8;
0x0FE0	0x200100  	MOV	#16, W0
0x0FE2	0x884190  	MOV	W0, _motor_target_position
;motor.c,72 :: 		break;
0x0FE4	0x37004B  	BRA	L_EBB_control94
;motor.c,73 :: 		case 9:
L_EBB_control104:
;motor.c,74 :: 		motor_target_position = POSITION_9;
0x0FE6	0x200120  	MOV	#18, W0
0x0FE8	0x884190  	MOV	W0, _motor_target_position
;motor.c,75 :: 		break;
0x0FEA	0x370048  	BRA	L_EBB_control94
;motor.c,76 :: 		case 10:
L_EBB_control105:
;motor.c,77 :: 		motor_target_position = POSITION_10;
0x0FEC	0x200140  	MOV	#20, W0
0x0FEE	0x884190  	MOV	W0, _motor_target_position
;motor.c,78 :: 		break;
0x0FF0	0x370045  	BRA	L_EBB_control94
;motor.c,79 :: 		case 11:
L_EBB_control106:
;motor.c,80 :: 		motor_target_position = POSITION_11;
0x0FF2	0x200160  	MOV	#22, W0
0x0FF4	0x884190  	MOV	W0, _motor_target_position
;motor.c,81 :: 		break;
0x0FF6	0x370042  	BRA	L_EBB_control94
;motor.c,82 :: 		case 12:
L_EBB_control107:
;motor.c,83 :: 		motor_target_position = POSITION_12;
0x0FF8	0x200180  	MOV	#24, W0
0x0FFA	0x884190  	MOV	W0, _motor_target_position
;motor.c,84 :: 		break;
0x0FFC	0x37003F  	BRA	L_EBB_control94
;motor.c,85 :: 		case 13:
L_EBB_control108:
;motor.c,86 :: 		motor_target_position = POSITION_13;
0x0FFE	0x2001A0  	MOV	#26, W0
0x1000	0x884190  	MOV	W0, _motor_target_position
;motor.c,87 :: 		break;
0x1002	0x37003C  	BRA	L_EBB_control94
;motor.c,88 :: 		case 14:
L_EBB_control109:
;motor.c,89 :: 		motor_target_position = POSITION_14;
0x1004	0x2001C0  	MOV	#28, W0
0x1006	0x884190  	MOV	W0, _motor_target_position
;motor.c,90 :: 		break;
0x1008	0x370039  	BRA	L_EBB_control94
;motor.c,91 :: 		case 15:
L_EBB_control110:
;motor.c,92 :: 		motor_target_position = POSITION_15;
0x100A	0x2001E0  	MOV	#30, W0
0x100C	0x884190  	MOV	W0, _motor_target_position
;motor.c,93 :: 		break;
0x100E	0x370036  	BRA	L_EBB_control94
;motor.c,94 :: 		case 16:
L_EBB_control111:
;motor.c,95 :: 		motor_target_position = POSITION_16;
0x1010	0x200200  	MOV	#32, W0
0x1012	0x884190  	MOV	W0, _motor_target_position
;motor.c,96 :: 		break;
0x1014	0x370033  	BRA	L_EBB_control94
;motor.c,97 :: 		}
L_EBB_control93:
0x1016	0x804170  	MOV	_ebb_target_pos, W0
0x1018	0xE10060  	CP	W0, #0
0x101A	0x32FFCA  	BRA Z	L_EBB_control95
L__EBB_control289:
0x101C	0x804170  	MOV	_ebb_target_pos, W0
0x101E	0xE10061  	CP	W0, #1
0x1020	0x32FFCA  	BRA Z	L_EBB_control96
L__EBB_control290:
0x1022	0x804170  	MOV	_ebb_target_pos, W0
0x1024	0xE10062  	CP	W0, #2
0x1026	0x32FFCA  	BRA Z	L_EBB_control97
L__EBB_control291:
0x1028	0x804170  	MOV	_ebb_target_pos, W0
0x102A	0xE10063  	CP	W0, #3
0x102C	0x32FFCA  	BRA Z	L_EBB_control98
L__EBB_control292:
0x102E	0x804170  	MOV	_ebb_target_pos, W0
0x1030	0xE10064  	CP	W0, #4
0x1032	0x32FFCA  	BRA Z	L_EBB_control99
L__EBB_control293:
0x1034	0x804170  	MOV	_ebb_target_pos, W0
0x1036	0xE10065  	CP	W0, #5
0x1038	0x32FFCA  	BRA Z	L_EBB_control100
L__EBB_control294:
0x103A	0x804170  	MOV	_ebb_target_pos, W0
0x103C	0xE10066  	CP	W0, #6
0x103E	0x32FFCA  	BRA Z	L_EBB_control101
L__EBB_control295:
0x1040	0x804170  	MOV	_ebb_target_pos, W0
0x1042	0xE10067  	CP	W0, #7
0x1044	0x32FFCA  	BRA Z	L_EBB_control102
L__EBB_control296:
0x1046	0x804170  	MOV	_ebb_target_pos, W0
0x1048	0xE10068  	CP	W0, #8
0x104A	0x32FFCA  	BRA Z	L_EBB_control103
L__EBB_control297:
0x104C	0x804170  	MOV	_ebb_target_pos, W0
0x104E	0xE10069  	CP	W0, #9
0x1050	0x32FFCA  	BRA Z	L_EBB_control104
L__EBB_control298:
0x1052	0x804170  	MOV	_ebb_target_pos, W0
0x1054	0xE1006A  	CP	W0, #10
0x1056	0x32FFCA  	BRA Z	L_EBB_control105
L__EBB_control299:
0x1058	0x804170  	MOV	_ebb_target_pos, W0
0x105A	0xE1006B  	CP	W0, #11
0x105C	0x32FFCA  	BRA Z	L_EBB_control106
L__EBB_control300:
0x105E	0x804170  	MOV	_ebb_target_pos, W0
0x1060	0xE1006C  	CP	W0, #12
0x1062	0x32FFCA  	BRA Z	L_EBB_control107
L__EBB_control301:
0x1064	0x804170  	MOV	_ebb_target_pos, W0
0x1066	0xE1006D  	CP	W0, #13
0x1068	0x32FFCA  	BRA Z	L_EBB_control108
L__EBB_control302:
0x106A	0x804170  	MOV	_ebb_target_pos, W0
0x106C	0xE1006E  	CP	W0, #14
0x106E	0x32FFCA  	BRA Z	L_EBB_control109
L__EBB_control303:
0x1070	0x804170  	MOV	_ebb_target_pos, W0
0x1072	0xE1006F  	CP	W0, #15
0x1074	0x32FFCA  	BRA Z	L_EBB_control110
L__EBB_control304:
0x1076	0x804170  	MOV	_ebb_target_pos, W0
0x1078	0xE10070  	CP	W0, #16
0x107A	0x32FFCA  	BRA Z	L_EBB_control111
L__EBB_control305:
L_EBB_control94:
;motor.c,98 :: 		ebb_current_state = EBB_START;          //Set the correct new ebb state (start moving)
0x107C	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x107E	0xB3C010  	MOV.B	#1, W0
0x1080	0x784880  	MOV.B	W0, [W1]
;motor.c,99 :: 		is_requested_movement = OFF;            //Switch off flag
0x1082	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x1084	0xEF2000  	CLR	W0
0x1086	0x784880  	MOV.B	W0, [W1]
;motor.c,100 :: 		}else if(is_requested_calibration)          //Check if ebb is requested to enter calibration mode
0x1088	0x37000B  	BRA	L_EBB_control112
L_EBB_control92:
0x108A	0x208140  	MOV	#lo_addr(_is_requested_calibration), W0
0x108C	0xE00410  	CP0.B	[W0]
0x108E	0x320008  	BRA Z	L_EBB_control113
L__EBB_control306:
;motor.c,102 :: 		calibration_on_off = ON;
0x1090	0x200010  	MOV	#1, W0
0x1092	0x884040  	MOV	W0, _calibration_on_off
;motor.c,103 :: 		ebb_current_state = EBB_CENTRAL_CALIBRATION;        //Set the correct new ebb state (calibration)
0x1094	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1096	0xB3C050  	MOV.B	#5, W0
0x1098	0x784880  	MOV.B	W0, [W1]
;motor.c,104 :: 		is_requested_calibration = OFF;                     //Switch off flag
0x109A	0x208141  	MOV	#lo_addr(_is_requested_calibration), W1
0x109C	0xEF2000  	CLR	W0
0x109E	0x784880  	MOV.B	W0, [W1]
;motor.c,105 :: 		}
L_EBB_control113:
L_EBB_control112:
;motor.c,106 :: 		break;
0x10A0	0x3700C6  	BRA	L_EBB_control90
;motor.c,107 :: 		case EBB_START:                                             //Start a movement mode
L_EBB_control114:
;motor.c,108 :: 		if(motor_target_position > motor_current_position)      //Check if is necessary to screw or unscrew the balance bar
0x10A2	0x804191  	MOV	_motor_target_position, W1
0x10A4	0x208300  	MOV	#lo_addr(_motor_current_position), W0
0x10A6	0xE10810  	CP	W1, [W0]
0x10A8	0x340003  	BRA LE	L_EBB_control115
L__EBB_control307:
;motor.c,110 :: 		FORWARD = ON;                                         //Unscrew
0x10AA	0xA882DC  	BSET	LATE4_bit, BitPos(LATE4_bit+0)
;motor.c,111 :: 		REVERSE = OFF;
0x10AC	0xA962DC  	BCLR	LATE3_bit, BitPos(LATE3_bit+0)
;motor.c,112 :: 		}else if (motor_target_position < motor_current_position)
0x10AE	0x370009  	BRA	L_EBB_control116
L_EBB_control115:
0x10B0	0x804191  	MOV	_motor_target_position, W1
0x10B2	0x208300  	MOV	#lo_addr(_motor_current_position), W0
0x10B4	0xE10810  	CP	W1, [W0]
0x10B6	0x3D0005  	BRA GE	L_EBB_control117
L__EBB_control308:
;motor.c,114 :: 		motor_target_position--;
0x10B8	0x200011  	MOV	#1, W1
0x10BA	0x208320  	MOV	#lo_addr(_motor_target_position), W0
0x10BC	0x108810  	SUBR	W1, [W0], [W0]
;motor.c,115 :: 		REVERSE = ON;                                       //Screw
0x10BE	0xA862DC  	BSET	LATE3_bit, BitPos(LATE3_bit+0)
;motor.c,116 :: 		FORWARD = OFF;
0x10C0	0xA982DC  	BCLR	LATE4_bit, BitPos(LATE4_bit+0)
;motor.c,117 :: 		}
L_EBB_control117:
L_EBB_control116:
;motor.c,118 :: 		ENABLE = ON;                                            //Turn on H-bridge
0x10C2	0xA842DC  	BSET	LATE2_bit, BitPos(LATE2_bit+0)
;motor.c,119 :: 		PDC1 = PWM_SATURATION;                                  //Put the pwm at maximum (disabled pwm control)
0x10C4	0x20FA00  	MOV	#4000, W0
0x10C6	0xB7A1D6  	MOV	WREG, PDC1
;motor.c,121 :: 		ebb_current_state = EBB_MOVING;                         //Update State
0x10C8	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x10CA	0xB3C020  	MOV.B	#2, W0
0x10CC	0x784880  	MOV.B	W0, [W1]
;motor.c,122 :: 		break;
0x10CE	0x3700AF  	BRA	L_EBB_control90
;motor.c,123 :: 		case EBB_MOVING:                               //EBB is trying to reach the requested position
L_EBB_control118:
;motor.c,124 :: 		blink_counter++;
0x10D0	0xB3C011  	MOV.B	#1, W1
0x10D2	0x208040  	MOV	#lo_addr(_blink_counter), W0
0x10D4	0x40C810  	ADD.B	W1, [W0], [W0]
;motor.c,125 :: 		if(blink_counter >= 20)
0x10D6	0x208040  	MOV	#lo_addr(_blink_counter), W0
0x10D8	0x784010  	MOV.B	[W0], W0
0x10DA	0xE10474  	CP.B	W0, #20
0x10DC	0x390004  	BRA LTU	L_EBB_control119
L__EBB_control309:
;motor.c,127 :: 		LED_G = ~LED_G;                        //Signal that the motor is turning with a blincking green led
0x10DE	0xAA62D6  	BTG	LATD3_bit, BitPos(LATD3_bit+0)
;motor.c,128 :: 		blink_counter = 0;
0x10E0	0x208041  	MOV	#lo_addr(_blink_counter), W1
0x10E2	0xEF2000  	CLR	W0
0x10E4	0x784880  	MOV.B	W0, [W1]
;motor.c,129 :: 		}
L_EBB_control119:
;motor.c,130 :: 		break;
0x10E6	0x3700A3  	BRA	L_EBB_control90
;motor.c,131 :: 		case EBB_BRAKING:                              //EBB has reached the position and is now bhraking the motor shorting it
L_EBB_control120:
;motor.c,132 :: 		LED_G = OFF;
0x10E8	0xA962D6  	BCLR	LATD3_bit, BitPos(LATD3_bit+0)
;motor.c,133 :: 		LED_B = ON;                             //Turn on Blue led to signal motor Braking mode
0x10EA	0xA822D6  	BSET	LATD1_bit, BitPos(LATD1_bit+0)
;motor.c,135 :: 		if(brake_counter >= BRAKE_TIME_LENGHT)          //check if the Braking period has passed
0x10EC	0x208110  	MOV	#lo_addr(_brake_counter), W0
0x10EE	0x784010  	MOV.B	[W0], W0
0x10F0	0xE1047E  	CP.B	W0, #30
0x10F2	0x390003  	BRA LTU	L_EBB_control121
L__EBB_control310:
;motor.c,137 :: 		ebb_current_state = EBB_POSITION_REACHED;
0x10F4	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x10F6	0xB3C040  	MOV.B	#4, W0
0x10F8	0x784880  	MOV.B	W0, [W1]
;motor.c,138 :: 		}
L_EBB_control121:
;motor.c,139 :: 		break;
0x10FA	0x370099  	BRA	L_EBB_control90
;motor.c,140 :: 		case EBB_POSITION_REACHED:                                                  //The ebb has correctly reached th requested position
L_EBB_control122:
;motor.c,141 :: 		LED_B = OFF;
0x10FC	0xA922D6  	BCLR	LATD1_bit, BitPos(LATD1_bit+0)
;motor.c,142 :: 		ENABLE = OFF;
0x10FE	0xA942DC  	BCLR	LATE2_bit, BitPos(LATE2_bit+0)
;motor.c,143 :: 		REVERSE = OFF;                                                          //Turn off the motor
0x1100	0xA962DC  	BCLR	LATE3_bit, BitPos(LATE3_bit+0)
;motor.c,144 :: 		FORWARD = OFF;
0x1102	0xA982DC  	BCLR	LATE4_bit, BitPos(LATE4_bit+0)
;motor.c,145 :: 		ebb_current_pos = ebb_target_pos;                                       //Update ebb cuurent position with the reached one (for robustness)
0x1104	0x804170  	MOV	_ebb_target_pos, W0
0x1106	0x884160  	MOV	W0, _ebb_current_pos
;motor.c,146 :: 		motor_current_position = motor_target_position;                         //Update motor position with the reached one (for robustness)
0x1108	0x804190  	MOV	_motor_target_position, W0
0x110A	0x884180  	MOV	W0, _motor_current_position
;motor.c,147 :: 		EEPROM_WRITE(ADDR_LAST_POSCNT, POSCNT);
0x110C	0x80093C  	MOV	POSCNT, W12
0x110E	0x2FDA0A  	MOV	#64928, W10
0x1110	0x2007FB  	MOV	#127, W11
0x1112	0x07FF34  	RCALL	_EEPROM_Write
;motor.c,148 :: 		while(WR_bit);                                                           //Update EEPROM data
L_EBB_control123:
0x1114	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1116	0x370001  	BRA	L_EBB_control124
0x1118	0x37FFFD  	BRA	L_EBB_control123
L_EBB_control124:
;motor.c,155 :: 		EEPROM_WRITE(ADDR_LAST_NUMBER_QUARTER_TURNS, motor_current_position);
0x111A	0x80418C  	MOV	_motor_current_position, W12
0x111C	0x2FDB0A  	MOV	#64944, W10
0x111E	0x2007FB  	MOV	#127, W11
0x1120	0x07FF2D  	RCALL	_EEPROM_Write
;motor.c,156 :: 		while(WR_bit);
L_EBB_control125:
0x1122	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1124	0x370001  	BRA	L_EBB_control126
0x1126	0x37FFFD  	BRA	L_EBB_control125
L_EBB_control126:
;motor.c,157 :: 		EEPROM_WRITE(ADDR_LAST_MAPPED_POSITION, ebb_current_pos);
0x1128	0x80416C  	MOV	_ebb_current_pos, W12
0x112A	0x2FDC0A  	MOV	#64960, W10
0x112C	0x2007FB  	MOV	#127, W11
0x112E	0x07FF26  	RCALL	_EEPROM_Write
;motor.c,158 :: 		while(WR_bit);
L_EBB_control127:
0x1130	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1132	0x370001  	BRA	L_EBB_control128
0x1134	0x37FFFD  	BRA	L_EBB_control127
L_EBB_control128:
;motor.c,159 :: 		ebb_current_state = OFF;                                               //Going back to OFF state
0x1136	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1138	0xEF2000  	CLR	W0
0x113A	0x784880  	MOV.B	W0, [W1]
;motor.c,160 :: 		break;
0x113C	0x370078  	BRA	L_EBB_control90
;motor.c,161 :: 		case EBB_CENTRAL_CALIBRATION:
L_EBB_control129:
;motor.c,162 :: 		ebb_current_pos = 8;
0x113E	0x200080  	MOV	#8, W0
0x1140	0x884160  	MOV	W0, _ebb_current_pos
;motor.c,163 :: 		ebb_target_pos = ebb_current_pos;
0x1142	0x200080  	MOV	#8, W0
0x1144	0x884170  	MOV	W0, _ebb_target_pos
;motor.c,164 :: 		motor_current_position = POSITION_8;
0x1146	0x200100  	MOV	#16, W0
0x1148	0x884180  	MOV	W0, _motor_current_position
;motor.c,165 :: 		motor_target_position = motor_current_position;
0x114A	0x200100  	MOV	#16, W0
0x114C	0x884190  	MOV	W0, _motor_target_position
;motor.c,166 :: 		EEPROM_WRITE(ADDR_LAST_POSCNT, POSCNT);
0x114E	0x80093C  	MOV	POSCNT, W12
0x1150	0x2FDA0A  	MOV	#64928, W10
0x1152	0x2007FB  	MOV	#127, W11
0x1154	0x07FF13  	RCALL	_EEPROM_Write
;motor.c,167 :: 		while(WR_bit);                                                           //Update EEPROM data
L_EBB_control130:
0x1156	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1158	0x370001  	BRA	L_EBB_control131
0x115A	0x37FFFD  	BRA	L_EBB_control130
L_EBB_control131:
;motor.c,168 :: 		EEPROM_WRITE(ADDR_LAST_NUMBER_QUARTER_TURNS, motor_current_position);
0x115C	0x80418C  	MOV	_motor_current_position, W12
0x115E	0x2FDB0A  	MOV	#64944, W10
0x1160	0x2007FB  	MOV	#127, W11
0x1162	0x07FF0C  	RCALL	_EEPROM_Write
;motor.c,169 :: 		while(WR_bit);
L_EBB_control132:
0x1164	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1166	0x370001  	BRA	L_EBB_control133
0x1168	0x37FFFD  	BRA	L_EBB_control132
L_EBB_control133:
;motor.c,170 :: 		EEPROM_WRITE(ADDR_LAST_MAPPED_POSITION, ebb_current_pos);
0x116A	0x80416C  	MOV	_ebb_current_pos, W12
0x116C	0x2FDC0A  	MOV	#64960, W10
0x116E	0x2007FB  	MOV	#127, W11
0x1170	0x07FF05  	RCALL	_EEPROM_Write
;motor.c,171 :: 		while(WR_bit);
L_EBB_control134:
0x1172	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x1174	0x370001  	BRA	L_EBB_control135
0x1176	0x37FFFD  	BRA	L_EBB_control134
L_EBB_control135:
;motor.c,172 :: 		CAN_routine();
0x1178	0x07FE7B  	RCALL	_CAN_routine
;motor.c,173 :: 		calibration_on_off = OFF;
0x117A	0xEF2000  	CLR	W0
0x117C	0x884040  	MOV	W0, _calibration_on_off
;motor.c,174 :: 		ebb_current_state = OFF;                                               //Going back to OFF state
0x117E	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1180	0xEF2000  	CLR	W0
0x1182	0x784880  	MOV.B	W0, [W1]
;motor.c,175 :: 		break;
0x1184	0x370054  	BRA	L_EBB_control90
;motor.c,176 :: 		case EBB_CENTRAL_CALIBRATION:
L_EBB_control136:
;motor.c,177 :: 		ebb_current_pos = 8;
0x1186	0x200080  	MOV	#8, W0
0x1188	0x884160  	MOV	W0, _ebb_current_pos
;motor.c,178 :: 		ebb_target_pos = ebb_current_pos;
0x118A	0x200080  	MOV	#8, W0
0x118C	0x884170  	MOV	W0, _ebb_target_pos
;motor.c,179 :: 		motor_current_position = POSITION_8;
0x118E	0x200100  	MOV	#16, W0
0x1190	0x884180  	MOV	W0, _motor_current_position
;motor.c,180 :: 		motor_target_position = motor_current_position;
0x1192	0x200100  	MOV	#16, W0
0x1194	0x884190  	MOV	W0, _motor_target_position
;motor.c,181 :: 		EEPROM_WRITE(ADDR_LAST_POSCNT, POSCNT);
0x1196	0x80093C  	MOV	POSCNT, W12
0x1198	0x2FDA0A  	MOV	#64928, W10
0x119A	0x2007FB  	MOV	#127, W11
0x119C	0x07FEEF  	RCALL	_EEPROM_Write
;motor.c,182 :: 		while(WR_bit);                                                           //Update EEPROM data
L_EBB_control137:
0x119E	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x11A0	0x370001  	BRA	L_EBB_control138
0x11A2	0x37FFFD  	BRA	L_EBB_control137
L_EBB_control138:
;motor.c,183 :: 		EEPROM_WRITE(ADDR_LAST_NUMBER_QUARTER_TURNS, motor_current_position);
0x11A4	0x80418C  	MOV	_motor_current_position, W12
0x11A6	0x2FDB0A  	MOV	#64944, W10
0x11A8	0x2007FB  	MOV	#127, W11
0x11AA	0x07FEE8  	RCALL	_EEPROM_Write
;motor.c,184 :: 		while(WR_bit);
L_EBB_control139:
0x11AC	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x11AE	0x370001  	BRA	L_EBB_control140
0x11B0	0x37FFFD  	BRA	L_EBB_control139
L_EBB_control140:
;motor.c,185 :: 		EEPROM_WRITE(ADDR_LAST_MAPPED_POSITION, ebb_current_pos);
0x11B2	0x80416C  	MOV	_ebb_current_pos, W12
0x11B4	0x2FDC0A  	MOV	#64960, W10
0x11B6	0x2007FB  	MOV	#127, W11
0x11B8	0x07FEE1  	RCALL	_EEPROM_Write
;motor.c,186 :: 		while(WR_bit);
L_EBB_control141:
0x11BA	0xAEE761  	BTSS	WR_bit, BitPos(WR_bit+0)
0x11BC	0x370001  	BRA	L_EBB_control142
0x11BE	0x37FFFD  	BRA	L_EBB_control141
L_EBB_control142:
;motor.c,187 :: 		CAN_routine();
0x11C0	0x07FE57  	RCALL	_CAN_routine
;motor.c,188 :: 		calibration_on_off = OFF;
0x11C2	0xEF2000  	CLR	W0
0x11C4	0x884040  	MOV	W0, _calibration_on_off
;motor.c,189 :: 		ebb_current_state = OFF;                                               //Going back to OFF state
0x11C6	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x11C8	0xEF2000  	CLR	W0
0x11CA	0x784880  	MOV.B	W0, [W1]
;motor.c,190 :: 		break;
0x11CC	0x370030  	BRA	L_EBB_control90
;motor.c,191 :: 		case EBB_DRIVER_BRAKING:                            //Driver is braking during a requested movement
L_EBB_control143:
;motor.c,192 :: 		buzzer_state = ON;                                     //Turn on buzzer for debugging
0x11CE	0x200010  	MOV	#1, W0
0x11D0	0x884070  	MOV	W0, _buzzer_state
;motor.c,193 :: 		if(brake_pressure_front < BRAKE_PRESSURE_TRIGGER && current_reading_motor < LSB_CURRENT_READING * MOTOR_CURRENT_TRIGGER)           //Checking brake pressures for the end of the braking action
0x11D2	0x8040B1  	MOV	_brake_pressure_front, W1
0x11D4	0x20DAC0  	MOV	#3500, W0
0x11D6	0xE10800  	CP	W1, W0
0x11D8	0x310004  	BRA GEU	L_EBB_control145
L__EBB_control311:
0x11DA	0x8040C0  	MOV	_current_reading_motor, W0
0x11DC	0xE10061  	CP	W0, #1
0x11DE	0x310001  	BRA GEU	L_EBB_control145
L__EBB_control312:
0x11E0	0x370000  	BRA	L_EBB_control144
L_EBB_control145:
L_EBB_control144:
;motor.c,195 :: 		buzzer_state = OFF;
0x11E2	0xEF2000  	CLR	W0
0x11E4	0x884070  	MOV	W0, _buzzer_state
;motor.c,196 :: 		ebb_current_state = EBB_START;              //Return to start mode to complete the movement
0x11E6	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x11E8	0xB3C010  	MOV.B	#1, W0
0x11EA	0x784880  	MOV.B	W0, [W1]
;motor.c,198 :: 		break;
0x11EC	0x370020  	BRA	L_EBB_control90
;motor.c,199 :: 		}
L_EBB_control89:
0x11EE	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x11F0	0x784010  	MOV.B	[W0], W0
0x11F2	0xE10460  	CP.B	W0, #0
0x11F4	0x32FED9  	BRA Z	L_EBB_control91
L__EBB_control313:
0x11F6	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x11F8	0x784010  	MOV.B	[W0], W0
0x11FA	0xE10461  	CP.B	W0, #1
0x11FC	0x32FF52  	BRA Z	L_EBB_control114
L__EBB_control314:
0x11FE	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x1200	0x784010  	MOV.B	[W0], W0
0x1202	0xE10462  	CP.B	W0, #2
0x1204	0x32FF65  	BRA Z	L_EBB_control118
L__EBB_control315:
0x1206	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x1208	0x784010  	MOV.B	[W0], W0
0x120A	0xE10463  	CP.B	W0, #3
0x120C	0x32FF6D  	BRA Z	L_EBB_control120
L__EBB_control316:
0x120E	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x1210	0x784010  	MOV.B	[W0], W0
0x1212	0xE10464  	CP.B	W0, #4
0x1214	0x32FF73  	BRA Z	L_EBB_control122
L__EBB_control317:
0x1216	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x1218	0x784010  	MOV.B	[W0], W0
0x121A	0xE10465  	CP.B	W0, #5
0x121C	0x32FF90  	BRA Z	L_EBB_control129
L__EBB_control318:
0x121E	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x1220	0x784010  	MOV.B	[W0], W0
0x1222	0xE10465  	CP.B	W0, #5
0x1224	0x32FFB0  	BRA Z	L_EBB_control136
L__EBB_control319:
0x1226	0x208050  	MOV	#lo_addr(_ebb_current_state), W0
0x1228	0x784010  	MOV.B	[W0], W0
0x122A	0xE10467  	CP.B	W0, #7
0x122C	0x32FFD0  	BRA Z	L_EBB_control143
L__EBB_control320:
L_EBB_control90:
;motor.c,200 :: 		}
L_end_EBB_control:
0x122E	0x78064F  	POP	W12
0x1230	0x7805CF  	POP	W11
0x1232	0x78054F  	POP	W10
0x1234	0x060000  	RETURN
; end of _EBB_control
_timer1_interrupt:
0x13B4	0xF80034  	PUSH	PSVPAG
0x13B6	0xF80036  	PUSH	RCOUNT
0x13B8	0x781F80  	PUSH	W0
0x13BA	0x200020  	MOV	#2, W0
0x13BC	0x09000C  	REPEAT	#12
0x13BE	0x781FB0  	PUSH	[W0++]
;EBB_DPX.c,101 :: 		onTimer1Interrupt {
;EBB_DPX.c,102 :: 		timer1_counter ++;
0x13C0	0x200011  	MOV	#1, W1
0x13C2	0x2080C0  	MOV	#lo_addr(_timer1_counter), W0
0x13C4	0x408810  	ADD	W1, [W0], [W0]
;EBB_DPX.c,103 :: 		if (timer1_counter == 300){
0x13C6	0x804061  	MOV	_timer1_counter, W1
0x13C8	0x2012C0  	MOV	#300, W0
0x13CA	0xE10800  	CP	W1, W0
0x13CC	0x3A0008  	BRA NZ	L_timer1_interrupt158
L__timer1_interrupt324:
;EBB_DPX.c,104 :: 		ebb_current_state = EBB_OFF;
0x13CE	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x13D0	0xEF2000  	CLR	W0
0x13D2	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,105 :: 		is_requested_movement = ON;
0x13D4	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x13D6	0xB3C010  	MOV.B	#1, W0
0x13D8	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,106 :: 		ebb_target_pos = 8;
0x13DA	0x200080  	MOV	#8, W0
0x13DC	0x884170  	MOV	W0, _ebb_target_pos
;EBB_DPX.c,107 :: 		}
L_timer1_interrupt158:
;EBB_DPX.c,108 :: 		if (timer1_counter == 600){
0x13DE	0x804061  	MOV	_timer1_counter, W1
0x13E0	0x202580  	MOV	#600, W0
0x13E2	0xE10800  	CP	W1, W0
0x13E4	0x3A0008  	BRA NZ	L_timer1_interrupt159
L__timer1_interrupt325:
;EBB_DPX.c,109 :: 		ebb_current_state = EBB_OFF;
0x13E6	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x13E8	0xEF2000  	CLR	W0
0x13EA	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,110 :: 		is_requested_movement = ON;
0x13EC	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x13EE	0xB3C010  	MOV.B	#1, W0
0x13F0	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,111 :: 		ebb_target_pos = 7;
0x13F2	0x200070  	MOV	#7, W0
0x13F4	0x884170  	MOV	W0, _ebb_target_pos
;EBB_DPX.c,112 :: 		}
L_timer1_interrupt159:
;EBB_DPX.c,113 :: 		if (timer1_counter == 900){
0x13F6	0x804061  	MOV	_timer1_counter, W1
0x13F8	0x203840  	MOV	#900, W0
0x13FA	0xE10800  	CP	W1, W0
0x13FC	0x3A0008  	BRA NZ	L_timer1_interrupt160
L__timer1_interrupt326:
;EBB_DPX.c,114 :: 		ebb_current_state = EBB_OFF;
0x13FE	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1400	0xEF2000  	CLR	W0
0x1402	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,115 :: 		is_requested_movement = ON;
0x1404	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x1406	0xB3C010  	MOV.B	#1, W0
0x1408	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,116 :: 		ebb_target_pos = 6;
0x140A	0x200060  	MOV	#6, W0
0x140C	0x884170  	MOV	W0, _ebb_target_pos
;EBB_DPX.c,117 :: 		}
L_timer1_interrupt160:
;EBB_DPX.c,118 :: 		if (timer1_counter == 1200){
0x140E	0x804061  	MOV	_timer1_counter, W1
0x1410	0x204B00  	MOV	#1200, W0
0x1412	0xE10800  	CP	W1, W0
0x1414	0x3A0008  	BRA NZ	L_timer1_interrupt161
L__timer1_interrupt327:
;EBB_DPX.c,119 :: 		ebb_current_state = EBB_OFF;
0x1416	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1418	0xEF2000  	CLR	W0
0x141A	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,120 :: 		is_requested_movement = ON;
0x141C	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x141E	0xB3C010  	MOV.B	#1, W0
0x1420	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,121 :: 		ebb_target_pos = 5;
0x1422	0x200050  	MOV	#5, W0
0x1424	0x884170  	MOV	W0, _ebb_target_pos
;EBB_DPX.c,122 :: 		}
L_timer1_interrupt161:
;EBB_DPX.c,123 :: 		if (timer1_counter == 1500){
0x1426	0x804061  	MOV	_timer1_counter, W1
0x1428	0x205DC0  	MOV	#1500, W0
0x142A	0xE10800  	CP	W1, W0
0x142C	0x3A0008  	BRA NZ	L_timer1_interrupt162
L__timer1_interrupt328:
;EBB_DPX.c,124 :: 		ebb_current_state = EBB_OFF;
0x142E	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1430	0xEF2000  	CLR	W0
0x1432	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,125 :: 		is_requested_movement = ON;
0x1434	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x1436	0xB3C010  	MOV.B	#1, W0
0x1438	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,126 :: 		ebb_target_pos = 6;
0x143A	0x200060  	MOV	#6, W0
0x143C	0x884170  	MOV	W0, _ebb_target_pos
;EBB_DPX.c,127 :: 		}
L_timer1_interrupt162:
;EBB_DPX.c,128 :: 		if (timer1_counter == 1800){
0x143E	0x804061  	MOV	_timer1_counter, W1
0x1440	0x207080  	MOV	#1800, W0
0x1442	0xE10800  	CP	W1, W0
0x1444	0x3A000A  	BRA NZ	L_timer1_interrupt163
L__timer1_interrupt329:
;EBB_DPX.c,129 :: 		ebb_current_state = EBB_OFF;
0x1446	0x208051  	MOV	#lo_addr(_ebb_current_state), W1
0x1448	0xEF2000  	CLR	W0
0x144A	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,130 :: 		is_requested_movement = ON;
0x144C	0x208101  	MOV	#lo_addr(_is_requested_movement), W1
0x144E	0xB3C010  	MOV.B	#1, W0
0x1450	0x784880  	MOV.B	W0, [W1]
;EBB_DPX.c,131 :: 		ebb_target_pos = 7;
0x1452	0x200070  	MOV	#7, W0
0x1454	0x884170  	MOV	W0, _ebb_target_pos
;EBB_DPX.c,132 :: 		timer1_counter = 0;
0x1456	0xEF2000  	CLR	W0
0x1458	0x884060  	MOV	W0, _timer1_counter
;EBB_DPX.c,133 :: 		}
L_timer1_interrupt163:
;EBB_DPX.c,142 :: 		clearTimer1();
0x145A	0xA96084  	BCLR	IFS0bits, #3
;EBB_DPX.c,143 :: 		}
L_end_timer1_interrupt:
0x145C	0x2001A0  	MOV	#26, W0
0x145E	0x09000C  	REPEAT	#12
0x1460	0x78104F  	POP	[W0--]
0x1462	0x78004F  	POP	W0
0x1464	0xF90036  	POP	RCOUNT
0x1466	0xF90034  	POP	PSVPAG
0x1468	0x064000  	RETFIE
; end of _timer1_interrupt
;EBB_DPX.c,0 :: ?ICS_error_flag [2]
0x15F2	0x0000 ;?ICS_error_flag+0
; end of ?ICS_error_flag
;EBB_DPX.c,0 :: ?ICS_calibration_on_off [2]
0x15F4	0x0000 ;?ICS_calibration_on_off+0
; end of ?ICS_calibration_on_off
;EBB_DPX.c,0 :: ?ICS_can_err [2]
0x15F6	0x0000 ;?ICS_can_err+0
; end of ?ICS_can_err
;EBB_DPX.c,0 :: ?ICS_timer1_counter [2]
0x15F8	0x0000 ;?ICS_timer1_counter+0
; end of ?ICS_timer1_counter
;EBB_DPX.c,0 :: ?ICS_buzzer_state [2]
0x15FA	0x0000 ;?ICS_buzzer_state+0
; end of ?ICS_buzzer_state
;EBB_DPX.c,8 :: _PRESCALER_VALUES [8]
0x15FC	0x0001 ;_PRESCALER_VALUES+0
0x15FE	0x0008 ;_PRESCALER_VALUES+2
0x1600	0x0040 ;_PRESCALER_VALUES+4
0x1602	0x0100 ;_PRESCALER_VALUES+6
; end of _PRESCALER_VALUES
;EBB_DPX.c,0 :: ?ICS_can_txPriority [2]
0x1604	0x00FD ;?ICS_can_txPriority+0
; end of ?ICS_can_txPriority
;EBB_DPX.c,0 :: ?ICS_can_dataOutLength [2]
0x1606	0x0000 ;?ICS_can_dataOutLength+0
; end of ?ICS_can_dataOutLength
;,0 :: _initBlock_8 [2]
; Containing: ?ICS_blink_counter [1]
;             ?ICS_brake_counter [1]
0x1608	0x0000 ;_initBlock_8+0 : ?ICS_blink_counter at 0x1608 : ?ICS_brake_counter at 0x1609
; end of _initBlock_8
;EBB_DPX.c,0 :: ?ICS_timer2_counter [2]
0x160A	0x0000 ;?ICS_timer2_counter+0
; end of ?ICS_timer2_counter
;,0 :: _initBlock_10 [2]
; Containing: ?ICS_is_requested_calibration [1]
;             ?ICS_ebb_current_state [1]
0x160C	0x0000 ;_initBlock_10+0 : ?ICS_is_requested_calibration at 0x160C : ?ICS_ebb_current_state at 0x160D
; end of _initBlock_10
;EBB_DPX.c,0 :: ?ICS_is_requested_movement [1]
0x160E	0x00 ;?ICS_is_requested_movement+0
; end of ?ICS_is_requested_movement
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100     [300]    __Lib_CAN_1_CAN1IDToRegs
0x022C     [310]    __Div_FP
0x0362     [282]    __Mul_FP
0x047C      [22]    __Lib_EEPROM_p30_KeySequence
0x0492       [8]    _Can_getWriteFlags
0x049A      [40]    _CAN1SetMask
0x04C2     [154]    _CAN1SetBaudRate
0x055C     [110]    _CAN1SetFilter
0x05CA      [16]    _Can_addByteToWritePacket
0x05DA     [158]    _CAN1Write
0x0678     [120]    __Float2Longint
0x06F0     [182]    __Long2Float
0x07A6      [20]    __Lib_EEPROM_p30_EraseGlobal
0x07BA      [78]    _CAN1SetOperationMode
0x0808      [16]    _getExactTimerPrescaler
0x0818      [14]    _Delay_100ms
0x0826      [62]    _getTimerPeriod
0x0864       [4]    _Get_Fosc_Per_Cyc
0x0868      [80]    __Lib_CAN_1_RegsToCAN1ID
0x08B8     [174]    _setInterruptPriority
0x0966      [56]    _getTimerPrescaler
0x099E      [82]    __Divide_32x32
0x09F0      [18]    __Multiply_32x32
0x0A02      [88]    __Modulus_32x32
0x0A5A       [6]    _Get_Fosc_kHz
0x0A60       [4]    _Can_setWritePriority
0x0A64      [14]    _EEPROM_Erase
0x0A72     [224]    _CAN1Initialize
0x0B52     [230]    _Can_initInterrupt
0x0C38      [24]    _Can_addIntToWritePacket
0x0C50      [64]    _Can_write
0x0C90      [34]    _Can_resetWritePacket
0x0CB2       [4]    _Can_clearB1Flag
0x0CB6      [16]    _Can_B1hasBeenReceived
0x0CC6     [202]    _CAN1Read
0x0D90       [4]    _Can_clearB0Flag
0x0D94      [16]    _Can_B0hasBeenReceived
0x0DA4      [18]    _EEPROM_Read
0x0DB6     [186]    _setTimer
0x0E70      [30]    _CAN_routine
0x0E8E     [132]    _UART1_Init
0x0F12     [106]    _Can_init
0x0F7C      [36]    _EEPROM_Write
0x0FA0     [662]    _EBB_control
0x1236       [4]    _Can_clearInterrupt
0x123A     [282]    _EBB_Init
0x1354      [42]    _Can_read
0x137E      [54]    _timer2_interrupt
0x13B4     [182]    _timer1_interrupt
0x146A      [36]    _timer4_interrupt
0x148E      [24]    _main
0x14A6     [238]    _CAN_Interrupt
0x1594      [94]    _counter_quarter_turn_match
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x034E       [2]    C1TX2CON
0x0300       [2]    C1RXF0SID
0x0308       [2]    C1RXF1SID
0x035E       [2]    C1TX1CON
0x034E       [1]    C1TX2CONbits
0x0340       [2]    C1TX2SID
0x0310       [2]    C1RXF2SID
0x0330       [2]    C1RXM0SID
0x0338       [2]    C1RXM1SID
0x0392       [1]    C1CFG1bits
0x0318       [2]    C1RXF3SID
0x0320       [2]    C1RXF4SID
0x0328       [2]    C1RXF5SID
0x0816       [2]    _brake_pressure_front
0x0818       [2]    _current_reading_motor
0x0390       [2]    C1CTRLbits
0x036E       [2]    C1TX0CON
0x035E       [1]    C1TX1CONbits
0x0350       [2]    C1TX1SID
0x038E       [1]    C1RX0CONbits
0x036E       [1]    C1TX0CONbits
0x0360       [2]    C1TX0SID
0x0394       [2]    C1CFG2bits
0x0396       [2]    C1INTFbits
0x0380       [2]    C1RX0SID
0x038E       [2]    C1RX0CON
0x0122       [0]    UPDN_bit
0x0086       [2]    IFS1bits
0x037E       [1]    C1RX1CONbits
0x0084       [2]    IFS0bits
0x0370       [2]    C1RX1SID
0x037E       [2]    C1RX1CON
0x0762       [2]    NVMADR
0x0764       [2]    NVMADRU
0x081A       [2]    _UART_Wr_Ptr
0x0032       [2]    TBLPAG
0x0760       [2]    NVMCON
0x0766       [2]    NVMKEY
0x081C       [2]    _UART_Rd_Ptr
0x020E       [2]    U1STA
0x0214       [2]    U1BRG
0x0122       [0]    DIRECTION_REGISTER
0x081E       [2]    _UART_Rdy_Ptr
0x0820       [2]    _UART_Tx_Idle_Ptr
0x020C       [2]    U1MODE
0x0822       [2]    _ebb_settings
0x011E       [2]    T4CONbits
0x011A       [2]    PR4
0x0094       [2]    IPC0bits
0x008C       [2]    IEC0bits
0x0110       [2]    T2CONbits
0x010C       [2]    PR2
0x009C       [2]    IPC4bits
0x02A8       [2]    ADPCFG
0x02D2       [1]    TRISDbits
0x02D8       [2]    TRISEbits
0x009E       [2]    IPC5bits
0x0096       [2]    IPC1bits
0x0760       [0]    WR_bit
0x0052       [2]    DISICNT
0x008E       [2]    IEC1bits
0x0398       [1]    C1INTEbits
0x0824       [8]    _can_dataOutBuffer
0x0042       [2]    SRbits
0x0104       [2]    T1CONbits
0x0102       [2]    PR1
0x082C       [2]    _ebb_current_pos
0x02C6       [2]    TRISBbits
0x01C0       [2]    PTCON
0x02DC       [0]    FORWARD
0x02DC       [0]    LATE4_bit
0x01C4       [2]    PTPER
0x01D6       [2]    PDC1
0x01C2       [2]    PTMR
0x02DC       [0]    REVERSE
0x082E       [2]    _ebb_target_pos
0x0830       [2]    _motor_current_position
0x0832       [2]    _motor_target_position
0x02DC       [0]    LATE3_bit
0x02DC       [0]    ENABLE
0x02DC       [0]    LATE2_bit
0x02D6       [0]    LATD1_bit
0x02D6       [0]    LED_G
0x02D6       [0]    LATD3_bit
0x02D6       [0]    BUZZER
0x02D6       [0]    LATD2_bit
0x02D6       [0]    LED_B
0x0122       [2]    QEICON
0x0088       [2]    IFS2bits
0x0090       [2]    IEC2bits
0x01C8       [2]    PWMCON1
0x0126       [2]    POSCNT
0x0128       [2]    MAXCNT
0x00A8       [2]    IPC10bits
0x0800       [2]    _can_txPriority
0x0802       [2]    _can_dataOutLength
0x0804       [1]    _blink_counter
0x0806       [2]    _error_flag
0x0808       [2]    _calibration_on_off
0x080A       [2]    _can_err
0x080C       [2]    _timer1_counter
0x080E       [2]    _buzzer_state
0x0805       [1]    _ebb_current_state
0x0810       [1]    _is_requested_movement
0x0812       [2]    _timer2_counter
0x0811       [1]    _brake_counter
0x0814       [1]    _is_requested_calibration
0x0032       [2]    TBLPAG
0x0052       [2]    DISICNT
0x0014       [2]    FARG___Lib_CAN_1_CAN1IDToRegs_ptr
0x0016       [4]    FARG___Lib_CAN_1_CAN1IDToRegs_val
0x001A       [2]    FARG___Lib_CAN_1_CAN1IDToRegs_RegType
0x0102       [2]    PR1
0x010C       [2]    PR2
0x011A       [2]    PR4
0x0122       [2]    QEICON
0x0126       [2]    POSCNT
0x0128       [2]    MAXCNT
0x01C0       [2]    PTCON
0x01C2       [2]    PTMR
0x01C4       [2]    PTPER
0x01C8       [2]    PWMCON1
0x01D6       [2]    PDC1
0x020C       [2]    U1MODE
0x020E       [2]    U1STA
0x0214       [2]    U1BRG
0x02A8       [2]    ADPCFG
0x0300       [2]    C1RXF0SID
0x0308       [2]    C1RXF1SID
0x0310       [2]    C1RXF2SID
0x0318       [2]    C1RXF3SID
0x0320       [2]    C1RXF4SID
0x0328       [2]    C1RXF5SID
0x0330       [2]    C1RXM0SID
0x0338       [2]    C1RXM1SID
0x0340       [2]    C1TX2SID
0x034E       [2]    C1TX2CON
0x0350       [2]    C1TX1SID
0x035E       [2]    C1TX1CON
0x0360       [2]    C1TX0SID
0x036E       [2]    C1TX0CON
0x0370       [2]    C1RX1SID
0x037E       [2]    C1RX1CON
0x0380       [2]    C1RX0SID
0x038E       [2]    C1RX0CON
0x0014       [2]    FARG_CAN1SetMask_CAN_MASK
0x0016       [4]    FARG_CAN1SetMask_val
0x001A       [2]    FARG_CAN1SetMask_CAN_CONFIG_FLAGS
0x0014       [2]    FARG_CAN1SetBaudRate_SJW
0x0016       [2]    FARG_CAN1SetBaudRate_BRP
0x0018       [2]    FARG_CAN1SetBaudRate_PHSEG1
0x001A       [2]    FARG_CAN1SetBaudRate_PHSEG2
0x0014       [2]    FARG_CAN1SetFilter_CAN_FILTER
0x0016       [4]    FARG_CAN1SetFilter_val
0x001A       [2]    FARG_CAN1SetFilter_CAN_CONFIG_FLAGS
0x0014       [1]    FARG_Can_addByteToWritePacket_dataOut
0x0014       [4]    FARG_CAN1Write_id
0x0018       [2]    FARG_CAN1Write_Data_
0x001A       [2]    FARG_CAN1Write_DataLen
0x0760       [2]    NVMCON
0x0762       [2]    NVMADR
0x0764       [2]    NVMADRU
0x0766       [2]    NVMKEY
0x0014       [4]    FARG___Lib_EEPROM_p30_EraseGlobal_address
0x0018       [2]    FARG___Lib_EEPROM_p30_EraseGlobal_nvmcon_data
0x0014       [2]    FARG_CAN1SetOperationMode_mode
0x0016       [2]    FARG_CAN1SetOperationMode_WAIT
0x0014       [4]    FARG_getExactTimerPrescaler_timePeriod
0x0014       [4]    FARG_getTimerPeriod_timePeriod
0x0018       [1]    FARG_getTimerPeriod_prescalerIndex
0x0014       [2]    FARG___Lib_CAN_1_RegsToCAN1ID_ptr
0x0016       [2]    FARG___Lib_CAN_1_RegsToCAN1ID_CAN_CONFIG_FLAGS
0x0014       [1]    FARG_setInterruptPriority_device
0x0016       [1]    FARG_setInterruptPriority_priority
0x0014       [4]    FARG_getTimerPrescaler_timePeriod
0x0014       [2]    FARG_Can_setWritePriority_txPriority
0x0014       [4]    FARG_EEPROM_Erase_address
0x0014       [2]    FARG_CAN1Initialize_SJW
0x0016       [2]    FARG_CAN1Initialize_BRP
0x0018       [2]    FARG_CAN1Initialize_PHSEG1
0x001A       [2]    FARG_CAN1Initialize_PHSEG2
0x0014       [2]    FARG_Can_addIntToWritePacket_dataOut
0x0014       [4]    FARG_Can_write_id
0x0014       [2]    FARG_CAN1Read_id
0x0016       [2]    FARG_CAN1Read_data_
0x0018       [2]    FARG_CAN1Read_dataLen
0x001A       [2]    FARG_CAN1Read_CAN_RX_MSG_FLAGS
0x0014       [4]    FARG_EEPROM_Read_address
0x0014       [1]    FARG_setTimer_device
0x0016       [4]    FARG_setTimer_timePeriod
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [4]    FARG_EEPROM_Write_address
0x0018       [2]    FARG_EEPROM_Write_data_
0x0014       [2]    FARG_Can_read_id
0x0016       [2]    FARG_Can_read_dataBuffer
0x0018       [2]    FARG_Can_read_dataLength
0x001A       [2]    FARG_Can_read_inFlags
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x15F2       [2]    ?ICS_error_flag
0x15F4       [2]    ?ICS_calibration_on_off
0x15F6       [2]    ?ICS_can_err
0x15F8       [2]    ?ICS_timer1_counter
0x15FA       [2]    ?ICS_buzzer_state
0x15FC       [8]    _PRESCALER_VALUES
0x1604       [2]    ?ICS_can_txPriority
0x1606       [2]    ?ICS_can_dataOutLength
0x1608       [1]    ?ICS_blink_counter
0x1609       [1]    ?ICS_brake_counter
0x160A       [2]    ?ICS_timer2_counter
0x160C       [1]    ?ICS_is_requested_calibration
0x160D       [1]    ?ICS_ebb_current_state
0x160E       [1]    ?ICS_is_requested_movement
//** Label List: ** 
//----------------------------------------------
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L_setInterruptPriority12
  L_setInterruptPriority13
  L_setInterruptPriority14
  L_setInterruptPriority15
  L_setInterruptPriority16
  L_setInterruptPriority17
  L_setInterruptPriority18
  L_setInterruptPriority19
  L_setInterruptPriority20
  L_setExternalInterrupt21
  L_setExternalInterrupt22
  L_setExternalInterrupt23
  L_setExternalInterrupt24
  L_setExternalInterrupt25
  L_setExternalInterrupt26
  L_switchExternalInterruptEdge27
  L_switchExternalInterruptEdge28
  L_switchExternalInterruptEdge29
  L_switchExternalInterruptEdge30
  L_switchExternalInterruptEdge31
  L_switchExternalInterruptEdge32
  L_switchExternalInterruptEdge33
  L_switchExternalInterruptEdge34
  L_switchExternalInterruptEdge35
  L_switchExternalInterruptEdge36
  L_switchExternalInterruptEdge37
  L_switchExternalInterruptEdge38
  L_getExternalInterruptEdge39
  L_getExternalInterruptEdge40
  L_getExternalInterruptEdge41
  L_getExternalInterruptEdge42
  L_getExternalInterruptEdge43
  L_getExternalInterruptEdge44
  L_clearExternalInterrupt45
  L_clearExternalInterrupt46
  L_clearExternalInterrupt47
  L_clearExternalInterrupt48
  L_clearExternalInterrupt49
  L_clearExternalInterrupt50
  L_setTimer51
  L_setTimer52
  L_setTimer53
  L_setTimer54
  L_setTimer55
  L_clearTimer56
  L_clearTimer57
  L_clearTimer58
  L_clearTimer59
  L_clearTimer60
  L_turnOnTimer61
  L_turnOnTimer62
  L_turnOnTimer63
  L_turnOnTimer64
  L_turnOnTimer65
  L_turnOffTimer66
  L_turnOffTimer67
  L_turnOffTimer68
  L_turnOffTimer69
  L_turnOffTimer70
  L_getTimerPrescaler71
  L_getTimerPrescaler72
  L_getTimerPrescaler73
  L_getTimerPrescaler74
  L_EEPROM_writeInt75
  L_EEPROM_writeInt76
  L_EEPROM_writeArray77
  L_EEPROM_writeArray78
  L_EEPROM_writeArray79
  L_EEPROM_readArray80
  L_EEPROM_readArray81
  L_EEPROM_readArray82
  L_counter_quarter_turn_match83
  L_counter_quarter_turn_match84
  L_counter_quarter_turn_match85
  L_counter_quarter_turn_match86
  L_counter_quarter_turn_match87
  L_counter_quarter_turn_match88
  L_EBB_control89
  L_EBB_control90
  L_EBB_control91
  L_EBB_control92
  L_EBB_control93
  L_EBB_control94
  L_EBB_control95
  L_EBB_control96
  L_EBB_control97
  L_EBB_control98
  L_EBB_control99
  L_EBB_control100
  L_EBB_control101
  L_EBB_control102
  L_EBB_control103
  L_EBB_control104
  L_EBB_control105
  L_EBB_control106
  L_EBB_control107
  L_EBB_control108
  L_EBB_control109
  L_EBB_control110
  L_EBB_control111
  L_EBB_control112
  L_EBB_control113
  L_EBB_control114
  L_EBB_control115
  L_EBB_control116
  L_EBB_control117
  L_EBB_control118
  L_EBB_control119
  L_EBB_control120
  L_EBB_control121
  L_EBB_control122
  L_EBB_control123
  L_EBB_control124
  L_EBB_control125
  L_EBB_control126
  L_EBB_control127
  L_EBB_control128
  L_EBB_control129
  L_EBB_control130
  L_EBB_control131
  L_EBB_control132
  L_EBB_control133
  L_EBB_control134
  L_EBB_control135
  L_EBB_control136
  L_EBB_control137
  L_EBB_control138
  L_EBB_control139
  L_EBB_control140
  L_EBB_control141
  L_EBB_control142
  L_EBB_control143
  L_EBB_control144
  L_EBB_control145
  L_EBB_control146
  L_EBB_Init147
  L_EBB_Init148
  L_EBB_Init149
  L_EBB_Init150
  L_EBB_Init151
  L_EBB_Init152
  L_EBB_Init153
  L_EBB_Init154
  L_EBB_Init155
  L_EBB_Init156
  L_timer1_interrupt158
  L_timer1_interrupt159
  L_timer1_interrupt160
  L_timer1_interrupt161
  L_timer1_interrupt162
  L_timer1_interrupt163
  L_timer2_interrupt164
  L_timer4_interrupt165
  L_main166
  L_main167
  L_CAN_Interrupt168
  L_CAN_Interrupt169
  L_CAN_Interrupt170
  L_CAN_Interrupt171
  L_CAN_Interrupt172
  L_CAN_Interrupt173
  L_CAN_Interrupt174
  L_CAN_Interrupt175
  L_CAN_Interrupt176
  L_CAN_Interrupt177
  L_CAN_Interrupt178
  L_CAN_Interrupt179
  L_CAN_Interrupt180
  L__Can_write181
  L__Can_write182
  L__Can_write183
  L__CAN_Interrupt184
  L__CAN_Interrupt185
  L__CAN_Interrupt186
  L__CAN_Interrupt187
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read190
  L__Can_read191
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write197
  L__Can_write198
  L__Can_write199
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket202
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived205
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived207
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_end_setAllPinAsDigital
  _setAllPinAsDigital
  L_end_setInterruptPriority
  _setInterruptPriority
  L__setInterruptPriority214
  L__setInterruptPriority215
  L__setInterruptPriority216
  L__setInterruptPriority217
  L__setInterruptPriority218
  L__setInterruptPriority219
  L_end_setExternalInterrupt
  _setExternalInterrupt
  L__setExternalInterrupt221
  L__setExternalInterrupt222
  L__setExternalInterrupt223
  L_end_switchExternalInterruptEdge
  _switchExternalInterruptEdge
  L__switchExternalInterruptEdge225
  L__switchExternalInterruptEdge226
  L__switchExternalInterruptEdge227
  L__switchExternalInterruptEdge228
  L__switchExternalInterruptEdge229
  L__switchExternalInterruptEdge230
  L_end_getExternalInterruptEdge
  _getExternalInterruptEdge
  L__getExternalInterruptEdge232
  L__getExternalInterruptEdge233
  L__getExternalInterruptEdge234
  L_end_clearExternalInterrupt
  _clearExternalInterrupt
  L__clearExternalInterrupt236
  L__clearExternalInterrupt237
  L__clearExternalInterrupt238
  L_end_setTimer
  _setTimer
  L__setTimer240
  L__setTimer241
  L__setTimer242
  L_end_clearTimer
  _clearTimer
  L__clearTimer244
  L__clearTimer245
  L__clearTimer246
  L_end_turnOnTimer
  _turnOnTimer
  L__turnOnTimer248
  L__turnOnTimer249
  L__turnOnTimer250
  L_end_turnOffTimer
  _turnOffTimer
  L__turnOffTimer252
  L__turnOffTimer253
  L__turnOffTimer254
  L_end_getTimerPeriod
  _getTimerPeriod
  L_end_getTimerPrescaler
  _getTimerPrescaler
  L__getTimerPrescaler257
  L__getTimerPrescaler258
  L_end_getExactTimerPrescaler
  _getExactTimerPrescaler
  L_end_setupAnalogSampling
  _setupAnalogSampling
  L_end_turnOnAnalogModule
  _turnOnAnalogModule
  L_end_turnOffAnalogModule
  _turnOffAnalogModule
  L_end_startSampling
  _startSampling
  L_end_getAnalogValue
  _getAnalogValue
  L_end_setAnalogPIN
  _setAnalogPIN
  L_end_unsetAnalogPIN
  _unsetAnalogPIN
  L_end_setAnalogInterrupt
  _setAnalogInterrupt
  L_end_unsetAnalogInterrupt
  _unsetAnalogInterrupt
  L_end_clearAnalogInterrupt
  _clearAnalogInterrupt
  L_end_setAutomaticSampling
  _setAutomaticSampling
  L_end_unsetAutomaticSampling
  _unsetAutomaticSampling
  L_end_setAnalogVoltageReference
  _setAnalogVoltageReference
  L_end_setAnalogDataOutputFormat
  _setAnalogDataOutputFormat
  L_end_getMinimumAnalogClockConversion
  _getMinimumAnalogClockConversion
  L_end_EEPROM_writeInt
  _EEPROM_writeInt
  L_end_EEPROM_readInt
  _EEPROM_readInt
  L_end_EEPROM_writeArray
  _EEPROM_writeArray
  L__EEPROM_writeArray278
  L_end_EEPROM_readArray
  _EEPROM_readArray
  L__EEPROM_readArray280
  L_end_CAN_routine
  _CAN_routine
  L_end_Debug_UART_Write
  _Debug_UART_Write
  L_end_counter_quarter_turn_match
  _counter_quarter_turn_match
  L__counter_quarter_turn_match284
  L__counter_quarter_turn_match285
  L__counter_quarter_turn_match286
  L_end_EBB_control
  _EBB_control
  L__EBB_control288
  L__EBB_control289
  L__EBB_control290
  L__EBB_control291
  L__EBB_control292
  L__EBB_control293
  L__EBB_control294
  L__EBB_control295
  L__EBB_control296
  L__EBB_control297
  L__EBB_control298
  L__EBB_control299
  L__EBB_control300
  L__EBB_control301
  L__EBB_control302
  L__EBB_control303
  L__EBB_control304
  L__EBB_control305
  L__EBB_control306
  L__EBB_control307
  L__EBB_control308
  L__EBB_control309
  L__EBB_control310
  L__EBB_control311
  L__EBB_control312
  L__EBB_control313
  L__EBB_control314
  L__EBB_control315
  L__EBB_control316
  L__EBB_control317
  L__EBB_control318
  L__EBB_control319
  L__EBB_control320
  L_end_EBB_Init
  _EBB_Init
  L__EBB_Init322
  L_end_timer1_interrupt
  _timer1_interrupt
  L__timer1_interrupt324
  L__timer1_interrupt325
  L__timer1_interrupt326
  L__timer1_interrupt327
  L__timer1_interrupt328
  L__timer1_interrupt329
  L_end_timer2_interrupt
  _timer2_interrupt
  L__timer2_interrupt331
  L_end_timer4_interrupt
  _timer4_interrupt
  L__timer4_interrupt333
  L_end_main
  _main
  L__main_end_loop
  L_end_CAN_Interrupt
  _CAN_Interrupt
  L__CAN_Interrupt337
  L__CAN_Interrupt338
  L__CAN_Interrupt339
  L__CAN_Interrupt340
  L__CAN_Interrupt341
  L__CAN_Interrupt342
  L__CAN_Interrupt343
  L__CAN_Interrupt344
  L__CAN_Interrupt345
  L__CAN_Interrupt346
  L___Lib_CAN_1_CAN1IDToRegs0
  L___Lib_CAN_1_CAN1IDToRegs1
  L___Lib_CAN_1_CAN1IDToRegs2
  L___Lib_CAN_1_CAN1IDToRegs3
  L___Lib_CAN_1_CAN1IDToRegs4
  L___Lib_CAN_1_CAN1IDToRegs5
  L___Lib_CAN_1_CAN1IDToRegs6
  L___Lib_CAN_1_CAN1IDToRegs7
  L___Lib_CAN_1_CAN1IDToRegs8
  L___Lib_CAN_1_CAN1IDToRegs9
  L___Lib_CAN_1_CAN1IDToRegs10
  L___Lib_CAN_1_CAN1IDToRegs11
  L___Lib_CAN_1_CAN1IDToRegs12
  L_CAN1SetOperationMode13
  L_CAN1SetOperationMode14
  L_CAN1SetOperationMode15
  L_CAN1SetOperationMode16
  L_CAN1SetBaudRate17
  L_CAN1SetBaudRate18
  L_CAN1SetBaudRate19
  L_CAN1SetMask20
  L_CAN1SetMask21
  L_CAN1SetFilter22
  L_CAN1SetFilter23
  L_CAN1SetFilter24
  L_CAN1SetFilter25
  L_CAN1SetFilter26
  L_CAN1SetFilter27
  L_CAN1SetFilter28
  L_CAN1SetFilter29
  L___Lib_CAN_1_RegsToCAN1ID30
  L___Lib_CAN_1_RegsToCAN1ID31
  L_CAN1Write32
  L_CAN1Write33
  L_CAN1Write34
  L_CAN1Write35
  L_CAN1Write36
  L_CAN1Write37
  L_CAN1Write38
  L_CAN1Write39
  L_CAN1Write40
  L_CAN1Write41
  L_CAN1Write42
  L_CAN1Read43
  L_CAN1Read44
  L_CAN1Read45
  L_CAN1Read46
  L_CAN1Read47
  L_CAN1Read48
  L_CAN1Read49
  L_CAN1Read50
  L_CAN1Read51
  L_CAN1Read52
  L_CAN1Read53
  L_CAN1Read54
  L_CAN1Read55
  L_CAN1Read56
  L_CAN1Read57
  L_CAN1Read58
  L_CAN1Initialize59
  L_CAN1Initialize60
  L_CAN1Initialize61
  L_CAN1Initialize62
  L_CAN1Initialize63
  L_end_CAN1IDToRegs
  __Lib_CAN_1_CAN1IDToRegs
  L___Lib_CAN_1_CAN1IDToRegs65
  L___Lib_CAN_1_CAN1IDToRegs66
  L___Lib_CAN_1_CAN1IDToRegs67
  L_end_CAN1SetOperationMode
  _CAN1SetOperationMode
  L__CAN1SetOperationMode69
  L__CAN1SetOperationMode70
  L_end_CAN1GetOperationMode
  _CAN1GetOperationMode
  L_end_CAN1SetBaudRate
  _CAN1SetBaudRate
  L_end_CAN1SetMask
  _CAN1SetMask
  L__CAN1SetMask74
  L_end_CAN1SetFilter
  _CAN1SetFilter
  L__CAN1SetFilter76
  L__CAN1SetFilter77
  L__CAN1SetFilter78
  L__CAN1SetFilter79
  L__CAN1SetFilter80
  L_end_RegsToCAN1ID
  __Lib_CAN_1_RegsToCAN1ID
  L_end_CAN1Write
  _CAN1Write
  L__CAN1Write83
  L_end_CAN1Read
  _CAN1Read
  L__CAN1Read85
  L__CAN1Read86
  L__CAN1Read87
  L_end_CAN1Initialize
  _CAN1Initialize
  L__CAN1Initialize89
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_EEPROM_Write0
  L_EEPROM_Write1
  L_EEPROM_Write_Block2
  L_EEPROM_Write_Block3
  L_end_KeySequence
  __Lib_EEPROM_p30_KeySequence
  L_end_EraseGlobal
  __Lib_EEPROM_p30_EraseGlobal
  L_end_EEPROM_Erase
  _EEPROM_Erase
  L_end_EEPROM_Erase_Block
  _EEPROM_Erase_Block
  L_end_EEPROM_Write
  _EEPROM_Write
  L_end_EEPROM_Write_Block
  _EEPROM_Write_Block
  L_end_EEPROM_Read
  _EEPROM_Read
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  Float__fpack
  the_end_Float__fpack
  Float_notsubnormal
  Float_zerosig
  Float_subnormal
  Float_packupandgo
  Float_overflow
  LL_intro_Long2Float
  the_end__Long2Float
  Longint2Float__floatsisf
  Longword2Float__floatuisf
  Long2Float_notspecial
  Long2Float_return0
  Longint2Float_negative
  Long2Float_fixshift
  Long2Float_round
  Long2Float_shiftleft
  Long2Float_shiftright
  Long2Float__fpack
  Long2Float_notsubnormal
  Long2Float_zerosig
  Long2Float_subnormal
  Long2Float_packupandgo
  Long2Float_overflow
  Longlong2Float_floatdisf
  the_end__LongLong2Float
  Longlong2Float_negative
  Longlong2Float_notspecial
  Longlong2Float_return0
  Longlong2Float_fixshift
  Longlong2Float_round
  Longlong2Float_shiftleft
  Longlong2Float_shiftright
  Float2Longword_fixunssfsi
  the_end__Float2Longword
  Float2Longword_funpack
  Float2Longword_returnzero
  Float2Longword_exit
  Float2Longword_shiftright
  Float2Longword_shiftleft
  Float2Longword_shiftrightloop
  Float2Longword_zeroorsub
  Float2Longword_nanorinf
  Float2Longword_finitereturn
  Float2Longword_infinite
  Float2Longword_subnormal
  Float2Longword_normalize
  Float2Longint__fixsfsi
  the_end__Float2Longint
  Float2Longint__funpack
  Float2Longint_setsign
  Float2Longint_shiftright
  Float2Longint_shiftleft
  Float2Longint_exit
  Float2Longint_shiftrightloop
  Float2Longint_zeroorsub
  Float2Longint_nanorinf
  Float2Longint_finitereturn
  Float2Longint_infinite
  Float2Longint_subnormal
  Float2Longint_normalize
  AddSubFP__addsf3
  the_end__AddSub_FP
  AddSubFP__funpack2
  AddSubFP__fPropagateNaN
  AddSubFP_aisinfinite
  AddSubFP_checkspecialb
  AddSubFP_return2_3
  AddSubFP_getsign
  AddSubFP_gotsign
  AddSubFP_expcanonical
  AddSubFP_nonegate
  AddSubFP_aligniter
  AddSubFP_signoff
  AddSubFP_align
  AddSubFP_aligned
  AddSubFP_normalizesum
  AddSubFP_checknormal
  AddSubFP_round
  AddSubFP_discardguard
  AddSubFP_underflow
  AddSubFP_normalizeloop
  AddSubFP_normalizeexit
  AddSubFP_normalizetest
  AddSubFP__fpack
  AddSubFP__fbopExit
  AddSubFP_return8_3
  AddSubFP__fbopReturnNaN
  AddSubFP__funpack
  AddSubFP_return0_1
  AddSubFP_return8_1
  AddSubFP_notsubnormal_1
  AddSubFP_zerosig
  AddSubFP_subnormal_1
  AddSubFP_packupandgo
  AddSubFP_overflow
  AddSubFP_zeroorsub
  AddSubFP_nanorinf
  AddSubFP_finitereturn
  AddSubFP_infinite
  AddSubFP_subnormal_2
  AddSubFP_normalize
  MulFP___mulsf3
  the_end__Mul_FP
  MulFP__funpack2
  MulFP__fPropagateNaN
  MulFP_aisinfinite
  MulFP_bisinfinite
  MulFP_return8_1
  MulFP_return2_1
  MulFP_formsticky
  MulFP_formRandSig
  MulFP__fpack
  MulFP_return0_1
  MulFP__fbopExit
  MulFP__fbopReturnNaN
  MulFP__funpack
  MulFP_return0_2
  MulFP_return8_2
  MulFP_notsubnormal
  MulFP_zerosig
  MulFP_subnormal1
  MulFP_packupandgo
  MulFP_overflow
  MulFP_zeroorsub
  MulFP_nanorinf
  MulFP_finitereturn
  MulFP_infinite
  MulFP_subnormal2
  MulFP_normalize
  DivFP___divsf3
  the_end__Div_FP
  DivFP__funpack2
  DivFP__fPropagateNaN
  DivFP_aisinfinite
  DivFP_returnZero
  DivFP_aiszero
  DivFP_returnInf
  DivFP_finitenonzero
  DivFP_diventry
  DivFP_divnext
  DivFP_divdone
  DivFP_divloop
  DivFP_stickyok
  DivFP_guardused
  DivFP__fpack
  DivFP_return0_1
  DivFP__fbopExit
  DivFP__fbopReturnNaN
  DivFP_return8_1
  DivFP_return2_1
  DivFP__funpack
  DivFP_return0
  DivFP_return8
  DivFP_notsubnormal
  DivFP_zerosig
  DivFP_subnormal
  DivFP_packupandgo
  DivFP_overfloW
  DivFP_zeroorsub
  DivFP_nanorinf
  DivFP_finitereturn
  DivFP_infinite
  DivFP_subnormal2
  DivFP_normalize
  CompareFp__fcompare
  the_end__Compare_Fp
  CompareFp__funpack2
  CompareFp_exit
  CompareFp_comparemag
  CompareFp_returnEqual
  CompareFp_adjust
  CompareFp__funpack
  CompareFp_zeroorsub
  CompareFp_nanorinf
  CompareFp_finitereturn
  CompareFp_infinite
  CompareFp_subnormal
  CompareFp_normalize
  L_end_Float_fpack
  _Float_fpack
  L_end__Long2Float
  __Long2Float
  L_end__LongLong2Float
  __LongLong2Float
  L_end__Float2Longword
  __Float2Longword
  L_end__Float2Longint
  __Float2Longint
  L_end__AddSub_FP
  __AddSub_FP
  L_end__Sub_FP
  __Sub_FP
  L_end__Mul_FP
  __Mul_FP
  L_end__Div_FP
  __Div_FP
  L_end__Compare_Fp
  __Compare_Fp
  L_end__Compare_Le_Fp
  __Compare_Le_Fp
  L_end__Compare_Ge_Fp
  __Compare_Ge_Fp
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init_Advanced14
  L_UART2_Write15
  L_UART2_Write16
  L_UART2_Write_Text17
  L_UART2_Write_Text18
  L_UART2_Read_Text19
  L_UART2_Read_Text20
  L_UART2_Read_Text21
  L_UART2_Read_Text22
  L_UART2_Read_Text23
  L_UART2_Read_Text24
  L_UART2_Read_Text25
  L_UART2_Read_Text26
  L_UART2_Read_Text27
  L_UART2_Init28
  L_UART2_Init_Advanced29
  L_UART_Write_Text30
  L_UART_Write_Text31
  L_UART_Read_Text32
  L_UART_Read_Text33
  L_UART_Read_Text34
  L_UART_Read_Text35
  L_UART_Read_Text36
  L_UART_Read_Text37
  L_UART_Read_Text38
  L_UART_Read_Text39
  L_UART_Read_Text40
  L__UART1_Read_Text41
  L__UART1_Init42
  L__UART1_Init_Advanced43
  L__UART2_Read_Text44
  L__UART2_Init45
  L__UART2_Init_Advanced46
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text49
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text53
  L__UART1_Read_Text54
  L__UART1_Read_Text55
  L__UART1_Read_Text56
  L__UART1_Read_Text57
  L__UART1_Read_Text58
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init61
  L__UART1_Init62
  L__UART1_Init63
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced65
  L__UART1_Init_Advanced66
  L__UART1_Init_Advanced67
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text70
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text74
  L__UART2_Read_Text75
  L__UART2_Read_Text76
  L__UART2_Read_Text77
  L__UART2_Read_Text78
  L__UART2_Read_Text79
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init82
  L__UART2_Init83
  L__UART2_Init84
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced86
  L__UART2_Init_Advanced87
  L__UART2_Init_Advanced88
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text92
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text96
  L__UART_Read_Text97
  L__UART_Read_Text98
  L__UART_Read_Text99
  L__UART_Read_Text100
  L__UART_Read_Text101
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L_setInterruptPriority12
  L_setInterruptPriority13
  L_setInterruptPriority14
  L_setInterruptPriority15
  L_setInterruptPriority16
  L_setInterruptPriority17
  L_setInterruptPriority18
  L_setInterruptPriority19
  L_setInterruptPriority20
  L_setExternalInterrupt21
  L_setExternalInterrupt22
  L_setExternalInterrupt23
  L_setExternalInterrupt24
  L_setExternalInterrupt25
  L_setExternalInterrupt26
  L_switchExternalInterruptEdge27
  L_switchExternalInterruptEdge28
  L_switchExternalInterruptEdge29
  L_switchExternalInterruptEdge30
  L_switchExternalInterruptEdge31
  L_switchExternalInterruptEdge32
  L_switchExternalInterruptEdge33
  L_switchExternalInterruptEdge34
  L_switchExternalInterruptEdge35
  L_switchExternalInterruptEdge36
  L_switchExternalInterruptEdge37
  L_switchExternalInterruptEdge38
  L_getExternalInterruptEdge39
  L_getExternalInterruptEdge40
  L_getExternalInterruptEdge41
  L_getExternalInterruptEdge42
  L_getExternalInterruptEdge43
  L_getExternalInterruptEdge44
  L_clearExternalInterrupt45
  L_clearExternalInterrupt46
  L_clearExternalInterrupt47
  L_clearExternalInterrupt48
  L_clearExternalInterrupt49
  L_clearExternalInterrupt50
  L_setTimer51
  L_setTimer52
  L_setTimer53
  L_setTimer54
  L_setTimer55
  L_clearTimer56
  L_clearTimer57
  L_clearTimer58
  L_clearTimer59
  L_clearTimer60
  L_turnOnTimer61
  L_turnOnTimer62
  L_turnOnTimer63
  L_turnOnTimer64
  L_turnOnTimer65
  L_turnOffTimer66
  L_turnOffTimer67
  L_turnOffTimer68
  L_turnOffTimer69
  L_turnOffTimer70
  L_getTimerPrescaler71
  L_getTimerPrescaler72
  L_getTimerPrescaler73
  L_getTimerPrescaler74
  L_EEPROM_writeInt75
  L_EEPROM_writeInt76
  L_EEPROM_writeArray77
  L_EEPROM_writeArray78
  L_EEPROM_writeArray79
  L_EEPROM_readArray80
  L_EEPROM_readArray81
  L_EEPROM_readArray82
  L_counter_quarter_turn_match83
  L_counter_quarter_turn_match84
  L_counter_quarter_turn_match85
  L_counter_quarter_turn_match86
  L_counter_quarter_turn_match87
  L_counter_quarter_turn_match88
  L_EBB_control89
  L_EBB_control90
  L_EBB_control91
  L_EBB_control92
  L_EBB_control93
  L_EBB_control94
  L_EBB_control95
  L_EBB_control96
  L_EBB_control97
  L_EBB_control98
  L_EBB_control99
  L_EBB_control100
  L_EBB_control101
  L_EBB_control102
  L_EBB_control103
  L_EBB_control104
  L_EBB_control105
  L_EBB_control106
  L_EBB_control107
  L_EBB_control108
  L_EBB_control109
  L_EBB_control110
  L_EBB_control111
  L_EBB_control112
  L_EBB_control113
  L_EBB_control114
  L_EBB_control115
  L_EBB_control116
  L_EBB_control117
  L_EBB_control118
  L_EBB_control119
  L_EBB_control120
  L_EBB_control121
  L_EBB_control122
  L_EBB_control123
  L_EBB_control124
  L_EBB_control125
  L_EBB_control126
  L_EBB_control127
  L_EBB_control128
  L_EBB_control129
  L_EBB_control130
  L_EBB_control131
  L_EBB_control132
  L_EBB_control133
  L_EBB_control134
  L_EBB_control135
  L_EBB_control136
  L_EBB_control137
  L_EBB_control138
  L_EBB_control139
  L_EBB_control140
  L_EBB_control141
  L_EBB_control142
  L_EBB_control143
  L_EBB_control144
  L_EBB_control145
  L_EBB_control146
  L_EBB_Init147
  L_EBB_Init148
  L_EBB_Init149
  L_EBB_Init150
  L_EBB_Init151
  L_EBB_Init152
  L_EBB_Init153
  L_EBB_Init154
  L_EBB_Init155
  L_EBB_Init156
  L_timer1_interrupt158
  L_timer1_interrupt159
  L_timer1_interrupt160
  L_timer1_interrupt161
  L_timer1_interrupt162
  L_timer1_interrupt163
  L_timer2_interrupt164
  L_timer4_interrupt165
  L_main166
  L_main167
  L_CAN_Interrupt168
  L_CAN_Interrupt169
  L_CAN_Interrupt170
  L_CAN_Interrupt171
  L_CAN_Interrupt172
  L_CAN_Interrupt173
  L_CAN_Interrupt174
  L_CAN_Interrupt175
  L_CAN_Interrupt176
  L_CAN_Interrupt177
  L_CAN_Interrupt178
  L_CAN_Interrupt179
  L_CAN_Interrupt180
  L__Can_write181
  L__Can_write182
  L__Can_write183
  L__CAN_Interrupt184
  L__CAN_Interrupt185
  L__CAN_Interrupt186
  L__CAN_Interrupt187
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read190
  L__Can_read191
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write197
  L__Can_write198
  L__Can_write199
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket202
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived205
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived207
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_end_setAllPinAsDigital
  _setAllPinAsDigital
  L_end_setInterruptPriority
  _setInterruptPriority
  L__setInterruptPriority214
  L__setInterruptPriority215
  L__setInterruptPriority216
  L__setInterruptPriority217
  L__setInterruptPriority218
  L__setInterruptPriority219
  L_end_setExternalInterrupt
  _setExternalInterrupt
  L__setExternalInterrupt221
  L__setExternalInterrupt222
  L__setExternalInterrupt223
  L_end_switchExternalInterruptEdge
  _switchExternalInterruptEdge
  L__switchExternalInterruptEdge225
  L__switchExternalInterruptEdge226
  L__switchExternalInterruptEdge227
  L__switchExternalInterruptEdge228
  L__switchExternalInterruptEdge229
  L__switchExternalInterruptEdge230
  L_end_getExternalInterruptEdge
  _getExternalInterruptEdge
  L__getExternalInterruptEdge232
  L__getExternalInterruptEdge233
  L__getExternalInterruptEdge234
  L_end_clearExternalInterrupt
  _clearExternalInterrupt
  L__clearExternalInterrupt236
  L__clearExternalInterrupt237
  L__clearExternalInterrupt238
  L_end_setTimer
  _setTimer
  L__setTimer240
  L__setTimer241
  L__setTimer242
  L_end_clearTimer
  _clearTimer
  L__clearTimer244
  L__clearTimer245
  L__clearTimer246
  L_end_turnOnTimer
  _turnOnTimer
  L__turnOnTimer248
  L__turnOnTimer249
  L__turnOnTimer250
  L_end_turnOffTimer
  _turnOffTimer
  L__turnOffTimer252
  L__turnOffTimer253
  L__turnOffTimer254
  L_end_getTimerPeriod
  _getTimerPeriod
  L_end_getTimerPrescaler
  _getTimerPrescaler
  L__getTimerPrescaler257
  L__getTimerPrescaler258
  L_end_getExactTimerPrescaler
  _getExactTimerPrescaler
  L_end_setupAnalogSampling
  _setupAnalogSampling
  L_end_turnOnAnalogModule
  _turnOnAnalogModule
  L_end_turnOffAnalogModule
  _turnOffAnalogModule
  L_end_startSampling
  _startSampling
  L_end_getAnalogValue
  _getAnalogValue
  L_end_setAnalogPIN
  _setAnalogPIN
  L_end_unsetAnalogPIN
  _unsetAnalogPIN
  L_end_setAnalogInterrupt
  _setAnalogInterrupt
  L_end_unsetAnalogInterrupt
  _unsetAnalogInterrupt
  L_end_clearAnalogInterrupt
  _clearAnalogInterrupt
  L_end_setAutomaticSampling
  _setAutomaticSampling
  L_end_unsetAutomaticSampling
  _unsetAutomaticSampling
  L_end_setAnalogVoltageReference
  _setAnalogVoltageReference
  L_end_setAnalogDataOutputFormat
  _setAnalogDataOutputFormat
  L_end_getMinimumAnalogClockConversion
  _getMinimumAnalogClockConversion
  L_end_EEPROM_writeInt
  _EEPROM_writeInt
  L_end_EEPROM_readInt
  _EEPROM_readInt
  L_end_EEPROM_writeArray
  _EEPROM_writeArray
  L__EEPROM_writeArray278
  L_end_EEPROM_readArray
  _EEPROM_readArray
  L__EEPROM_readArray280
  L_end_CAN_routine
  _CAN_routine
  L_end_Debug_UART_Write
  _Debug_UART_Write
  L_end_counter_quarter_turn_match
  _counter_quarter_turn_match
  L__counter_quarter_turn_match284
  L__counter_quarter_turn_match285
  L__counter_quarter_turn_match286
  L_end_EBB_control
  _EBB_control
  L__EBB_control288
  L__EBB_control289
  L__EBB_control290
  L__EBB_control291
  L__EBB_control292
  L__EBB_control293
  L__EBB_control294
  L__EBB_control295
  L__EBB_control296
  L__EBB_control297
  L__EBB_control298
  L__EBB_control299
  L__EBB_control300
  L__EBB_control301
  L__EBB_control302
  L__EBB_control303
  L__EBB_control304
  L__EBB_control305
  L__EBB_control306
  L__EBB_control307
  L__EBB_control308
  L__EBB_control309
  L__EBB_control310
  L__EBB_control311
  L__EBB_control312
  L__EBB_control313
  L__EBB_control314
  L__EBB_control315
  L__EBB_control316
  L__EBB_control317
  L__EBB_control318
  L__EBB_control319
  L__EBB_control320
  L_end_EBB_Init
  _EBB_Init
  L__EBB_Init322
  L_end_timer1_interrupt
  _timer1_interrupt
  L__timer1_interrupt324
  L__timer1_interrupt325
  L__timer1_interrupt326
  L__timer1_interrupt327
  L__timer1_interrupt328
  L__timer1_interrupt329
  L_end_timer2_interrupt
  _timer2_interrupt
  L__timer2_interrupt331
  L_end_timer4_interrupt
  _timer4_interrupt
  L__timer4_interrupt333
  L_end_main
  _main
  L__main_end_loop
  L_end_CAN_Interrupt
  _CAN_Interrupt
  L__CAN_Interrupt337
  L__CAN_Interrupt338
  L__CAN_Interrupt339
  L__CAN_Interrupt340
  L__CAN_Interrupt341
  L__CAN_Interrupt342
  L__CAN_Interrupt343
  L__CAN_Interrupt344
  L__CAN_Interrupt345
  L__CAN_Interrupt346
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L_setInterruptPriority12
  L_setInterruptPriority13
  L_setInterruptPriority14
  L_setInterruptPriority15
  L_setInterruptPriority16
  L_setInterruptPriority17
  L_setInterruptPriority18
  L_setInterruptPriority19
  L_setInterruptPriority20
  L_setExternalInterrupt21
  L_setExternalInterrupt22
  L_setExternalInterrupt23
  L_setExternalInterrupt24
  L_setExternalInterrupt25
  L_setExternalInterrupt26
  L_switchExternalInterruptEdge27
  L_switchExternalInterruptEdge28
  L_switchExternalInterruptEdge29
  L_switchExternalInterruptEdge30
  L_switchExternalInterruptEdge31
  L_switchExternalInterruptEdge32
  L_switchExternalInterruptEdge33
  L_switchExternalInterruptEdge34
  L_switchExternalInterruptEdge35
  L_switchExternalInterruptEdge36
  L_switchExternalInterruptEdge37
  L_switchExternalInterruptEdge38
  L_getExternalInterruptEdge39
  L_getExternalInterruptEdge40
  L_getExternalInterruptEdge41
  L_getExternalInterruptEdge42
  L_getExternalInterruptEdge43
  L_getExternalInterruptEdge44
  L_clearExternalInterrupt45
  L_clearExternalInterrupt46
  L_clearExternalInterrupt47
  L_clearExternalInterrupt48
  L_clearExternalInterrupt49
  L_clearExternalInterrupt50
  L_setTimer51
  L_setTimer52
  L_setTimer53
  L_setTimer54
  L_setTimer55
  L_clearTimer56
  L_clearTimer57
  L_clearTimer58
  L_clearTimer59
  L_clearTimer60
  L_turnOnTimer61
  L_turnOnTimer62
  L_turnOnTimer63
  L_turnOnTimer64
  L_turnOnTimer65
  L_turnOffTimer66
  L_turnOffTimer67
  L_turnOffTimer68
  L_turnOffTimer69
  L_turnOffTimer70
  L_getTimerPrescaler71
  L_getTimerPrescaler72
  L_getTimerPrescaler73
  L_getTimerPrescaler74
  L_EEPROM_writeInt75
  L_EEPROM_writeInt76
  L_EEPROM_writeArray77
  L_EEPROM_writeArray78
  L_EEPROM_writeArray79
  L_EEPROM_readArray80
  L_EEPROM_readArray81
  L_EEPROM_readArray82
  L_counter_quarter_turn_match83
  L_counter_quarter_turn_match84
  L_counter_quarter_turn_match85
  L_counter_quarter_turn_match86
  L_counter_quarter_turn_match87
  L_counter_quarter_turn_match88
  L_EBB_control89
  L_EBB_control90
  L_EBB_control91
  L_EBB_control92
  L_EBB_control93
  L_EBB_control94
  L_EBB_control95
  L_EBB_control96
  L_EBB_control97
  L_EBB_control98
  L_EBB_control99
  L_EBB_control100
  L_EBB_control101
  L_EBB_control102
  L_EBB_control103
  L_EBB_control104
  L_EBB_control105
  L_EBB_control106
  L_EBB_control107
  L_EBB_control108
  L_EBB_control109
  L_EBB_control110
  L_EBB_control111
  L_EBB_control112
  L_EBB_control113
  L_EBB_control114
  L_EBB_control115
  L_EBB_control116
  L_EBB_control117
  L_EBB_control118
  L_EBB_control119
  L_EBB_control120
  L_EBB_control121
  L_EBB_control122
  L_EBB_control123
  L_EBB_control124
  L_EBB_control125
  L_EBB_control126
  L_EBB_control127
  L_EBB_control128
  L_EBB_control129
  L_EBB_control130
  L_EBB_control131
  L_EBB_control132
  L_EBB_control133
  L_EBB_control134
  L_EBB_control135
  L_EBB_control136
  L_EBB_control137
  L_EBB_control138
  L_EBB_control139
  L_EBB_control140
  L_EBB_control141
  L_EBB_control142
  L_EBB_control143
  L_EBB_control144
  L_EBB_control145
  L_EBB_control146
  L_EBB_Init147
  L_EBB_Init148
  L_EBB_Init149
  L_EBB_Init150
  L_EBB_Init151
  L_EBB_Init152
  L_EBB_Init153
  L_EBB_Init154
  L_EBB_Init155
  L_EBB_Init156
  L_timer1_interrupt158
  L_timer1_interrupt159
  L_timer1_interrupt160
  L_timer1_interrupt161
  L_timer1_interrupt162
  L_timer1_interrupt163
  L_timer2_interrupt164
  L_timer4_interrupt165
  L_main166
  L_main167
  L_CAN_Interrupt168
  L_CAN_Interrupt169
  L_CAN_Interrupt170
  L_CAN_Interrupt171
  L_CAN_Interrupt172
  L_CAN_Interrupt173
  L_CAN_Interrupt174
  L_CAN_Interrupt175
  L_CAN_Interrupt176
  L_CAN_Interrupt177
  L_CAN_Interrupt178
  L_CAN_Interrupt179
  L_CAN_Interrupt180
  L__Can_write181
  L__Can_write182
  L__Can_write183
  L__CAN_Interrupt184
  L__CAN_Interrupt185
  L__CAN_Interrupt186
  L__CAN_Interrupt187
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read190
  L__Can_read191
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write197
  L__Can_write198
  L__Can_write199
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket202
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived205
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived207
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_end_setAllPinAsDigital
  _setAllPinAsDigital
  L_end_setInterruptPriority
  _setInterruptPriority
  L__setInterruptPriority214
  L__setInterruptPriority215
  L__setInterruptPriority216
  L__setInterruptPriority217
  L__setInterruptPriority218
  L__setInterruptPriority219
  L_end_setExternalInterrupt
  _setExternalInterrupt
  L__setExternalInterrupt221
  L__setExternalInterrupt222
  L__setExternalInterrupt223
  L_end_switchExternalInterruptEdge
  _switchExternalInterruptEdge
  L__switchExternalInterruptEdge225
  L__switchExternalInterruptEdge226
  L__switchExternalInterruptEdge227
  L__switchExternalInterruptEdge228
  L__switchExternalInterruptEdge229
  L__switchExternalInterruptEdge230
  L_end_getExternalInterruptEdge
  _getExternalInterruptEdge
  L__getExternalInterruptEdge232
  L__getExternalInterruptEdge233
  L__getExternalInterruptEdge234
  L_end_clearExternalInterrupt
  _clearExternalInterrupt
  L__clearExternalInterrupt236
  L__clearExternalInterrupt237
  L__clearExternalInterrupt238
  L_end_setTimer
  _setTimer
  L__setTimer240
  L__setTimer241
  L__setTimer242
  L_end_clearTimer
  _clearTimer
  L__clearTimer244
  L__clearTimer245
  L__clearTimer246
  L_end_turnOnTimer
  _turnOnTimer
  L__turnOnTimer248
  L__turnOnTimer249
  L__turnOnTimer250
  L_end_turnOffTimer
  _turnOffTimer
  L__turnOffTimer252
  L__turnOffTimer253
  L__turnOffTimer254
  L_end_getTimerPeriod
  _getTimerPeriod
  L_end_getTimerPrescaler
  _getTimerPrescaler
  L__getTimerPrescaler257
  L__getTimerPrescaler258
  L_end_getExactTimerPrescaler
  _getExactTimerPrescaler
  L_end_setupAnalogSampling
  _setupAnalogSampling
  L_end_turnOnAnalogModule
  _turnOnAnalogModule
  L_end_turnOffAnalogModule
  _turnOffAnalogModule
  L_end_startSampling
  _startSampling
  L_end_getAnalogValue
  _getAnalogValue
  L_end_setAnalogPIN
  _setAnalogPIN
  L_end_unsetAnalogPIN
  _unsetAnalogPIN
  L_end_setAnalogInterrupt
  _setAnalogInterrupt
  L_end_unsetAnalogInterrupt
  _unsetAnalogInterrupt
  L_end_clearAnalogInterrupt
  _clearAnalogInterrupt
  L_end_setAutomaticSampling
  _setAutomaticSampling
  L_end_unsetAutomaticSampling
  _unsetAutomaticSampling
  L_end_setAnalogVoltageReference
  _setAnalogVoltageReference
  L_end_setAnalogDataOutputFormat
  _setAnalogDataOutputFormat
  L_end_getMinimumAnalogClockConversion
  _getMinimumAnalogClockConversion
  L_end_EEPROM_writeInt
  _EEPROM_writeInt
  L_end_EEPROM_readInt
  _EEPROM_readInt
  L_end_EEPROM_writeArray
  _EEPROM_writeArray
  L__EEPROM_writeArray278
  L_end_EEPROM_readArray
  _EEPROM_readArray
  L__EEPROM_readArray280
  L_end_CAN_routine
  _CAN_routine
  L_end_Debug_UART_Write
  _Debug_UART_Write
  L_end_counter_quarter_turn_match
  _counter_quarter_turn_match
  L__counter_quarter_turn_match284
  L__counter_quarter_turn_match285
  L__counter_quarter_turn_match286
  L_end_EBB_control
  _EBB_control
  L__EBB_control288
  L__EBB_control289
  L__EBB_control290
  L__EBB_control291
  L__EBB_control292
  L__EBB_control293
  L__EBB_control294
  L__EBB_control295
  L__EBB_control296
  L__EBB_control297
  L__EBB_control298
  L__EBB_control299
  L__EBB_control300
  L__EBB_control301
  L__EBB_control302
  L__EBB_control303
  L__EBB_control304
  L__EBB_control305
  L__EBB_control306
  L__EBB_control307
  L__EBB_control308
  L__EBB_control309
  L__EBB_control310
  L__EBB_control311
  L__EBB_control312
  L__EBB_control313
  L__EBB_control314
  L__EBB_control315
  L__EBB_control316
  L__EBB_control317
  L__EBB_control318
  L__EBB_control319
  L__EBB_control320
  L_end_EBB_Init
  _EBB_Init
  L__EBB_Init322
  L_end_timer1_interrupt
  _timer1_interrupt
  L__timer1_interrupt324
  L__timer1_interrupt325
  L__timer1_interrupt326
  L__timer1_interrupt327
  L__timer1_interrupt328
  L__timer1_interrupt329
  L_end_timer2_interrupt
  _timer2_interrupt
  L__timer2_interrupt331
  L_end_timer4_interrupt
  _timer4_interrupt
  L__timer4_interrupt333
  L_end_main
  _main
  L__main_end_loop
  L_end_CAN_Interrupt
  _CAN_Interrupt
  L__CAN_Interrupt337
  L__CAN_Interrupt338
  L__CAN_Interrupt339
  L__CAN_Interrupt340
  L__CAN_Interrupt341
  L__CAN_Interrupt342
  L__CAN_Interrupt343
  L__CAN_Interrupt344
  L__CAN_Interrupt345
  L__CAN_Interrupt346
  L___Lib_CAN_1_CAN1IDToRegs0
  L___Lib_CAN_1_CAN1IDToRegs1
  L___Lib_CAN_1_CAN1IDToRegs2
  L___Lib_CAN_1_CAN1IDToRegs3
  L___Lib_CAN_1_CAN1IDToRegs4
  L___Lib_CAN_1_CAN1IDToRegs5
  L___Lib_CAN_1_CAN1IDToRegs6
  L___Lib_CAN_1_CAN1IDToRegs7
  L___Lib_CAN_1_CAN1IDToRegs8
  L___Lib_CAN_1_CAN1IDToRegs9
  L___Lib_CAN_1_CAN1IDToRegs10
  L___Lib_CAN_1_CAN1IDToRegs11
  L___Lib_CAN_1_CAN1IDToRegs12
  L_CAN1SetOperationMode13
  L_CAN1SetOperationMode14
  L_CAN1SetOperationMode15
  L_CAN1SetOperationMode16
  L_CAN1SetBaudRate17
  L_CAN1SetBaudRate18
  L_CAN1SetBaudRate19
  L_CAN1SetMask20
  L_CAN1SetMask21
  L_CAN1SetFilter22
  L_CAN1SetFilter23
  L_CAN1SetFilter24
  L_CAN1SetFilter25
  L_CAN1SetFilter26
  L_CAN1SetFilter27
  L_CAN1SetFilter28
  L_CAN1SetFilter29
  L___Lib_CAN_1_RegsToCAN1ID30
  L___Lib_CAN_1_RegsToCAN1ID31
  L_CAN1Write32
  L_CAN1Write33
  L_CAN1Write34
  L_CAN1Write35
  L_CAN1Write36
  L_CAN1Write37
  L_CAN1Write38
  L_CAN1Write39
  L_CAN1Write40
  L_CAN1Write41
  L_CAN1Write42
  L_CAN1Read43
  L_CAN1Read44
  L_CAN1Read45
  L_CAN1Read46
  L_CAN1Read47
  L_CAN1Read48
  L_CAN1Read49
  L_CAN1Read50
  L_CAN1Read51
  L_CAN1Read52
  L_CAN1Read53
  L_CAN1Read54
  L_CAN1Read55
  L_CAN1Read56
  L_CAN1Read57
  L_CAN1Read58
  L_CAN1Initialize59
  L_CAN1Initialize60
  L_CAN1Initialize61
  L_CAN1Initialize62
  L_CAN1Initialize63
  L_end_CAN1IDToRegs
  __Lib_CAN_1_CAN1IDToRegs
  L___Lib_CAN_1_CAN1IDToRegs65
  L___Lib_CAN_1_CAN1IDToRegs66
  L___Lib_CAN_1_CAN1IDToRegs67
  L_end_CAN1SetOperationMode
  _CAN1SetOperationMode
  L__CAN1SetOperationMode69
  L__CAN1SetOperationMode70
  L_end_CAN1GetOperationMode
  _CAN1GetOperationMode
  L_end_CAN1SetBaudRate
  _CAN1SetBaudRate
  L_end_CAN1SetMask
  _CAN1SetMask
  L__CAN1SetMask74
  L_end_CAN1SetFilter
  _CAN1SetFilter
  L__CAN1SetFilter76
  L__CAN1SetFilter77
  L__CAN1SetFilter78
  L__CAN1SetFilter79
  L__CAN1SetFilter80
  L_end_RegsToCAN1ID
  __Lib_CAN_1_RegsToCAN1ID
  L_end_CAN1Write
  _CAN1Write
  L__CAN1Write83
  L_end_CAN1Read
  _CAN1Read
  L__CAN1Read85
  L__CAN1Read86
  L__CAN1Read87
  L_end_CAN1Initialize
  _CAN1Initialize
  L__CAN1Initialize89
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L_setInterruptPriority12
  L_setInterruptPriority13
  L_setInterruptPriority14
  L_setInterruptPriority15
  L_setInterruptPriority16
  L_setInterruptPriority17
  L_setInterruptPriority18
  L_setInterruptPriority19
  L_setInterruptPriority20
  L_setExternalInterrupt21
  L_setExternalInterrupt22
  L_setExternalInterrupt23
  L_setExternalInterrupt24
  L_setExternalInterrupt25
  L_setExternalInterrupt26
  L_switchExternalInterruptEdge27
  L_switchExternalInterruptEdge28
  L_switchExternalInterruptEdge29
  L_switchExternalInterruptEdge30
  L_switchExternalInterruptEdge31
  L_switchExternalInterruptEdge32
  L_switchExternalInterruptEdge33
  L_switchExternalInterruptEdge34
  L_switchExternalInterruptEdge35
  L_switchExternalInterruptEdge36
  L_switchExternalInterruptEdge37
  L_switchExternalInterruptEdge38
  L_getExternalInterruptEdge39
  L_getExternalInterruptEdge40
  L_getExternalInterruptEdge41
  L_getExternalInterruptEdge42
  L_getExternalInterruptEdge43
  L_getExternalInterruptEdge44
  L_clearExternalInterrupt45
  L_clearExternalInterrupt46
  L_clearExternalInterrupt47
  L_clearExternalInterrupt48
  L_clearExternalInterrupt49
  L_clearExternalInterrupt50
  L_setTimer51
  L_setTimer52
  L_setTimer53
  L_setTimer54
  L_setTimer55
  L_clearTimer56
  L_clearTimer57
  L_clearTimer58
  L_clearTimer59
  L_clearTimer60
  L_turnOnTimer61
  L_turnOnTimer62
  L_turnOnTimer63
  L_turnOnTimer64
  L_turnOnTimer65
  L_turnOffTimer66
  L_turnOffTimer67
  L_turnOffTimer68
  L_turnOffTimer69
  L_turnOffTimer70
  L_getTimerPrescaler71
  L_getTimerPrescaler72
  L_getTimerPrescaler73
  L_getTimerPrescaler74
  L_EEPROM_writeInt75
  L_EEPROM_writeInt76
  L_EEPROM_writeArray77
  L_EEPROM_writeArray78
  L_EEPROM_writeArray79
  L_EEPROM_readArray80
  L_EEPROM_readArray81
  L_EEPROM_readArray82
  L_counter_quarter_turn_match83
  L_counter_quarter_turn_match84
  L_counter_quarter_turn_match85
  L_counter_quarter_turn_match86
  L_counter_quarter_turn_match87
  L_counter_quarter_turn_match88
  L_EBB_control89
  L_EBB_control90
  L_EBB_control91
  L_EBB_control92
  L_EBB_control93
  L_EBB_control94
  L_EBB_control95
  L_EBB_control96
  L_EBB_control97
  L_EBB_control98
  L_EBB_control99
  L_EBB_control100
  L_EBB_control101
  L_EBB_control102
  L_EBB_control103
  L_EBB_control104
  L_EBB_control105
  L_EBB_control106
  L_EBB_control107
  L_EBB_control108
  L_EBB_control109
  L_EBB_control110
  L_EBB_control111
  L_EBB_control112
  L_EBB_control113
  L_EBB_control114
  L_EBB_control115
  L_EBB_control116
  L_EBB_control117
  L_EBB_control118
  L_EBB_control119
  L_EBB_control120
  L_EBB_control121
  L_EBB_control122
  L_EBB_control123
  L_EBB_control124
  L_EBB_control125
  L_EBB_control126
  L_EBB_control127
  L_EBB_control128
  L_EBB_control129
  L_EBB_control130
  L_EBB_control131
  L_EBB_control132
  L_EBB_control133
  L_EBB_control134
  L_EBB_control135
  L_EBB_control136
  L_EBB_control137
  L_EBB_control138
  L_EBB_control139
  L_EBB_control140
  L_EBB_control141
  L_EBB_control142
  L_EBB_control143
  L_EBB_control144
  L_EBB_control145
  L_EBB_control146
  L_EBB_Init147
  L_EBB_Init148
  L_EBB_Init149
  L_EBB_Init150
  L_EBB_Init151
  L_EBB_Init152
  L_EBB_Init153
  L_EBB_Init154
  L_EBB_Init155
  L_EBB_Init156
  L_timer1_interrupt158
  L_timer1_interrupt159
  L_timer1_interrupt160
  L_timer1_interrupt161
  L_timer1_interrupt162
  L_timer1_interrupt163
  L_timer2_interrupt164
  L_timer4_interrupt165
  L_main166
  L_main167
  L_CAN_Interrupt168
  L_CAN_Interrupt169
  L_CAN_Interrupt170
  L_CAN_Interrupt171
  L_CAN_Interrupt172
  L_CAN_Interrupt173
  L_CAN_Interrupt174
  L_CAN_Interrupt175
  L_CAN_Interrupt176
  L_CAN_Interrupt177
  L_CAN_Interrupt178
  L_CAN_Interrupt179
  L_CAN_Interrupt180
  L__Can_write181
  L__Can_write182
  L__Can_write183
  L__CAN_Interrupt184
  L__CAN_Interrupt185
  L__CAN_Interrupt186
  L__CAN_Interrupt187
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read190
  L__Can_read191
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write197
  L__Can_write198
  L__Can_write199
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket202
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived205
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived207
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_end_setAllPinAsDigital
  _setAllPinAsDigital
  L_end_setInterruptPriority
  _setInterruptPriority
  L__setInterruptPriority214
  L__setInterruptPriority215
  L__setInterruptPriority216
  L__setInterruptPriority217
  L__setInterruptPriority218
  L__setInterruptPriority219
  L_end_setExternalInterrupt
  _setExternalInterrupt
  L__setExternalInterrupt221
  L__setExternalInterrupt222
  L__setExternalInterrupt223
  L_end_switchExternalInterruptEdge
  _switchExternalInterruptEdge
  L__switchExternalInterruptEdge225
  L__switchExternalInterruptEdge226
  L__switchExternalInterruptEdge227
  L__switchExternalInterruptEdge228
  L__switchExternalInterruptEdge229
  L__switchExternalInterruptEdge230
  L_end_getExternalInterruptEdge
  _getExternalInterruptEdge
  L__getExternalInterruptEdge232
  L__getExternalInterruptEdge233
  L__getExternalInterruptEdge234
  L_end_clearExternalInterrupt
  _clearExternalInterrupt
  L__clearExternalInterrupt236
  L__clearExternalInterrupt237
  L__clearExternalInterrupt238
  L_end_setTimer
  _setTimer
  L__setTimer240
  L__setTimer241
  L__setTimer242
  L_end_clearTimer
  _clearTimer
  L__clearTimer244
  L__clearTimer245
  L__clearTimer246
  L_end_turnOnTimer
  _turnOnTimer
  L__turnOnTimer248
  L__turnOnTimer249
  L__turnOnTimer250
  L_end_turnOffTimer
  _turnOffTimer
  L__turnOffTimer252
  L__turnOffTimer253
  L__turnOffTimer254
  L_end_getTimerPeriod
  _getTimerPeriod
  L_end_getTimerPrescaler
  _getTimerPrescaler
  L__getTimerPrescaler257
  L__getTimerPrescaler258
  L_end_getExactTimerPrescaler
  _getExactTimerPrescaler
  L_end_setupAnalogSampling
  _setupAnalogSampling
  L_end_turnOnAnalogModule
  _turnOnAnalogModule
  L_end_turnOffAnalogModule
  _turnOffAnalogModule
  L_end_startSampling
  _startSampling
  L_end_getAnalogValue
  _getAnalogValue
  L_end_setAnalogPIN
  _setAnalogPIN
  L_end_unsetAnalogPIN
  _unsetAnalogPIN
  L_end_setAnalogInterrupt
  _setAnalogInterrupt
  L_end_unsetAnalogInterrupt
  _unsetAnalogInterrupt
  L_end_clearAnalogInterrupt
  _clearAnalogInterrupt
  L_end_setAutomaticSampling
  _setAutomaticSampling
  L_end_unsetAutomaticSampling
  _unsetAutomaticSampling
  L_end_setAnalogVoltageReference
  _setAnalogVoltageReference
  L_end_setAnalogDataOutputFormat
  _setAnalogDataOutputFormat
  L_end_getMinimumAnalogClockConversion
  _getMinimumAnalogClockConversion
  L_end_EEPROM_writeInt
  _EEPROM_writeInt
  L_end_EEPROM_readInt
  _EEPROM_readInt
  L_end_EEPROM_writeArray
  _EEPROM_writeArray
  L__EEPROM_writeArray278
  L_end_EEPROM_readArray
  _EEPROM_readArray
  L__EEPROM_readArray280
  L_end_CAN_routine
  _CAN_routine
  L_end_Debug_UART_Write
  _Debug_UART_Write
  L_end_counter_quarter_turn_match
  _counter_quarter_turn_match
  L__counter_quarter_turn_match284
  L__counter_quarter_turn_match285
  L__counter_quarter_turn_match286
  L_end_EBB_control
  _EBB_control
  L__EBB_control288
  L__EBB_control289
  L__EBB_control290
  L__EBB_control291
  L__EBB_control292
  L__EBB_control293
  L__EBB_control294
  L__EBB_control295
  L__EBB_control296
  L__EBB_control297
  L__EBB_control298
  L__EBB_control299
  L__EBB_control300
  L__EBB_control301
  L__EBB_control302
  L__EBB_control303
  L__EBB_control304
  L__EBB_control305
  L__EBB_control306
  L__EBB_control307
  L__EBB_control308
  L__EBB_control309
  L__EBB_control310
  L__EBB_control311
  L__EBB_control312
  L__EBB_control313
  L__EBB_control314
  L__EBB_control315
  L__EBB_control316
  L__EBB_control317
  L__EBB_control318
  L__EBB_control319
  L__EBB_control320
  L_end_EBB_Init
  _EBB_Init
  L__EBB_Init322
  L_end_timer1_interrupt
  _timer1_interrupt
  L__timer1_interrupt324
  L__timer1_interrupt325
  L__timer1_interrupt326
  L__timer1_interrupt327
  L__timer1_interrupt328
  L__timer1_interrupt329
  L_end_timer2_interrupt
  _timer2_interrupt
  L__timer2_interrupt331
  L_end_timer4_interrupt
  _timer4_interrupt
  L__timer4_interrupt333
  L_end_main
  _main
  L__main_end_loop
  L_end_CAN_Interrupt
  _CAN_Interrupt
  L__CAN_Interrupt337
  L__CAN_Interrupt338
  L__CAN_Interrupt339
  L__CAN_Interrupt340
  L__CAN_Interrupt341
  L__CAN_Interrupt342
  L__CAN_Interrupt343
  L__CAN_Interrupt344
  L__CAN_Interrupt345
  L__CAN_Interrupt346
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L_setInterruptPriority12
  L_setInterruptPriority13
  L_setInterruptPriority14
  L_setInterruptPriority15
  L_setInterruptPriority16
  L_setInterruptPriority17
  L_setInterruptPriority18
  L_setInterruptPriority19
  L_setInterruptPriority20
  L_setExternalInterrupt21
  L_setExternalInterrupt22
  L_setExternalInterrupt23
  L_setExternalInterrupt24
  L_setExternalInterrupt25
  L_setExternalInterrupt26
  L_switchExternalInterruptEdge27
  L_switchExternalInterruptEdge28
  L_switchExternalInterruptEdge29
  L_switchExternalInterruptEdge30
  L_switchExternalInterruptEdge31
  L_switchExternalInterruptEdge32
  L_switchExternalInterruptEdge33
  L_switchExternalInterruptEdge34
  L_switchExternalInterruptEdge35
  L_switchExternalInterruptEdge36
  L_switchExternalInterruptEdge37
  L_switchExternalInterruptEdge38
  L_getExternalInterruptEdge39
  L_getExternalInterruptEdge40
  L_getExternalInterruptEdge41
  L_getExternalInterruptEdge42
  L_getExternalInterruptEdge43
  L_getExternalInterruptEdge44
  L_clearExternalInterrupt45
  L_clearExternalInterrupt46
  L_clearExternalInterrupt47
  L_clearExternalInterrupt48
  L_clearExternalInterrupt49
  L_clearExternalInterrupt50
  L_setTimer51
  L_setTimer52
  L_setTimer53
  L_setTimer54
  L_setTimer55
  L_clearTimer56
  L_clearTimer57
  L_clearTimer58
  L_clearTimer59
  L_clearTimer60
  L_turnOnTimer61
  L_turnOnTimer62
  L_turnOnTimer63
  L_turnOnTimer64
  L_turnOnTimer65
  L_turnOffTimer66
  L_turnOffTimer67
  L_turnOffTimer68
  L_turnOffTimer69
  L_turnOffTimer70
  L_getTimerPrescaler71
  L_getTimerPrescaler72
  L_getTimerPrescaler73
  L_getTimerPrescaler74
  L_EEPROM_writeInt75
  L_EEPROM_writeInt76
  L_EEPROM_writeArray77
  L_EEPROM_writeArray78
  L_EEPROM_writeArray79
  L_EEPROM_readArray80
  L_EEPROM_readArray81
  L_EEPROM_readArray82
  L_counter_quarter_turn_match83
  L_counter_quarter_turn_match84
  L_counter_quarter_turn_match85
  L_counter_quarter_turn_match86
  L_counter_quarter_turn_match87
  L_counter_quarter_turn_match88
  L_EBB_control89
  L_EBB_control90
  L_EBB_control91
  L_EBB_control92
  L_EBB_control93
  L_EBB_control94
  L_EBB_control95
  L_EBB_control96
  L_EBB_control97
  L_EBB_control98
  L_EBB_control99
  L_EBB_control100
  L_EBB_control101
  L_EBB_control102
  L_EBB_control103
  L_EBB_control104
  L_EBB_control105
  L_EBB_control106
  L_EBB_control107
  L_EBB_control108
  L_EBB_control109
  L_EBB_control110
  L_EBB_control111
  L_EBB_control112
  L_EBB_control113
  L_EBB_control114
  L_EBB_control115
  L_EBB_control116
  L_EBB_control117
  L_EBB_control118
  L_EBB_control119
  L_EBB_control120
  L_EBB_control121
  L_EBB_control122
  L_EBB_control123
  L_EBB_control124
  L_EBB_control125
  L_EBB_control126
  L_EBB_control127
  L_EBB_control128
  L_EBB_control129
  L_EBB_control130
  L_EBB_control131
  L_EBB_control132
  L_EBB_control133
  L_EBB_control134
  L_EBB_control135
  L_EBB_control136
  L_EBB_control137
  L_EBB_control138
  L_EBB_control139
  L_EBB_control140
  L_EBB_control141
  L_EBB_control142
  L_EBB_control143
  L_EBB_control144
  L_EBB_control145
  L_EBB_control146
  L_EBB_Init147
  L_EBB_Init148
  L_EBB_Init149
  L_EBB_Init150
  L_EBB_Init151
  L_EBB_Init152
  L_EBB_Init153
  L_EBB_Init154
  L_EBB_Init155
  L_EBB_Init156
  L_timer1_interrupt158
  L_timer1_interrupt159
  L_timer1_interrupt160
  L_timer1_interrupt161
  L_timer1_interrupt162
  L_timer1_interrupt163
  L_timer2_interrupt164
  L_timer4_interrupt165
  L_main166
  L_main167
  L_CAN_Interrupt168
  L_CAN_Interrupt169
  L_CAN_Interrupt170
  L_CAN_Interrupt171
  L_CAN_Interrupt172
  L_CAN_Interrupt173
  L_CAN_Interrupt174
  L_CAN_Interrupt175
  L_CAN_Interrupt176
  L_CAN_Interrupt177
  L_CAN_Interrupt178
  L_CAN_Interrupt179
  L_CAN_Interrupt180
  L__Can_write181
  L__Can_write182
  L__Can_write183
  L__CAN_Interrupt184
  L__CAN_Interrupt185
  L__CAN_Interrupt186
  L__CAN_Interrupt187
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read190
  L__Can_read191
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write197
  L__Can_write198
  L__Can_write199
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket202
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived205
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived207
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_end_setAllPinAsDigital
  _setAllPinAsDigital
  L_end_setInterruptPriority
  _setInterruptPriority
  L__setInterruptPriority214
  L__setInterruptPriority215
  L__setInterruptPriority216
  L__setInterruptPriority217
  L__setInterruptPriority218
  L__setInterruptPriority219
  L_end_setExternalInterrupt
  _setExternalInterrupt
  L__setExternalInterrupt221
  L__setExternalInterrupt222
  L__setExternalInterrupt223
  L_end_switchExternalInterruptEdge
  _switchExternalInterruptEdge
  L__switchExternalInterruptEdge225
  L__switchExternalInterruptEdge226
  L__switchExternalInterruptEdge227
  L__switchExternalInterruptEdge228
  L__switchExternalInterruptEdge229
  L__switchExternalInterruptEdge230
  L_end_getExternalInterruptEdge
  _getExternalInterruptEdge
  L__getExternalInterruptEdge232
  L__getExternalInterruptEdge233
  L__getExternalInterruptEdge234
  L_end_clearExternalInterrupt
  _clearExternalInterrupt
  L__clearExternalInterrupt236
  L__clearExternalInterrupt237
  L__clearExternalInterrupt238
  L_end_setTimer
  _setTimer
  L__setTimer240
  L__setTimer241
  L__setTimer242
  L_end_clearTimer
  _clearTimer
  L__clearTimer244
  L__clearTimer245
  L__clearTimer246
  L_end_turnOnTimer
  _turnOnTimer
  L__turnOnTimer248
  L__turnOnTimer249
  L__turnOnTimer250
  L_end_turnOffTimer
  _turnOffTimer
  L__turnOffTimer252
  L__turnOffTimer253
  L__turnOffTimer254
  L_end_getTimerPeriod
  _getTimerPeriod
  L_end_getTimerPrescaler
  _getTimerPrescaler
  L__getTimerPrescaler257
  L__getTimerPrescaler258
  L_end_getExactTimerPrescaler
  _getExactTimerPrescaler
  L_end_setupAnalogSampling
  _setupAnalogSampling
  L_end_turnOnAnalogModule
  _turnOnAnalogModule
  L_end_turnOffAnalogModule
  _turnOffAnalogModule
  L_end_startSampling
  _startSampling
  L_end_getAnalogValue
  _getAnalogValue
  L_end_setAnalogPIN
  _setAnalogPIN
  L_end_unsetAnalogPIN
  _unsetAnalogPIN
  L_end_setAnalogInterrupt
  _setAnalogInterrupt
  L_end_unsetAnalogInterrupt
  _unsetAnalogInterrupt
  L_end_clearAnalogInterrupt
  _clearAnalogInterrupt
  L_end_setAutomaticSampling
  _setAutomaticSampling
  L_end_unsetAutomaticSampling
  _unsetAutomaticSampling
  L_end_setAnalogVoltageReference
  _setAnalogVoltageReference
  L_end_setAnalogDataOutputFormat
  _setAnalogDataOutputFormat
  L_end_getMinimumAnalogClockConversion
  _getMinimumAnalogClockConversion
  L_end_EEPROM_writeInt
  _EEPROM_writeInt
  L_end_EEPROM_readInt
  _EEPROM_readInt
  L_end_EEPROM_writeArray
  _EEPROM_writeArray
  L__EEPROM_writeArray278
  L_end_EEPROM_readArray
  _EEPROM_readArray
  L__EEPROM_readArray280
  L_end_CAN_routine
  _CAN_routine
  L_end_Debug_UART_Write
  _Debug_UART_Write
  L_end_counter_quarter_turn_match
  _counter_quarter_turn_match
  L__counter_quarter_turn_match284
  L__counter_quarter_turn_match285
  L__counter_quarter_turn_match286
  L_end_EBB_control
  _EBB_control
  L__EBB_control288
  L__EBB_control289
  L__EBB_control290
  L__EBB_control291
  L__EBB_control292
  L__EBB_control293
  L__EBB_control294
  L__EBB_control295
  L__EBB_control296
  L__EBB_control297
  L__EBB_control298
  L__EBB_control299
  L__EBB_control300
  L__EBB_control301
  L__EBB_control302
  L__EBB_control303
  L__EBB_control304
  L__EBB_control305
  L__EBB_control306
  L__EBB_control307
  L__EBB_control308
  L__EBB_control309
  L__EBB_control310
  L__EBB_control311
  L__EBB_control312
  L__EBB_control313
  L__EBB_control314
  L__EBB_control315
  L__EBB_control316
  L__EBB_control317
  L__EBB_control318
  L__EBB_control319
  L__EBB_control320
  L_end_EBB_Init
  _EBB_Init
  L__EBB_Init322
  L_end_timer1_interrupt
  _timer1_interrupt
  L__timer1_interrupt324
  L__timer1_interrupt325
  L__timer1_interrupt326
  L__timer1_interrupt327
  L__timer1_interrupt328
  L__timer1_interrupt329
  L_end_timer2_interrupt
  _timer2_interrupt
  L__timer2_interrupt331
  L_end_timer4_interrupt
  _timer4_interrupt
  L__timer4_interrupt333
  L_end_main
  _main
  L__main_end_loop
  L_end_CAN_Interrupt
  _CAN_Interrupt
  L__CAN_Interrupt337
  L__CAN_Interrupt338
  L__CAN_Interrupt339
  L__CAN_Interrupt340
  L__CAN_Interrupt341
  L__CAN_Interrupt342
  L__CAN_Interrupt343
  L__CAN_Interrupt344
  L__CAN_Interrupt345
  L__CAN_Interrupt346
  L_Can_read0
  L_Can_read1
  L_Can_read2
  L_Can_write3
  L_Can_write4
  L_Can_write5
  L_Can_write6
  L_Can_write7
  L_Can_write8
  L_Can_resetWritePacket9
  L_Can_resetWritePacket10
  L_Can_resetWritePacket11
  L_setInterruptPriority12
  L_setInterruptPriority13
  L_setInterruptPriority14
  L_setInterruptPriority15
  L_setInterruptPriority16
  L_setInterruptPriority17
  L_setInterruptPriority18
  L_setInterruptPriority19
  L_setInterruptPriority20
  L_setExternalInterrupt21
  L_setExternalInterrupt22
  L_setExternalInterrupt23
  L_setExternalInterrupt24
  L_setExternalInterrupt25
  L_setExternalInterrupt26
  L_switchExternalInterruptEdge27
  L_switchExternalInterruptEdge28
  L_switchExternalInterruptEdge29
  L_switchExternalInterruptEdge30
  L_switchExternalInterruptEdge31
  L_switchExternalInterruptEdge32
  L_switchExternalInterruptEdge33
  L_switchExternalInterruptEdge34
  L_switchExternalInterruptEdge35
  L_switchExternalInterruptEdge36
  L_switchExternalInterruptEdge37
  L_switchExternalInterruptEdge38
  L_getExternalInterruptEdge39
  L_getExternalInterruptEdge40
  L_getExternalInterruptEdge41
  L_getExternalInterruptEdge42
  L_getExternalInterruptEdge43
  L_getExternalInterruptEdge44
  L_clearExternalInterrupt45
  L_clearExternalInterrupt46
  L_clearExternalInterrupt47
  L_clearExternalInterrupt48
  L_clearExternalInterrupt49
  L_clearExternalInterrupt50
  L_setTimer51
  L_setTimer52
  L_setTimer53
  L_setTimer54
  L_setTimer55
  L_clearTimer56
  L_clearTimer57
  L_clearTimer58
  L_clearTimer59
  L_clearTimer60
  L_turnOnTimer61
  L_turnOnTimer62
  L_turnOnTimer63
  L_turnOnTimer64
  L_turnOnTimer65
  L_turnOffTimer66
  L_turnOffTimer67
  L_turnOffTimer68
  L_turnOffTimer69
  L_turnOffTimer70
  L_getTimerPrescaler71
  L_getTimerPrescaler72
  L_getTimerPrescaler73
  L_getTimerPrescaler74
  L_EEPROM_writeInt75
  L_EEPROM_writeInt76
  L_EEPROM_writeArray77
  L_EEPROM_writeArray78
  L_EEPROM_writeArray79
  L_EEPROM_readArray80
  L_EEPROM_readArray81
  L_EEPROM_readArray82
  L_counter_quarter_turn_match83
  L_counter_quarter_turn_match84
  L_counter_quarter_turn_match85
  L_counter_quarter_turn_match86
  L_counter_quarter_turn_match87
  L_counter_quarter_turn_match88
  L_EBB_control89
  L_EBB_control90
  L_EBB_control91
  L_EBB_control92
  L_EBB_control93
  L_EBB_control94
  L_EBB_control95
  L_EBB_control96
  L_EBB_control97
  L_EBB_control98
  L_EBB_control99
  L_EBB_control100
  L_EBB_control101
  L_EBB_control102
  L_EBB_control103
  L_EBB_control104
  L_EBB_control105
  L_EBB_control106
  L_EBB_control107
  L_EBB_control108
  L_EBB_control109
  L_EBB_control110
  L_EBB_control111
  L_EBB_control112
  L_EBB_control113
  L_EBB_control114
  L_EBB_control115
  L_EBB_control116
  L_EBB_control117
  L_EBB_control118
  L_EBB_control119
  L_EBB_control120
  L_EBB_control121
  L_EBB_control122
  L_EBB_control123
  L_EBB_control124
  L_EBB_control125
  L_EBB_control126
  L_EBB_control127
  L_EBB_control128
  L_EBB_control129
  L_EBB_control130
  L_EBB_control131
  L_EBB_control132
  L_EBB_control133
  L_EBB_control134
  L_EBB_control135
  L_EBB_control136
  L_EBB_control137
  L_EBB_control138
  L_EBB_control139
  L_EBB_control140
  L_EBB_control141
  L_EBB_control142
  L_EBB_control143
  L_EBB_control144
  L_EBB_control145
  L_EBB_control146
  L_EBB_Init147
  L_EBB_Init148
  L_EBB_Init149
  L_EBB_Init150
  L_EBB_Init151
  L_EBB_Init152
  L_EBB_Init153
  L_EBB_Init154
  L_EBB_Init155
  L_EBB_Init156
  L_timer1_interrupt158
  L_timer1_interrupt159
  L_timer1_interrupt160
  L_timer1_interrupt161
  L_timer1_interrupt162
  L_timer1_interrupt163
  L_timer2_interrupt164
  L_timer4_interrupt165
  L_main166
  L_main167
  L_CAN_Interrupt168
  L_CAN_Interrupt169
  L_CAN_Interrupt170
  L_CAN_Interrupt171
  L_CAN_Interrupt172
  L_CAN_Interrupt173
  L_CAN_Interrupt174
  L_CAN_Interrupt175
  L_CAN_Interrupt176
  L_CAN_Interrupt177
  L_CAN_Interrupt178
  L_CAN_Interrupt179
  L_CAN_Interrupt180
  L__Can_write181
  L__Can_write182
  L__Can_write183
  L__CAN_Interrupt184
  L__CAN_Interrupt185
  L__CAN_Interrupt186
  L__CAN_Interrupt187
  L_end_Can_init
  _Can_init
  L_end_Can_read
  _Can_read
  L__Can_read190
  L__Can_read191
  L_end_Can_writeByte
  _Can_writeByte
  L_end_Can_writeInt
  _Can_writeInt
  L_end_Can_addIntToWritePacket
  _Can_addIntToWritePacket
  L_end_Can_addByteToWritePacket
  _Can_addByteToWritePacket
  L_end_Can_write
  _Can_write
  L__Can_write197
  L__Can_write198
  L__Can_write199
  L_end_Can_setWritePriority
  _Can_setWritePriority
  L_end_Can_resetWritePacket
  _Can_resetWritePacket
  L__Can_resetWritePacket202
  L_end_Can_getWriteFlags
  _Can_getWriteFlags
  L_end_Can_B0hasBeenReceived
  _Can_B0hasBeenReceived
  L__Can_B0hasBeenReceived205
  L_end_Can_B1hasBeenReceived
  _Can_B1hasBeenReceived
  L__Can_B1hasBeenReceived207
  L_end_Can_clearB0Flag
  _Can_clearB0Flag
  L_end_Can_clearB1Flag
  _Can_clearB1Flag
  L_end_Can_clearInterrupt
  _Can_clearInterrupt
  L_end_Can_initInterrupt
  _Can_initInterrupt
  L_end_setAllPinAsDigital
  _setAllPinAsDigital
  L_end_setInterruptPriority
  _setInterruptPriority
  L__setInterruptPriority214
  L__setInterruptPriority215
  L__setInterruptPriority216
  L__setInterruptPriority217
  L__setInterruptPriority218
  L__setInterruptPriority219
  L_end_setExternalInterrupt
  _setExternalInterrupt
  L__setExternalInterrupt221
  L__setExternalInterrupt222
  L__setExternalInterrupt223
  L_end_switchExternalInterruptEdge
  _switchExternalInterruptEdge
  L__switchExternalInterruptEdge225
  L__switchExternalInterruptEdge226
  L__switchExternalInterruptEdge227
  L__switchExternalInterruptEdge228
  L__switchExternalInterruptEdge229
  L__switchExternalInterruptEdge230
  L_end_getExternalInterruptEdge
  _getExternalInterruptEdge
  L__getExternalInterruptEdge232
  L__getExternalInterruptEdge233
  L__getExternalInterruptEdge234
  L_end_clearExternalInterrupt
  _clearExternalInterrupt
  L__clearExternalInterrupt236
  L__clearExternalInterrupt237
  L__clearExternalInterrupt238
  L_end_setTimer
  _setTimer
  L__setTimer240
  L__setTimer241
  L__setTimer242
  L_end_clearTimer
  _clearTimer
  L__clearTimer244
  L__clearTimer245
  L__clearTimer246
  L_end_turnOnTimer
  _turnOnTimer
  L__turnOnTimer248
  L__turnOnTimer249
  L__turnOnTimer250
  L_end_turnOffTimer
  _turnOffTimer
  L__turnOffTimer252
  L__turnOffTimer253
  L__turnOffTimer254
  L_end_getTimerPeriod
  _getTimerPeriod
  L_end_getTimerPrescaler
  _getTimerPrescaler
  L__getTimerPrescaler257
  L__getTimerPrescaler258
  L_end_getExactTimerPrescaler
  _getExactTimerPrescaler
  L_end_setupAnalogSampling
  _setupAnalogSampling
  L_end_turnOnAnalogModule
  _turnOnAnalogModule
  L_end_turnOffAnalogModule
  _turnOffAnalogModule
  L_end_startSampling
  _startSampling
  L_end_getAnalogValue
  _getAnalogValue
  L_end_setAnalogPIN
  _setAnalogPIN
  L_end_unsetAnalogPIN
  _unsetAnalogPIN
  L_end_setAnalogInterrupt
  _setAnalogInterrupt
  L_end_unsetAnalogInterrupt
  _unsetAnalogInterrupt
  L_end_clearAnalogInterrupt
  _clearAnalogInterrupt
  L_end_setAutomaticSampling
  _setAutomaticSampling
  L_end_unsetAutomaticSampling
  _unsetAutomaticSampling
  L_end_setAnalogVoltageReference
  _setAnalogVoltageReference
  L_end_setAnalogDataOutputFormat
  _setAnalogDataOutputFormat
  L_end_getMinimumAnalogClockConversion
  _getMinimumAnalogClockConversion
  L_end_EEPROM_writeInt
  _EEPROM_writeInt
  L_end_EEPROM_readInt
  _EEPROM_readInt
  L_end_EEPROM_writeArray
  _EEPROM_writeArray
  L__EEPROM_writeArray278
  L_end_EEPROM_readArray
  _EEPROM_readArray
  L__EEPROM_readArray280
  L_end_CAN_routine
  _CAN_routine
  L_end_Debug_UART_Write
  _Debug_UART_Write
  L_end_counter_quarter_turn_match
  _counter_quarter_turn_match
  L__counter_quarter_turn_match284
  L__counter_quarter_turn_match285
  L__counter_quarter_turn_match286
  L_end_EBB_control
  _EBB_control
  L__EBB_control288
  L__EBB_control289
  L__EBB_control290
  L__EBB_control291
  L__EBB_control292
  L__EBB_control293
  L__EBB_control294
  L__EBB_control295
  L__EBB_control296
  L__EBB_control297
  L__EBB_control298
  L__EBB_control299
  L__EBB_control300
  L__EBB_control301
  L__EBB_control302
  L__EBB_control303
  L__EBB_control304
  L__EBB_control305
  L__EBB_control306
  L__EBB_control307
  L__EBB_control308
  L__EBB_control309
  L__EBB_control310
  L__EBB_control311
  L__EBB_control312
  L__EBB_control313
  L__EBB_control314
  L__EBB_control315
  L__EBB_control316
  L__EBB_control317
  L__EBB_control318
  L__EBB_control319
  L__EBB_control320
  L_end_EBB_Init
  _EBB_Init
  L__EBB_Init322
  L_end_timer1_interrupt
  _timer1_interrupt
  L__timer1_interrupt324
  L__timer1_interrupt325
  L__timer1_interrupt326
  L__timer1_interrupt327
  L__timer1_interrupt328
  L__timer1_interrupt329
  L_end_timer2_interrupt
  _timer2_interrupt
  L__timer2_interrupt331
  L_end_timer4_interrupt
  _timer4_interrupt
  L__timer4_interrupt333
  L_end_main
  _main
  L__main_end_loop
  L_end_CAN_Interrupt
  _CAN_Interrupt
  L__CAN_Interrupt337
  L__CAN_Interrupt338
  L__CAN_Interrupt339
  L__CAN_Interrupt340
  L__CAN_Interrupt341
  L__CAN_Interrupt342
  L__CAN_Interrupt343
  L__CAN_Interrupt344
  L__CAN_Interrupt345
  L__CAN_Interrupt346
